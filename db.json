{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"source/images/consul.jpg","path":"images/consul.jpg","modified":0,"renderable":0},{"_id":"source/images/encapsulation_1.jpg","path":"images/encapsulation_1.jpg","modified":0,"renderable":0},{"_id":"source/images/consul_1.png","path":"images/consul_1.png","modified":0,"renderable":0},{"_id":"source/images/lodash_0.jpg","path":"images/lodash_0.jpg","modified":0,"renderable":0},{"_id":"source/images/object-oriented-programming_1.jpg","path":"images/object-oriented-programming_1.jpg","modified":0,"renderable":0},{"_id":"source/images/object-oriented-programming_3.jpg","path":"images/object-oriented-programming_3.jpg","modified":0,"renderable":0},{"_id":"source/images/object-oriented-programming_4.jpg","path":"images/object-oriented-programming_4.jpg","modified":0,"renderable":0},{"_id":"source/images/object-oriented-programming_2.jpg","path":"images/object-oriented-programming_2.jpg","modified":0,"renderable":0},{"_id":"source/images/object-oriented-programming_5.jpg","path":"images/object-oriented-programming_5.jpg","modified":0,"renderable":0},{"_id":"source/images/object-oriented-programming_7.jpg","path":"images/object-oriented-programming_7.jpg","modified":0,"renderable":0},{"_id":"source/images/object-oriented-programming_6.jpg","path":"images/object-oriented-programming_6.jpg","modified":0,"renderable":0},{"_id":"source/images/spring-springboot-1.jpg","path":"images/spring-springboot-1.jpg","modified":0,"renderable":0},{"_id":"source/images/spring-springboot-helloworld-3.png","path":"images/spring-springboot-helloworld-3.png","modified":0,"renderable":0},{"_id":"source/images/spring-springboot-helloworld-2.png","path":"images/spring-springboot-helloworld-2.png","modified":0,"renderable":0},{"_id":"source/images/spring-springboot-helloworld-5.png","path":"images/spring-springboot-helloworld-5.png","modified":0,"renderable":0},{"_id":"source/images/spring-springboot-helloworld-4.png","path":"images/spring-springboot-helloworld-4.png","modified":0,"renderable":0},{"_id":"source/images/blog.jpg","path":"images/blog.jpg","modified":0,"renderable":0},{"_id":"source/images/encapsulation_2.png","path":"images/encapsulation_2.png","modified":0,"renderable":0},{"_id":"source/images/java_base.png","path":"images/java_base.png","modified":0,"renderable":0},{"_id":"source/images/park.jpg","path":"images/park.jpg","modified":0,"renderable":0},{"_id":"source/images/avatar_resume.jpg","path":"images/avatar_resume.jpg","modified":0,"renderable":0},{"_id":"source/images/h.265_1.jpg","path":"images/h.265_1.jpg","modified":0,"renderable":0},{"_id":"source/images/deploy.jpg","path":"images/deploy.jpg","modified":0,"renderable":0},{"_id":"source/images/inheritance_1.png","path":"images/inheritance_1.png","modified":0,"renderable":0},{"_id":"themes/material-flow/source/css/bundle.less","path":"css/bundle.less","modified":0,"renderable":1},{"_id":"themes/material-flow/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/material-flow/source/css/fonts.css","path":"css/fonts.css","modified":0,"renderable":1},{"_id":"themes/material-flow/source/css/waves.min.css","path":"css/waves.min.css","modified":0,"renderable":1},{"_id":"themes/material-flow/source/fonts/roboto-mono.woff2","path":"fonts/roboto-mono.woff2","modified":0,"renderable":1},{"_id":"themes/material-flow/source/fonts/titillium-web.woff2","path":"fonts/titillium-web.woff2","modified":0,"renderable":1},{"_id":"themes/material-flow/source/js/app.js","path":"js/app.js","modified":0,"renderable":1},{"_id":"themes/material-flow/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/material-flow/source/js/site-stats.min.js","path":"js/site-stats.min.js","modified":0,"renderable":1},{"_id":"themes/material-flow/source/js/site-stats.js","path":"js/site-stats.js","modified":0,"renderable":1},{"_id":"source/images/multithread_1.png","path":"images/multithread_1.png","modified":0,"renderable":0},{"_id":"themes/material-flow/source/js/bundle.js","path":"js/bundle.js","modified":0,"renderable":1},{"_id":"themes/material-flow/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/material-flow/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/material-flow/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/material-flow/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/material-flow/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/material-flow/source/js/lib/jquery.fitvids.js","path":"js/lib/jquery.fitvids.js","modified":0,"renderable":1},{"_id":"themes/material-flow/source/js/lib/scrollreveal.min.js","path":"js/lib/scrollreveal.min.js","modified":0,"renderable":1},{"_id":"themes/material-flow/source/js/lib/waves.min.js","path":"js/lib/waves.min.js","modified":0,"renderable":1},{"_id":"source/images/lodash_2.gif","path":"images/lodash_2.gif","modified":0,"renderable":0},{"_id":"themes/material-flow/source/js/lib/jquery-2.2.4.min.js","path":"js/lib/jquery-2.2.4.min.js","modified":0,"renderable":1},{"_id":"source/images/h.265_2.jpg","path":"images/h.265_2.jpg","modified":0,"renderable":0},{"_id":"themes/material-flow/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/images/lodash_1.gif","path":"images/lodash_1.gif","modified":0,"renderable":0},{"_id":"source/images/h.265_3.gif","path":"images/h.265_3.gif","modified":0,"renderable":0}],"Cache":[{"_id":"source/robots.txt","hash":"98fad47350440f5d6f73068f1d24952aad93e2ee","modified":1535623756000},{"_id":"themes/material-flow/_config.yml","hash":"3f5ba9af2438aec3058f52587263b95a3504f57d","modified":1538809902011},{"_id":"themes/material-flow/LICENSE","hash":"0e12aed461110e809af1a52728f499f852e85e0a","modified":1538809902009},{"_id":"source/favicon.ico","hash":"4ca45d13cbc8b85f5af9da56e14b7a100277e050","modified":1524900366000},{"_id":"source/_drafts/Java基础总结.md","hash":"3bcd78d62c2d6eb63950f1648f60d57ca81f5427","modified":1536285898000},{"_id":"source/_drafts/java高级研发-赵明-黄山学院-猫酷科技-4年 - 副本.md","hash":"b66904e43db7710011d2614e6c1d946241ad4c5d","modified":1536547520000},{"_id":"source/_drafts/java高级研发-赵明-黄山学院-猫酷科技-4年.md","hash":"f20bdd5c8b56ebc821d45877e9f46317a686b081","modified":1536547556000},{"_id":"source/_posts/about-me-why-should-wirte-blog.md","hash":"32b009cba480082b8c8b52c4fa17f139f7454ccd","modified":1538530547961},{"_id":"source/_drafts/java基础（三）继承.md","hash":"fa20d276305be00025a8d2cf6a01aecd9eed904b","modified":1538530194974},{"_id":"source/_posts/java-base-object-oriented.md","hash":"b44ab52cfeeafc6418a72360758d46f654dfaef6","modified":1538530567961},{"_id":"source/_posts/javascript-library-lodash.md","hash":"d5c46734525661c133f7898f699b9ce86b047f39","modified":1538530748990},{"_id":"source/_posts/microservice-consul.md","hash":"9a24074ce57d363f8086373dbabd606656bfcfba","modified":1538530638697},{"_id":"source/_posts/image-audio-what-is-H.265.md","hash":"62337154238ac59859264c55686b72de97a1e345","modified":1538530669969},{"_id":"source/_posts/spring-springboot-jpa.md","hash":"22c636b2ac2ce71fbeb4acfef60abe356f22fb65","modified":1538915733713},{"_id":"source/_posts/about-me-my-resume.md","hash":"058faff718ae4ca92cf08782ab15c3aab084459f","modified":1538813478073},{"_id":"source/_posts/spring-springboot-thymeleaf.md","hash":"616e8c1da23ba3e956cfaadd37f37b70645e4293","modified":1538895367839},{"_id":"source/_posts/spring-springboot-helloword.md","hash":"22f4eb0b622dd02497d2e728fec813f79fd1b639","modified":1538838611100},{"_id":"source/_posts/spring-springboot-web.md","hash":"1e96e412a25d02772bac4538b74bb365067642ca","modified":1538838617431},{"_id":"source/categories/index.md","hash":"f860bbc7147ee69cca334906ddc712cd638cdbf8","modified":1535614262000},{"_id":"source/error/404.md","hash":"58a6ec1402740f950271d6c3b19de94e29251beb","modified":1535623850000},{"_id":"source/images/avatar.jpg","hash":"8bb0b315ee519aea26b4c298ba083324a498ecac","modified":1535621784000},{"_id":"source/_posts/java-base-object-oriented-encapsulation.md","hash":"6d3b0f47b9bbf24f0a97eae4cb009511d5c1b5dd","modified":1538543525467},{"_id":"source/images/consul.jpg","hash":"f717d72930e1857e1a130e3c0d955b826a8c9b9c","modified":1535681290000},{"_id":"source/images/encapsulation_1.jpg","hash":"f5685049c61d85639a882f6976ea09185670cf00","modified":1537254936000},{"_id":"source/images/consul_1.png","hash":"562fbce83d1d1994656600a8a9faddfd796fbeb3","modified":1535681380000},{"_id":"source/_posts/spring-springboot-redis.md","hash":"7b08492cf55f3ccf15579f53c947a2e300f68007","modified":1538838623417},{"_id":"source/images/lodash_0.jpg","hash":"32e1116b00199db067d6ad7e88e898b0d046dc67","modified":1535682668000},{"_id":"source/images/object-oriented-programming_1.jpg","hash":"74a8417a1bac8d3a5f0e30a002b64204ed550bdf","modified":1537155906000},{"_id":"source/images/object-oriented-programming_3.jpg","hash":"5520efb9ee5f6f3fd271becda0fa89d117b52063","modified":1537234850000},{"_id":"source/images/object-oriented-programming_4.jpg","hash":"c9409f137d8eeb5b442e310652ab5edd1c3d112f","modified":1537235996000},{"_id":"source/images/object-oriented-programming_2.jpg","hash":"cac03ef8f92f8a0e786e42d7f08355ca7312417b","modified":1537234826000},{"_id":"source/images/object-oriented-programming_5.jpg","hash":"b80fe0d75d8a759676f0a07d5f1b3f2cc9598ce9","modified":1537237396000},{"_id":"source/images/object-oriented-programming_7.jpg","hash":"0cad02fc3c5bb0fc3c6b9d032e3fc62dcc5f58a6","modified":1537239190000},{"_id":"source/_drafts/spring-springcloud-helloworld.md","hash":"ab194054cf245092e04439b8aa666f5d28cbd6a1","modified":1538533537525},{"_id":"source/images/object-oriented-programming_6.jpg","hash":"c6410015731ced826f8e80e6a1c70979378192e9","modified":1537238378000},{"_id":"source/search/index.md","hash":"f7dc1fbd14a2f779a739896375b22f1c9830ec9f","modified":1535614262000},{"_id":"source/images/spring-springboot-1.jpg","hash":"fa6fd8e0fa90455f4c2ae0d59c85e8949e99ad9e","modified":1538554122599},{"_id":"source/images/spring-springboot-helloworld-3.png","hash":"d1104eda52d3f19d1d01a3dc9891b1e5ac4db4b4","modified":1538536365638},{"_id":"source/tags/index.md","hash":"d377dc7c956d5cd570e57e1d40d115e444017c62","modified":1535614262000},{"_id":"source/images/spring-springboot-helloworld-2.png","hash":"14862ea706b6a9023967677206f1d5df51172848","modified":1538532711452},{"_id":"source/images/spring-springboot-helloworld-5.png","hash":"ec38d71869f18dffd44d464e3dc5b4c2184b909a","modified":1538540917410},{"_id":"themes/material-flow/layout/index.ejs","hash":"8e8d30308793f645f3f6ea18832b5a285facf851","modified":1538809902105},{"_id":"themes/material-flow/layout/archive.ejs","hash":"fdfe2985ef9532cb7325d741860e50117187e3b7","modified":1538809902099},{"_id":"themes/material-flow/layout/page.ejs","hash":"82a4b5903a7f4dfa844039ea27558f4c653c42dd","modified":1538809902111},{"_id":"themes/material-flow/layout/post.ejs","hash":"0436c44184023b35e04ebe7564c6b6ebd56ee561","modified":1538809902115},{"_id":"source/images/spring-springboot-helloworld-4.png","hash":"2ab4642076d1f61f6be01e67ae4741a822f94052","modified":1538536820968},{"_id":"themes/material-flow/layout/category.ejs","hash":"bd9237780ad2bdf46fc5a050ddc86621391fcfeb","modified":1538809902102},{"_id":"themes/material-flow/layout/layout.ejs","hash":"1e3b4cbf2d01b8c3568b5f23839df7098319619f","modified":1538809902108},{"_id":"themes/material-flow/layout/tag.ejs","hash":"315fbd770cd17a9fbbef0a28081f511523dcdcea","modified":1538809902118},{"_id":"source/_assets/java高级研发-赵明-黄山学院-猫酷科技-4年.pdf","hash":"bb1b73c386dddcb74242d463123b62ea6586a9e2","modified":1536285898000},{"_id":"source/images/blog.jpg","hash":"e9796900028203e37fc6e8a25703b0c354c1d681","modified":1535679966000},{"_id":"source/images/encapsulation_2.png","hash":"18c95c5ac1f4b3cfab5fa7bd486dc5f9ee19680a","modified":1538529871770},{"_id":"source/images/java_base.png","hash":"463f5b47af08ec9c480c01021b65df28eba64db5","modified":1536285898000},{"_id":"source/images/park.jpg","hash":"43fd0d59b99c3aee9e6a32d22ca6ad46e489f333","modified":1536301542000},{"_id":"source/images/avatar_resume.jpg","hash":"b9b77e5470eb9b0507ac7e203bddf8891f52d65c","modified":1536285898000},{"_id":"source/images/h.265_1.jpg","hash":"e3616a9c00645bbe8d9dae13085bf505ca840cfa","modified":1535680050000},{"_id":"source/images/deploy.jpg","hash":"920c3aa133c192adc2ad87617c74b6d0d08079f5","modified":1536306340000},{"_id":"source/images/inheritance_1.png","hash":"d0e07810aa4f1d8f0978d110a4d7c9587509c628","modified":1537435534000},{"_id":"themes/material-flow/layout/_widget/facebook.ejs","hash":"fab7b8722efc0bfaa50daa9c6e5349366c032591","modified":1538809902081},{"_id":"themes/material-flow/layout/_widget/categories.ejs","hash":"8a0534186b52fe747fd1e41f01c8a9ef86b386f4","modified":1538809902078},{"_id":"themes/material-flow/layout/_widget/links.ejs","hash":"8c85bf92357d64af10970a60fa6f73128ae9c277","modified":1538809902084},{"_id":"themes/material-flow/layout/_widget/recents.ejs","hash":"1da9e336b8729467ec9e7f77d8196b67bd94b4de","modified":1538809902087},{"_id":"themes/material-flow/layout/_widget/tagcloud.ejs","hash":"ee357026d97425a68053d7711703008b8bad315e","modified":1538809902093},{"_id":"themes/material-flow/layout/_widget/statistics.ejs","hash":"25e408b501f02379585522a0a23f55ac679be1fa","modified":1538809902090},{"_id":"themes/material-flow/layout/_widget/toc.ejs","hash":"8928af3f031919922bc45da1507b28586137ac97","modified":1538809902096},{"_id":"themes/material-flow/source/css/bundle.less","hash":"db3a5de0db937aebc432b8e8ef291bc12c2ec92d","modified":1538809902126},{"_id":"themes/material-flow/source/css/font-awesome.min.css","hash":"84dceb26861254989c3af1b57179432ad0513f9a","modified":1538809902129},{"_id":"themes/material-flow/layout/_widget/awards-certs.ejs","hash":"408489ef5865ea655e0e69ec5f24abbbf0036bd1","modified":1538809902075},{"_id":"themes/material-flow/layout/_widget/about.ejs","hash":"da3d20b412f29dbfdda0892049334deb135e9a31","modified":1538809902071},{"_id":"themes/material-flow/source/css/fonts.css","hash":"68220d3d125eeef2f341f9f93192b5a5d57afdce","modified":1538809902133},{"_id":"themes/material-flow/source/css/waves.min.css","hash":"fea5aa041122cfaefffccabb843379e408a42093","modified":1538809902137},{"_id":"themes/material-flow/source/fonts/roboto-mono.woff2","hash":"31ffb7b1e86a89c86c11cd7fb2d3a783e8f1caa7","modified":1538809902177},{"_id":"themes/material-flow/source/fonts/titillium-web.woff2","hash":"0dc986022ea5c9cb42e75826dc035a6e00abc2d7","modified":1538809902181},{"_id":"themes/material-flow/source/js/.gitignore","hash":"749a49d1cf9a59ed8e17ae9ce1a81862d6542680","modified":1538809902185},{"_id":"themes/material-flow/source/js/app.js","hash":"453362fad1ff5a8c4fbc1d0eeb3582e97c030fd7","modified":1538810936737},{"_id":"themes/material-flow/source/js/main.js","hash":"3b4a0875962c41dc3d4696df74f533d19f205fde","modified":1538809902209},{"_id":"themes/material-flow/source/js/site-stats.min.js","hash":"377d8b00bb67a513cdffd9ea45bc97040fd95d87","modified":1538914578283},{"_id":"themes/material-flow/source/js/site-stats.js","hash":"b1910e401a0619f484e677d09d93c36aaa9ae3bb","modified":1538809902212},{"_id":"themes/material-flow/layout/_partial/article-header.ejs","hash":"b74b2c1b378ad5f82ba3a35a95ae2c09447a7f23","modified":1538809902019},{"_id":"themes/material-flow/layout/_partial/article.ejs","hash":"59ba150b33e68222670580aa5f064b58cfcf3e76","modified":1538809902022},{"_id":"themes/material-flow/layout/_partial/facebook-sdk.ejs","hash":"9a83d53937aeb3e93d838706b00fe5eecb712e41","modified":1538809902031},{"_id":"themes/material-flow/layout/_partial/error.ejs","hash":"744be6088ad80b571b16645c77f5bfc988b5c87a","modified":1538809902028},{"_id":"themes/material-flow/layout/_partial/categories.ejs","hash":"ed938a07aee5f6fbf8a61b50733128ba99fda244","modified":1538809902025},{"_id":"themes/material-flow/layout/_partial/google-analytics.ejs","hash":"1b858bc117d80484e9f2dcbb670c5d530bc2b535","modified":1538809902037},{"_id":"themes/material-flow/layout/_partial/head.ejs","hash":"f506b701f0a58026eaa4a694533d6c3d45cd713c","modified":1538809902040},{"_id":"themes/material-flow/layout/_partial/header.ejs","hash":"9b9809c3956b83412855183d8ac1799f3ac7cb13","modified":1538809902043},{"_id":"themes/material-flow/layout/_partial/loading.ejs","hash":"02bd745f5177e589c7febe1ee1a02031c861b199","modified":1538809902047},{"_id":"themes/material-flow/layout/_partial/pagination.ejs","hash":"a4371f8a986be35c39299f7c2d5e4485a19b9475","modified":1538809902049},{"_id":"themes/material-flow/layout/_partial/search.ejs","hash":"ea2e0c1ef0adef75bbbf56747e248319b9403462","modified":1538809902058},{"_id":"themes/material-flow/layout/_partial/side.ejs","hash":"729942e28af4e4374bbd6016c7940c69afaabbac","modified":1538809902061},{"_id":"themes/material-flow/layout/_partial/footer.ejs","hash":"ecad8671f6983f85c08008df0ba15b6d70735c25","modified":1538809902034},{"_id":"themes/material-flow/layout/_partial/post.ejs","hash":"d1a01e58dc71fbcaf4d87d5b65204b797db04b71","modified":1538809902052},{"_id":"themes/material-flow/layout/_partial/scripts.ejs","hash":"367dfa41617ca309a7ff45f6cd1d0610ced6e229","modified":1538809902056},{"_id":"themes/material-flow/layout/_partial/tags.ejs","hash":"449b1adaaa7efbf66dce70922d0902488aac77a8","modified":1538809902067},{"_id":"themes/material-flow/source/less/_article.less","hash":"389bfc8b2ab9ae2e06f335e357676c32f43cf13a","modified":1538895198264},{"_id":"themes/material-flow/layout/_partial/social-media-buttons.ejs","hash":"9c42fa6df1a0490a1eab5c54f69c523ddcb42394","modified":1538809902064},{"_id":"themes/material-flow/source/less/_archive.less","hash":"c48fbf37bde999d86309f05ad8e2e2238763ba86","modified":1538809902217},{"_id":"themes/material-flow/source/less/_defines.less","hash":"18d165949f71fdd0a8f8c7727d4f15122652b8f2","modified":1538809902227},{"_id":"themes/material-flow/source/less/_footer.less","hash":"4969a36efc184b933b6b56424934c88a06b06361","modified":1538809902231},{"_id":"themes/material-flow/source/less/_highlightjs.less","hash":"f8b66484d1aaf3309efb994a16da445f5e19785b","modified":1538809902237},{"_id":"themes/material-flow/source/less/_normalize.less","hash":"a4ca16f5fe5df33e83bb42b89154635f9fbaa53c","modified":1538809902243},{"_id":"themes/material-flow/source/less/_pagination.less","hash":"7b2e8b0e576ce1fb18da59173cd1b54636bb8a84","modified":1538809902246},{"_id":"themes/material-flow/source/less/_main.less","hash":"b13f654bbe4333b9e435ea453118d3a9df40924f","modified":1538809902240},{"_id":"themes/material-flow/source/less/_header.less","hash":"f1903360f8eb452eb6d00977e41f37f961851fad","modified":1538809902234},{"_id":"themes/material-flow/source/less/_base.less","hash":"cd3a3451003e8709cc4c8c20535f594e4504995a","modified":1538809902224},{"_id":"themes/material-flow/source/less/_side.less","hash":"196ca8a94a40b9bb6694e652bd449b7620a5d5f8","modified":1538809902255},{"_id":"themes/material-flow/source/less/_print.less","hash":"e7c44fd3638724f2c7ef9cda221e96d25754a159","modified":1538809902249},{"_id":"themes/material-flow/source/less/_tags.less","hash":"9e99eebf279999effa5bd19240dee84a913f8477","modified":1538809902262},{"_id":"themes/material-flow/source/less/_social-media.less","hash":"024b8cf14b1590bde358ea6d4c0cc96272afb740","modified":1538809902259},{"_id":"themes/material-flow/source/less/_toc.less","hash":"322137cf8824ec849515fbf22db754afc5fb11ac","modified":1538809902265},{"_id":"themes/material-flow/source/less/_search.less","hash":"abd492474f70739c274790384dacbccdf3859b9c","modified":1538809902252},{"_id":"source/images/multithread_1.png","hash":"6c18738b693c27c732a6d9e42eef38a802366b32","modified":1536558532000},{"_id":"themes/material-flow/source/js/bundle.js","hash":"bace0b7ceef0dca17cec2cd46e479125993b02d3","modified":1538914578283},{"_id":"themes/material-flow/source/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1538809902169},{"_id":"themes/material-flow/source/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1538809902174},{"_id":"themes/material-flow/source/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1538809902151},{"_id":"themes/material-flow/source/less/_typo.less","hash":"3bda056dae6ab2fe88b6aeed8c68e7a66d2f6204","modified":1538809902271},{"_id":"themes/material-flow/source/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1538809902144},{"_id":"themes/material-flow/source/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1538809902165},{"_id":"themes/material-flow/source/js/lib/jquery.fitvids.js","hash":"9035a953b0d2b06c9fea46bd138e135c67d55a82","modified":1538809902199},{"_id":"themes/material-flow/source/js/lib/scrollreveal.min.js","hash":"e7d5811bb79a7f27ebd7f4abb3213df9796a3361","modified":1538809902202},{"_id":"themes/material-flow/source/js/lib/waves.min.js","hash":"9ef2844310e5e9b46a8ffd104c1ce6fc1d577330","modified":1538809902206},{"_id":"source/images/lodash_2.gif","hash":"23c0e6d1e05b8afc4be283ea8ff96c94dbdffabc","modified":1535680938000},{"_id":"themes/material-flow/source/less/_tog.less","hash":"e3b62237766889538c3a6c63d93c888fc6f17a7f","modified":1538809902268},{"_id":"themes/material-flow/source/less/_widget.less","hash":"1e8671e90dc215a2e893a4cbb6108d0212236fcc","modified":1538809902274},{"_id":"themes/material-flow/source/js/lib/jquery-2.2.4.min.js","hash":"7a41c488d820ea08231d1d393e5f4daed4d25041","modified":1538809902194},{"_id":"source/images/h.265_2.jpg","hash":"db56630771b6b0c0bc5b6619bbae14607bce475a","modified":1535680226000},{"_id":"themes/material-flow/source/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1538809902159},{"_id":"source/images/lodash_1.gif","hash":"96cf31b09232868cbb9ab3389a9bc870741749b4","modified":1535680930000},{"_id":"source/images/h.265_3.gif","hash":"9ab026049aa40ad0f2148562563114a8e6566a17","modified":1535680272000},{"_id":"public/images/encapsulation_1.jpg","hash":"2a097360626f125ea4c6ccf346b110b3de3dd997","modified":1538914641788},{"_id":"public/images/avatar.jpg","hash":"bac3b4792b68c40be77645a10220a7ea336607d7","modified":1538914641789},{"_id":"public/images/consul_1.png","hash":"a774e9eec790dbac6fd40b0c960575a2c94297a0","modified":1538914641795},{"_id":"public/images/object-oriented-programming_1.jpg","hash":"238bd53d7f01474e7c9b412cfad058a84e394173","modified":1538914641807},{"_id":"public/images/object-oriented-programming_3.jpg","hash":"6a6e72f3d64730dcaafbf241360dc7aba4fa84af","modified":1538914641807},{"_id":"public/images/lodash_0.jpg","hash":"cca20f0a15c117d2088392db33acb574eb133ada","modified":1538914641807},{"_id":"public/images/object-oriented-programming_4.jpg","hash":"44d15fcdf71b86989f62c669107bae23302cc908","modified":1538914641807},{"_id":"public/images/object-oriented-programming_2.jpg","hash":"805e2d91f273f8999abe4a28169be5f81cc1040d","modified":1538914641807},{"_id":"public/images/object-oriented-programming_5.jpg","hash":"399c513fcba026a3f125319d78cfd9f3eeaaff02","modified":1538914641808},{"_id":"public/images/object-oriented-programming_7.jpg","hash":"dd3ac4d8189b49694ec2f8a297c4c7bbd40ad7be","modified":1538914641808},{"_id":"public/images/object-oriented-programming_6.jpg","hash":"5869bd0c8d8f1a48f0c289d4c2fb7b31f929cf39","modified":1538914641833},{"_id":"public/images/spring-springboot-helloworld-2.png","hash":"ca2be76ae4f45de247a81fa7f1f41f64d9648548","modified":1538914641833},{"_id":"public/images/spring-springboot-helloworld-3.png","hash":"5f1d31170c8df79bf83fb271a702d359e8e1a1e7","modified":1538914641833},{"_id":"public/images/spring-springboot-helloworld-5.png","hash":"389363ae91d94c22325af5a78708f75b0b270aea","modified":1538914641833},{"_id":"public/images/spring-springboot-helloworld-4.png","hash":"6597ec27a8d6516d012e891e5589758d55359cb1","modified":1538914641833},{"_id":"public/images/encapsulation_2.png","hash":"b8e6a9857807c1cca83d4a15a392eee1e222770e","modified":1538914641833},{"_id":"public/images/java_base.png","hash":"0cc6d34485664a9b210557d6b2c153f238585e79","modified":1538914641833},{"_id":"public/images/blog.jpg","hash":"39b477b7c65a6d1a91fccc5113a43f6485835ce6","modified":1538914641834},{"_id":"public/images/park.jpg","hash":"77c3ddafe918308f1db43948be005f20d3de75f2","modified":1538914641834},{"_id":"public/images/avatar_resume.jpg","hash":"badd03ab734378b5c4284da28f748546e6d35edd","modified":1538914641834},{"_id":"public/images/deploy.jpg","hash":"3866313bddacb37583892f182fbb05031ba34e16","modified":1538914641834},{"_id":"public/images/h.265_1.jpg","hash":"a56a6a3984adbd0f2a4d3aefedad23b824a7cbd6","modified":1538914641835},{"_id":"public/images/inheritance_1.png","hash":"11f74a09f2785d8f2e176c231f0b6801ee1427c8","modified":1538914641835},{"_id":"public/images/multithread_1.png","hash":"74ea6764314516228eba0078b1ef5c4e855d95fe","modified":1538914641977},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"1c3ba3b813e1080e9721846f23a21c09e5c3fd27","modified":1538914641994},{"_id":"public/images/lodash_2.gif","hash":"e233894fe253ebd48bb8a485cee0c7bccf71abfe","modified":1538914642642},{"_id":"public/images/h.265_2.jpg","hash":"ed2c1e8f0dcadd0319250d8c9d408a6689641d25","modified":1538914642878},{"_id":"public/CNAME","hash":"5352cf70720d1ed3b02c7f805f6757783c414b07","modified":1538914642879},{"_id":"public/atom.xml","hash":"aad007849f442b944eb8dae08a532e86875e82ed","modified":1539526856070},{"_id":"public/sitemap.xml","hash":"e64efac912fe6d3d72a509a6ae7d546556d0ece6","modified":1539526856051},{"_id":"public/images/lodash_1.gif","hash":"d07b875dca2642d866d95c097a8e88bf619064cf","modified":1538914642880},{"_id":"public/error/404.html","hash":"60f6af5c11c089f91acc0038381a31b477b18890","modified":1557157971910},{"_id":"public/search/index.html","hash":"d442323239e17a3f5c5035a89488c26c16f36d09","modified":1557157959690},{"_id":"public/archives/index.html","hash":"820f35391eda386a7f5ec5b83f368528eb9fd144","modified":1557157971911},{"_id":"public/archives/2017/index.html","hash":"8aacc80e642832a9875612c0b10b2d3e7828c082","modified":1557157971912},{"_id":"public/archives/page/2/index.html","hash":"1ee78852f702bbfad9f59d01117bdb525e2a4da7","modified":1557157971911},{"_id":"public/archives/2017/06/index.html","hash":"a69f13c276a6ab192aac24927f650d1770a3bb8d","modified":1557157971912},{"_id":"public/archives/2018/index.html","hash":"df6523a84d0e2ff46cf469daea5bea374db5288e","modified":1557157971912},{"_id":"public/archives/2018/05/index.html","hash":"7fa6f2b1f8acd7acc79d78c4604cdddde8e40e38","modified":1557157971913},{"_id":"public/archives/2018/03/index.html","hash":"b0b30315653d35fbb5fd255c53cfcaed88a2af52","modified":1557157971913},{"_id":"public/archives/2018/06/index.html","hash":"70ba5f347ef629f969173e4c672a2593bb807526","modified":1557157971913},{"_id":"public/archives/2018/07/index.html","hash":"f18e3af684dce4a610fb66f86ee83a486ef73801","modified":1557157971914},{"_id":"public/archives/2018/09/index.html","hash":"d39b3a25586bf069b97fbac26ce681fdb5657da6","modified":1557157971917},{"_id":"public/categories/index.html","hash":"123f51d64b91def9f310cc5f3ba7b89a0ca114bd","modified":1557157971910},{"_id":"public/categories/java基础/index.html","hash":"32b90e82105e09dec3a1ffdbdc9c4aa7d558ac18","modified":1557157971917},{"_id":"public/categories/javascript/index.html","hash":"03ffec2b2023490a6c691f701796739b70610743","modified":1557157971917},{"_id":"public/categories/自我认知/index.html","hash":"f7427a193e30d2c66523bf6e69e9fd90155f57f4","modified":1557157971918},{"_id":"public/categories/图像影音/index.html","hash":"419e89c3aa019d0e1a9b79c7484bd154c2b9187a","modified":1557157971918},{"_id":"public/categories/服务治理/index.html","hash":"5b02e1b2a775ab0e405b87af21fac1d358148f95","modified":1557157971918},{"_id":"public/categories/springboot/index.html","hash":"aac8f1dd5cd201f943ecd668f678f5cfda1967d0","modified":1557157971918},{"_id":"public/page/2/index.html","hash":"da196cabc058c2e7ba71f0ff494e1198b3fab8c2","modified":1557157971931},{"_id":"public/tags/index.html","hash":"5170c67a81d856bf3839454172feb1239d5bdaa7","modified":1557157971911},{"_id":"public/tags/java基础/index.html","hash":"075cc7bd29fcd7b53be3af41af9b49b65f737b6c","modified":1557157971919},{"_id":"public/tags/springboot/index.html","hash":"d1129557ee058a099e8522171b81f13d3cb7cdad","modified":1557157971919},{"_id":"public/tags/javascript/index.html","hash":"baf3d07911da07f55b38cd48e3db27a91614590d","modified":1557157971922},{"_id":"public/tags/thymeleaf/index.html","hash":"90cf25e074fd64e80f191f591d0c81e64853e6f5","modified":1557157971920},{"_id":"public/tags/helloworld/index.html","hash":"15639eba58c2622a4628524dddc78fe60feaa59d","modified":1557157971921},{"_id":"public/tags/随手写写/index.html","hash":"2d924fd5df064bf47a9aef45d3cfceb7a9ee2ea6","modified":1557157971920},{"_id":"public/tags/web综合开发/index.html","hash":"1863e2c55cc028028c7fef077e798682509dab55","modified":1557157971921},{"_id":"public/tags/redis/index.html","hash":"565b69202fbfa2b1e3131edb517eb0461d3ad5c0","modified":1557157971921},{"_id":"public/tags/服务治理/index.html","hash":"5ea2fc04d67ade2e2e54b4c3859459b72f2d95fb","modified":1557157971922},{"_id":"public/article/spring-springboot-thymeleaf.html","hash":"38e9eb81fcf7727b762acd8387e6dadd627f638c","modified":1557157971923},{"_id":"public/article/spring-springboot-redis.html","hash":"17d0e6b9d18410d2b5b78669224e1b6ab497105c","modified":1557157971926},{"_id":"public/article/spring-springboot-web.html","hash":"68188a16706ba468e8f28cb193647f9173571dbb","modified":1557157971923},{"_id":"public/article/spring-springboot-helloword.html","hash":"70948678bad93913ac985f99fcb66a071244023a","modified":1557157971927},{"_id":"public/article/image-audio-what-is-H.265.html","hash":"7f3a1b80e286498cab48963645fd4409240ff3b1","modified":1557157971928},{"_id":"public/article/java-base-object-oriented-encapsulation.html","hash":"518fc9e21ff2dca5536e7916501af22a757933f0","modified":1557157971929},{"_id":"public/article/java-base-object-oriented.html","hash":"75fcca9b505cf83a628772f7de56a50c53b4ba71","modified":1557157971929},{"_id":"public/article/microservice-consul.html","hash":"3d3a76af4712e801491e206ecbda86de6d03b88f","modified":1557157971930},{"_id":"public/article/javascript-library-lodash.html","hash":"93d1b07106ed1ca184ea4231723e47b4898db93f","modified":1557157971930},{"_id":"public/article/about-me-my-resume.html","hash":"78e745a0015f5106ee9842075fcb20b41bf44012","modified":1557157971930},{"_id":"public/article/about-me-why-should-wirte-blog.html","hash":"c606b4d3918bafca1c15897147e166edbee2b3b1","modified":1557157971931},{"_id":"public/index.html","hash":"eba144e4ffef8c28838828b255b3c9ac72a9000f","modified":1557157971931},{"_id":"public/archives/2018/page/2/index.html","hash":"6b95c8b1af3d4130dc86a721e62f03bb0f5c9d7f","modified":1557157971913},{"_id":"public/tags/jpa/index.html","hash":"5f99db34e8b569c10b60018f0f03560f173e8edd","modified":1557157971920},{"_id":"public/article/spring-springboot-jpa.html","hash":"a65772a86cb2db57925003ea5be062cf2584bc6f","modified":1557157971922},{"_id":"public/robots.txt","hash":"98fad47350440f5d6f73068f1d24952aad93e2ee","modified":1538914660178},{"_id":"public/images/consul.jpg","hash":"f717d72930e1857e1a130e3c0d955b826a8c9b9c","modified":1538914660178},{"_id":"public/images/spring-springboot-1.jpg","hash":"fa6fd8e0fa90455f4c2ae0d59c85e8949e99ad9e","modified":1538914660179},{"_id":"public/fonts/titillium-web.woff2","hash":"0dc986022ea5c9cb42e75826dc035a6e00abc2d7","modified":1538914660179},{"_id":"public/fonts/roboto-mono.woff2","hash":"31ffb7b1e86a89c86c11cd7fb2d3a783e8f1caa7","modified":1538914660179},{"_id":"public/favicon.ico","hash":"4ca45d13cbc8b85f5af9da56e14b7a100277e050","modified":1538914660246},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1538914665723},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1538914665723},{"_id":"public/css/waves.min.css","hash":"b26d49b199692a2207c36c2e536f9a4feb74a7cc","modified":1538914665852},{"_id":"public/js/site-stats.min.js","hash":"377d8b00bb67a513cdffd9ea45bc97040fd95d87","modified":1538914665852},{"_id":"public/js/main.js","hash":"7f3d498906b8dc7151350ec301e34a0907205660","modified":1538914665854},{"_id":"public/js/site-stats.js","hash":"f4ea35c56e861456a261493ac608fb24fefb9089","modified":1538914665854},{"_id":"public/js/app.js","hash":"a5ae31181b719dd363bf2ff49e617d8058c23b07","modified":1538914665854},{"_id":"public/js/lib/jquery.fitvids.js","hash":"2f73282313194a5ea50186b3d94842b47f941274","modified":1538914665854},{"_id":"public/js/lib/scrollreveal.min.js","hash":"e7d5811bb79a7f27ebd7f4abb3213df9796a3361","modified":1538914665854},{"_id":"public/js/lib/waves.min.js","hash":"29cf8221776de0f3abe6f029bd33cbe362adc481","modified":1538914665855},{"_id":"public/css/font-awesome.min.css","hash":"93897ebc560b38a1d2bff43c22dd6a3b7ee90c0c","modified":1538914665855},{"_id":"public/js/bundle.js","hash":"cd39c3ed2b55259ef913f8ac31111986157de267","modified":1538914665855},{"_id":"public/js/lib/jquery-2.2.4.min.js","hash":"a3d8479f4d4e39b131bc9a53bbf53d1fbaa23732","modified":1538914665855},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1538914665855},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1538914665856},{"_id":"public/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1538914665856},{"_id":"public/css/fonts.css","hash":"ec8902217ebd33329b3009c0febe910563f2ee80","modified":1538914665864},{"_id":"public/css/bundle.css","hash":"769ff2ceba14221edeb6903f3cb742e93dabc450","modified":1538914666880},{"_id":"public/images/h.265_3.gif","hash":"9ab026049aa40ad0f2148562563114a8e6566a17","modified":1538914666917},{"_id":"source/_posts/spring-springboot-mybatis.md","hash":"e678d839423eff37ed111fa892237adbc5c0b059","modified":1539526711145},{"_id":"public/tags/mybatis/index.html","hash":"5ec9122851ce758fd624947ca607fcf2293d63b9","modified":1557157971921},{"_id":"public/article/spring-springboot-mybatis.html","hash":"9736e5c4236ec4aa747e753d3ef2f522db3695ee","modified":1557157971922}],"Category":[{"name":"Java基础","_id":"cjmyu0s9l0004x8uop04m2bhu"},{"name":"自我认知","_id":"cjmyu0sag000bx8uodnlspvhx"},{"name":"JavaScript","_id":"cjmyu0sb1000lx8uocet2zhbc"},{"name":"服务治理","_id":"cjmyu0sbl000ux8uon72599ga"},{"name":"图像影音","_id":"cjmyu0sc00011x8uoi1i5fetl"},{"name":"SpringBoot","_id":"cjmyu0scb0018x8uo0ld4qyxw"}],"Data":[],"Page":[{"title":"Categories","date":"2017-04-07T13:45:36.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: Categories\ndate: 2017-04-07 21:45:36\ntype: categories\ncomments: false\n---\n","updated":"2018-08-30T07:31:02.000Z","path":"categories/index.html","layout":"page","_id":"cjmyu0s930001x8uotrmgrpp7","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"404 Not Found","date":"2017-04-07T13:45:36.000Z","type":"error","comments":0,"_content":"\nThis page does not exist, [click here](/) to go back to home page.  \n\n页面不存在，[点此](/)回到首页。  ","source":"error/404.md","raw":"---\ntitle: 404 Not Found\ndate: 2017-04-07 21:45:36\ntype: error\ncomments: false\n---\n\nThis page does not exist, [click here](/) to go back to home page.  \n\n页面不存在，[点此](/)回到首页。  ","updated":"2018-08-30T10:10:50.000Z","path":"error/404.html","layout":"page","_id":"cjmyu0s9h0003x8uo8mcy0oh0","content":"<p>This page does not exist, <a href=\"/\">click here</a> to go back to home page.</p><p>页面不存在，<a href=\"/\">点此</a>回到首页。</p>","site":{"data":{}},"excerpt":"","more":"<p>This page does not exist, <a href=\"/\">click here</a> to go back to home page.</p><p>页面不存在，<a href=\"/\">点此</a>回到首页。</p>"},{"title":"Search","date":"2018-01-10T04:00:00.000Z","type":"search","comments":0,"toc":false,"_content":"\n{% raw %}\n<script>\n  (function() {\n    var cx = \"005434529039397469361:p-qqqb09moi\";\n    var gcse = document.createElement(\"script\");\n    gcse.type = \"text/javascript\";\n    gcse.async = true;\n    gcse.src = \"https://cse.google.com/cse.js?cx=\" + cx;\n    var s = document.getElementsByTagName(\"script\")[0];\n    s.parentNode.insertBefore(gcse, s);\n  })();\n</script>\n<gcse:search queryParameterName=\"q\" autoSearchOnLoad=\"true\" noResultsString=\"no results\"></gcse:search>\n{% endraw %}","source":"search/index.md","raw":"---\ntitle: Search\ndate: 2018-01-10 12:00:00\ntype: search\ncomments: false\ntoc: false\n---\n\n{% raw %}\n<script>\n  (function() {\n    var cx = \"005434529039397469361:p-qqqb09moi\";\n    var gcse = document.createElement(\"script\");\n    gcse.type = \"text/javascript\";\n    gcse.async = true;\n    gcse.src = \"https://cse.google.com/cse.js?cx=\" + cx;\n    var s = document.getElementsByTagName(\"script\")[0];\n    s.parentNode.insertBefore(gcse, s);\n  })();\n</script>\n<gcse:search queryParameterName=\"q\" autoSearchOnLoad=\"true\" noResultsString=\"no results\"></gcse:search>\n{% endraw %}","updated":"2018-08-30T07:31:02.000Z","path":"search/index.html","layout":"page","_id":"cjmyu0s9y0007x8uo7l518lpm","content":"<script>!function(){var e=document.createElement(\"script\");e.type=\"text/javascript\",e.async=!0,e.src=\"https://cse.google.com/cse.js?cx=005434529039397469361:p-qqqb09moi\";var t=document.getElementsByTagName(\"script\")[0];t.parentNode.insertBefore(e,t)}()</script><gcse:search queryparametername=\"q\" autosearchonload=\"true\" noresultsstring=\"no results\"></gcse:search>","site":{"data":{}},"excerpt":"","more":"<script>!function(){var e=document.createElement(\"script\");e.type=\"text/javascript\",e.async=!0,e.src=\"https://cse.google.com/cse.js?cx=005434529039397469361:p-qqqb09moi\";var t=document.getElementsByTagName(\"script\")[0];t.parentNode.insertBefore(e,t)}()</script><gcse:search queryparametername=\"q\" autosearchonload=\"true\" noresultsstring=\"no results\"></gcse:search>"},{"title":"Tags","date":"2017-04-07T13:45:36.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\ndate: 2017-04-07 21:45:36\ntype: tags\ncomments: false\n---\n","updated":"2018-08-30T07:31:02.000Z","path":"tags/index.html","layout":"page","_id":"cjmyu0sa70009x8uot3jxkjju","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Java基础总结","author":"SnailDev","date":"2018-08-21T12:26:00.000Z","featured_image":"/images/java_base.png","_content":"[java](/images/java_base.png)\n\n## 1. 从面向对象开始谈起\n\n面向对象有三大特性，分别是封装、继承和多态。\n* 封装\n  封装是将对象的数据和实现细节隐藏起来，然后通过提供公共方法向外暴露功能。\n  1. 类就是对数据和功能的封装，数据对应成员变量，功能对应类方法（即静态方法）和对象方法；\n  2. 封装目的就是将数据隐藏起来，不被外界随意修改，降低了数据被误用的可能性，提高了代码的灵活性；\n\n* 继承\n  继承是面向对象实现复用的重要手段，子类继承父类，便可直接或间接的获取父类的成员。\n  1. 继承是一种强耦合关系，父类变动，子类便跟着变动；\n  2. 继承破坏了封装，父类的实现细节对子类都是透明的；\n\n* 多态\n  多态\n","source":"_drafts/Java基础总结.md","raw":"---\ntitle: Java基础总结\nauthor: SnailDev\ntags:\n  - Java基础\ncategories:\n  - Java基础\ndate: 2018-08-21 20:26:00\nfeatured_image: /images/java_base.png\n---\n[java](/images/java_base.png)\n\n## 1. 从面向对象开始谈起\n\n面向对象有三大特性，分别是封装、继承和多态。\n* 封装\n  封装是将对象的数据和实现细节隐藏起来，然后通过提供公共方法向外暴露功能。\n  1. 类就是对数据和功能的封装，数据对应成员变量，功能对应类方法（即静态方法）和对象方法；\n  2. 封装目的就是将数据隐藏起来，不被外界随意修改，降低了数据被误用的可能性，提高了代码的灵活性；\n\n* 继承\n  继承是面向对象实现复用的重要手段，子类继承父类，便可直接或间接的获取父类的成员。\n  1. 继承是一种强耦合关系，父类变动，子类便跟着变动；\n  2. 继承破坏了封装，父类的实现细节对子类都是透明的；\n\n* 多态\n  多态\n","slug":"Java基础总结","published":0,"updated":"2018-09-07T02:04:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmyu0s8p0000x8uoitgko449","content":"<p><a href=\"/images/java_base.png\">java</a></p><h2 id=\"1-从面向对象开始谈起\"><a href=\"#1-从面向对象开始谈起\" class=\"headerlink\" title=\"1. 从面向对象开始谈起\"></a>1. 从面向对象开始谈起</h2><p>面向对象有三大特性，分别是封装、继承和多态。</p><ul><li><p>封装 封装是将对象的数据和实现细节隐藏起来，然后通过提供公共方法向外暴露功能。</p><ol><li>类就是对数据和功能的封装，数据对应成员变量，功能对应类方法（即静态方法）和对象方法；</li><li>封装目的就是将数据隐藏起来，不被外界随意修改，降低了数据被误用的可能性，提高了代码的灵活性；</li></ol></li><li><p>继承 继承是面向对象实现复用的重要手段，子类继承父类，便可直接或间接的获取父类的成员。</p><ol><li>继承是一种强耦合关系，父类变动，子类便跟着变动；</li><li>继承破坏了封装，父类的实现细节对子类都是透明的；</li></ol></li><li><p>多态 多态</p></li></ul>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"/images/java_base.png\">java</a></p><h2 id=\"1-从面向对象开始谈起\"><a href=\"#1-从面向对象开始谈起\" class=\"headerlink\" title=\"1. 从面向对象开始谈起\"></a>1. 从面向对象开始谈起</h2><p>面向对象有三大特性，分别是封装、继承和多态。</p><ul><li><p>封装 封装是将对象的数据和实现细节隐藏起来，然后通过提供公共方法向外暴露功能。</p><ol><li>类就是对数据和功能的封装，数据对应成员变量，功能对应类方法（即静态方法）和对象方法；</li><li>封装目的就是将数据隐藏起来，不被外界随意修改，降低了数据被误用的可能性，提高了代码的灵活性；</li></ol></li><li><p>继承 继承是面向对象实现复用的重要手段，子类继承父类，便可直接或间接的获取父类的成员。</p><ol><li>继承是一种强耦合关系，父类变动，子类便跟着变动；</li><li>继承破坏了封装，父类的实现细节对子类都是透明的；</li></ol></li><li><p>多态 多态</p></li></ul>"},{"_content":"# 联系方式\n\n* 手机：15821753692（微信同号）\n* Email：\n    * snailtem@gmail.com （主）\n    * snaildev@outlook.com （备）\n* QQ：1397407698\n\n\n# 个人信息\n\n* 赵明/男/1990\n* 本科/黄山学院 计算机科学与技术（2010/9--2014/7）\n* 工作年限：**4年**\n* 技术博客：\n    *   https://snaildev.github.io\n    *   http://www.cnblogs.com/snaildev\n* Github：https://github.com/snaildev\n* 期望职位：Java高级程序员，应用架构师\n* 期望薪资：税前月薪28k+\n* 期望城市：上海\n\n# 工作经历\n\n## 猫酷科技 （ 2015年5月 ~ 至今 ）\n\n### 猫酷车场\n\n实现功能：实现用户线上寻车，停车缴费等功能。\n\n演进过程：\n1. 接手：主导了猫酷车场2.0项目的研发，在1.0的基础上，对车场业务进行梳理，对上层业务代码进行封装，对底层接口对接进行开放，实现新车场接入不动上层业务代码。\n2. 改进：对接口对接层进行改进，实现配置化。第三方车场接口除了是http协议之外，也有不少是webservice/wcf这种soap协议的， 解决方式是通过抓包形式，实现报文配置的统一化。\n3. 持续改进：各个第三方接口的签名方式尽不相同，对接难免需要写代码实现，对于这种，解决方案是按照车场接口的厂商进行分类封装，重复对接同种厂商接口，仅需配置即可。\n4. 无感停车：接入支付宝车场，并开放车场相应功能（进出场通知，离场代扣）给到线下车场，使得车辆离场时不仅可以在使用会员权益、优惠券、积分后，还可以继续使用支付宝免密支付车费，无感出场。\n\n实现效果：系统更加稳定，用户体验更佳，对接成本从2人天降到0.5人天，目前车场平均月流水（多个商场合计）为800W左右\n\n欢迎查阅：微信关注上海静安大悦城、近铁城市广场、上海环球港等可查看停车场功能。\n\n猫酷车场简介：\n![park](../images/park.jpg)\n\n### 发布系统\n\n实现功能：实现代码发布、备份管理以及服务器管理等功能。\n\n演进过程：\n1. 接手分析：对发布各个流程进行分析，代码获取、代码编译、代码发布、生产环境备份、代码同步到目的服务器、 发布异常可回滚修复以及发布完成后进行接口测试等。\n    * 代码获取（源代码管理器Git）\n    * 代码编译及发布（Java-->Maven, .Net-->MSBuild, .NetCore-->dotnet，静态文件发布跳过编译过程）\n    * 服务器数据同步（rsync）\n    * 进行接口测试（Jmeter脚本）\n    * 发布结果推送给项目组成员（邮件通知）\n2. 实践进行：服务器应该分环境，测试、仿真和正式。\n    * 测试（研发发布，测试验证）\n    * 仿真（研发组长发布，研发和测试验证）\n    * 正式（就是生产环境，研发组长发布，仿真通过验证后，将仿真环境作为一个复制集同步到正式环境）\n\n实现效果：规范了发布流程，解放了运维，使得公司约210个项目可使用发布系统稳定发布。\n\n发布系统流程图：\n![deploy](../images/deploy.jpg)\n\n### 其他项目\n* 长益预付卡系统对接\n* 微信小程序发布系统\n* Mongo2Es实时同步工具（https://github.com/SnailDev/SnailDev.Mongo2Es）\n* MongoDB Web端查询系统（https://github.com/SnailDev/SnailDev.MongoStudio）\n* 票据打印机ESC/POS指令解析（https://github.com/SnailDev/SnailDev.EscPosParser）\n* NestRepository查询Es SDK封装（https://github.com/SnailDev/SnailDev.Mongo2Es/blob/master/README_NESTRepo.md）\n\n\n## 博彦科技 （ 2013年10月 ~ 2015年5月 含8个月实习）\n\n### 美国房贷系统\n\n工作内容： 参与美国房贷系统Elliemae中WebCenter功能模块的开发和维护；即组长分配JIRA,然后根据JIRA上测试或者客户反馈的bug，进行复现，阅读源代码进行审查，修复bug，提交给组长Code Review。\n\n开发模式： 敏捷开发，晚日报，晨站会\n\n\n### 内部日报系统\n\n工作内容：基于Asp.net MVC + Entity Framework + Bootstrap内部日报和请假系统的研发。 \n\n工作说明：由于项目组采用的是敏捷开发模式，每日站会和日报都是必须的，为了满足日报和请假的需求，定制了一套适合项目组内部的日报系统和请假系统。并结合了AlertSystem实现了成员日报邮件提醒。\n\n### 其他项目\n* 培训考试系统\n* 内部小工具（HostsHelper、FileFilter、IIsHelper等） \n* AlertSystem（基于WindowsService后台定时Email提醒服务）\n\n# 技能清单\n\n以下均为我熟练使用的技能\n\n* Web开发：Java/C#.Net/Node\n* Web框架：Spring/Asp.Net MVC/Express\n* 前端框架：Bootstrap/Jquery/EasyUI/LigerUI/Vue\n* 数据库相关：MySQL/MongoDB/Redis/ElasticSearch\n* 版本管理：Svn/Git\n* 单元测试：JUnit\n* 云和开放平台：SAE/阿里云/腾讯云/微信应用开发\n\n- - -\n# 致谢\n\n感谢您花时间阅读我的简历，期待能有机会和您共事。","source":"_drafts/java高级研发-赵明-黄山学院-猫酷科技-4年.md","raw":"# 联系方式\n\n* 手机：15821753692（微信同号）\n* Email：\n    * snailtem@gmail.com （主）\n    * snaildev@outlook.com （备）\n* QQ：1397407698\n\n\n# 个人信息\n\n* 赵明/男/1990\n* 本科/黄山学院 计算机科学与技术（2010/9--2014/7）\n* 工作年限：**4年**\n* 技术博客：\n    *   https://snaildev.github.io\n    *   http://www.cnblogs.com/snaildev\n* Github：https://github.com/snaildev\n* 期望职位：Java高级程序员，应用架构师\n* 期望薪资：税前月薪28k+\n* 期望城市：上海\n\n# 工作经历\n\n## 猫酷科技 （ 2015年5月 ~ 至今 ）\n\n### 猫酷车场\n\n实现功能：实现用户线上寻车，停车缴费等功能。\n\n演进过程：\n1. 接手：主导了猫酷车场2.0项目的研发，在1.0的基础上，对车场业务进行梳理，对上层业务代码进行封装，对底层接口对接进行开放，实现新车场接入不动上层业务代码。\n2. 改进：对接口对接层进行改进，实现配置化。第三方车场接口除了是http协议之外，也有不少是webservice/wcf这种soap协议的， 解决方式是通过抓包形式，实现报文配置的统一化。\n3. 持续改进：各个第三方接口的签名方式尽不相同，对接难免需要写代码实现，对于这种，解决方案是按照车场接口的厂商进行分类封装，重复对接同种厂商接口，仅需配置即可。\n4. 无感停车：接入支付宝车场，并开放车场相应功能（进出场通知，离场代扣）给到线下车场，使得车辆离场时不仅可以在使用会员权益、优惠券、积分后，还可以继续使用支付宝免密支付车费，无感出场。\n\n实现效果：系统更加稳定，用户体验更佳，对接成本从2人天降到0.5人天，目前车场平均月流水（多个商场合计）为800W左右\n\n欢迎查阅：微信关注上海静安大悦城、近铁城市广场、上海环球港等可查看停车场功能。\n\n猫酷车场简介：\n![park](../images/park.jpg)\n\n### 发布系统\n\n实现功能：实现代码发布、备份管理以及服务器管理等功能。\n\n演进过程：\n1. 接手分析：对发布各个流程进行分析，代码获取、代码编译、代码发布、生产环境备份、代码同步到目的服务器、 发布异常可回滚修复以及发布完成后进行接口测试等。\n    * 代码获取（源代码管理器Git）\n    * 代码编译及发布（Java-->Maven, .Net-->MSBuild, .NetCore-->dotnet，静态文件发布跳过编译过程）\n    * 服务器数据同步（rsync）\n    * 进行接口测试（Jmeter脚本）\n    * 发布结果推送给项目组成员（邮件通知）\n2. 实践进行：服务器应该分环境，测试、仿真和正式。\n    * 测试（研发发布，测试验证）\n    * 仿真（研发组长发布，研发和测试验证）\n    * 正式（就是生产环境，研发组长发布，仿真通过验证后，将仿真环境作为一个复制集同步到正式环境）\n\n实现效果：规范了发布流程，解放了运维，使得公司约210个项目可使用发布系统稳定发布。\n\n发布系统流程图：\n![deploy](../images/deploy.jpg)\n\n### 其他项目\n* 长益预付卡系统对接\n* 微信小程序发布系统\n* Mongo2Es实时同步工具（https://github.com/SnailDev/SnailDev.Mongo2Es）\n* MongoDB Web端查询系统（https://github.com/SnailDev/SnailDev.MongoStudio）\n* 票据打印机ESC/POS指令解析（https://github.com/SnailDev/SnailDev.EscPosParser）\n* NestRepository查询Es SDK封装（https://github.com/SnailDev/SnailDev.Mongo2Es/blob/master/README_NESTRepo.md）\n\n\n## 博彦科技 （ 2013年10月 ~ 2015年5月 含8个月实习）\n\n### 美国房贷系统\n\n工作内容： 参与美国房贷系统Elliemae中WebCenter功能模块的开发和维护；即组长分配JIRA,然后根据JIRA上测试或者客户反馈的bug，进行复现，阅读源代码进行审查，修复bug，提交给组长Code Review。\n\n开发模式： 敏捷开发，晚日报，晨站会\n\n\n### 内部日报系统\n\n工作内容：基于Asp.net MVC + Entity Framework + Bootstrap内部日报和请假系统的研发。 \n\n工作说明：由于项目组采用的是敏捷开发模式，每日站会和日报都是必须的，为了满足日报和请假的需求，定制了一套适合项目组内部的日报系统和请假系统。并结合了AlertSystem实现了成员日报邮件提醒。\n\n### 其他项目\n* 培训考试系统\n* 内部小工具（HostsHelper、FileFilter、IIsHelper等） \n* AlertSystem（基于WindowsService后台定时Email提醒服务）\n\n# 技能清单\n\n以下均为我熟练使用的技能\n\n* Web开发：Java/C#.Net/Node\n* Web框架：Spring/Asp.Net MVC/Express\n* 前端框架：Bootstrap/Jquery/EasyUI/LigerUI/Vue\n* 数据库相关：MySQL/MongoDB/Redis/ElasticSearch\n* 版本管理：Svn/Git\n* 单元测试：JUnit\n* 云和开放平台：SAE/阿里云/腾讯云/微信应用开发\n\n- - -\n# 致谢\n\n感谢您花时间阅读我的简历，期待能有机会和您共事。","slug":"java高级研发-赵明-黄山学院-猫酷科技-4年","published":0,"date":"2018-10-03T01:13:40.054Z","updated":"2018-09-10T02:45:56.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmyu0s9a0002x8uoekh7645c","content":"<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul><li>手机：15821753692（微信同号）</li><li>Email：<ul><li><a href=\"mailto:snailtem@gmail.com\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">snailtem@gmail.com</a> （主）</li><li><a href=\"mailto:snaildev@outlook.com\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">snaildev@outlook.com</a> （备）</li></ul></li><li>QQ：1397407698</li></ul><h1 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h1><ul><li>赵明/男/1990</li><li>本科/黄山学院 计算机科学与技术（2010/9–2014/7）</li><li>工作年限：<strong>4年</strong></li><li>技术博客：<ul><li><a href=\"https://snaildev.github.io\">https://snaildev.github.io</a></li><li><a href=\"http://www.cnblogs.com/snaildev\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/snaildev</a></li></ul></li><li>Github：<a href=\"https://github.com/snaildev\" target=\"_blank\" rel=\"noopener\">https://github.com/snaildev</a></li><li>期望职位：Java高级程序员，应用架构师</li><li>期望薪资：税前月薪28k+</li><li>期望城市：上海</li></ul><h1 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h1><h2 id=\"猫酷科技-（-2015年5月-至今-）\"><a href=\"#猫酷科技-（-2015年5月-至今-）\" class=\"headerlink\" title=\"猫酷科技 （ 2015年5月 ~ 至今 ）\"></a>猫酷科技 （ 2015年5月 ~ 至今 ）</h2><h3 id=\"猫酷车场\"><a href=\"#猫酷车场\" class=\"headerlink\" title=\"猫酷车场\"></a>猫酷车场</h3><p>实现功能：实现用户线上寻车，停车缴费等功能。</p><p>演进过程：</p><ol><li>接手：主导了猫酷车场2.0项目的研发，在1.0的基础上，对车场业务进行梳理，对上层业务代码进行封装，对底层接口对接进行开放，实现新车场接入不动上层业务代码。</li><li>改进：对接口对接层进行改进，实现配置化。第三方车场接口除了是http协议之外，也有不少是webservice/wcf这种soap协议的， 解决方式是通过抓包形式，实现报文配置的统一化。</li><li>持续改进：各个第三方接口的签名方式尽不相同，对接难免需要写代码实现，对于这种，解决方案是按照车场接口的厂商进行分类封装，重复对接同种厂商接口，仅需配置即可。</li><li>无感停车：接入支付宝车场，并开放车场相应功能（进出场通知，离场代扣）给到线下车场，使得车辆离场时不仅可以在使用会员权益、优惠券、积分后，还可以继续使用支付宝免密支付车费，无感出场。</li></ol><p>实现效果：系统更加稳定，用户体验更佳，对接成本从2人天降到0.5人天，目前车场平均月流水（多个商场合计）为800W左右</p><p>欢迎查阅：微信关注上海静安大悦城、近铁城市广场、上海环球港等可查看停车场功能。</p><p>猫酷车场简介： <img src=\"../images/park.jpg\" alt=\"park\"></p><h3 id=\"发布系统\"><a href=\"#发布系统\" class=\"headerlink\" title=\"发布系统\"></a>发布系统</h3><p>实现功能：实现代码发布、备份管理以及服务器管理等功能。</p><p>演进过程：</p><ol><li>接手分析：对发布各个流程进行分析，代码获取、代码编译、代码发布、生产环境备份、代码同步到目的服务器、 发布异常可回滚修复以及发布完成后进行接口测试等。<ul><li>代码获取（源代码管理器Git）</li><li>代码编译及发布（Java–&gt;Maven, .Net–&gt;MSBuild, .NetCore–&gt;dotnet，静态文件发布跳过编译过程）</li><li>服务器数据同步（rsync）</li><li>进行接口测试（Jmeter脚本）</li><li>发布结果推送给项目组成员（邮件通知）</li></ul></li><li>实践进行：服务器应该分环境，测试、仿真和正式。<ul><li>测试（研发发布，测试验证）</li><li>仿真（研发组长发布，研发和测试验证）</li><li>正式（就是生产环境，研发组长发布，仿真通过验证后，将仿真环境作为一个复制集同步到正式环境）</li></ul></li></ol><p>实现效果：规范了发布流程，解放了运维，使得公司约210个项目可使用发布系统稳定发布。</p><p>发布系统流程图： <img src=\"../images/deploy.jpg\" alt=\"deploy\"></p><h3 id=\"其他项目\"><a href=\"#其他项目\" class=\"headerlink\" title=\"其他项目\"></a>其他项目</h3><ul><li>长益预付卡系统对接</li><li>微信小程序发布系统</li><li>Mongo2Es实时同步工具（<a href=\"https://github.com/SnailDev/SnailDev.Mongo2Es）\" target=\"_blank\" rel=\"noopener\">https://github.com/SnailDev/SnailDev.Mongo2Es）</a></li><li>MongoDB Web端查询系统（<a href=\"https://github.com/SnailDev/SnailDev.MongoStudio）\" target=\"_blank\" rel=\"noopener\">https://github.com/SnailDev/SnailDev.MongoStudio）</a></li><li>票据打印机ESC/POS指令解析（<a href=\"https://github.com/SnailDev/SnailDev.EscPosParser）\" target=\"_blank\" rel=\"noopener\">https://github.com/SnailDev/SnailDev.EscPosParser）</a></li><li>NestRepository查询Es SDK封装（<a href=\"https://github.com/SnailDev/SnailDev.Mongo2Es/blob/master/README_NESTRepo.md）\" target=\"_blank\" rel=\"noopener\">https://github.com/SnailDev/SnailDev.Mongo2Es/blob/master/README_NESTRepo.md）</a></li></ul><h2 id=\"博彦科技-（-2013年10月-2015年5月-含8个月实习）\"><a href=\"#博彦科技-（-2013年10月-2015年5月-含8个月实习）\" class=\"headerlink\" title=\"博彦科技 （ 2013年10月 ~ 2015年5月 含8个月实习）\"></a>博彦科技 （ 2013年10月 ~ 2015年5月 含8个月实习）</h2><h3 id=\"美国房贷系统\"><a href=\"#美国房贷系统\" class=\"headerlink\" title=\"美国房贷系统\"></a>美国房贷系统</h3><p>工作内容： 参与美国房贷系统Elliemae中WebCenter功能模块的开发和维护；即组长分配JIRA,然后根据JIRA上测试或者客户反馈的bug，进行复现，阅读源代码进行审查，修复bug，提交给组长Code Review。</p><p>开发模式： 敏捷开发，晚日报，晨站会</p><h3 id=\"内部日报系统\"><a href=\"#内部日报系统\" class=\"headerlink\" title=\"内部日报系统\"></a>内部日报系统</h3><p>工作内容：基于Asp.net MVC + Entity Framework + Bootstrap内部日报和请假系统的研发。</p><p>工作说明：由于项目组采用的是敏捷开发模式，每日站会和日报都是必须的，为了满足日报和请假的需求，定制了一套适合项目组内部的日报系统和请假系统。并结合了AlertSystem实现了成员日报邮件提醒。</p><h3 id=\"其他项目-1\"><a href=\"#其他项目-1\" class=\"headerlink\" title=\"其他项目\"></a>其他项目</h3><ul><li>培训考试系统</li><li>内部小工具（HostsHelper、FileFilter、IIsHelper等）</li><li>AlertSystem（基于WindowsService后台定时Email提醒服务）</li></ul><h1 id=\"技能清单\"><a href=\"#技能清单\" class=\"headerlink\" title=\"技能清单\"></a>技能清单</h1><p>以下均为我熟练使用的技能</p><ul><li>Web开发：Java/C#.Net/Node</li><li>Web框架：Spring/Asp.Net MVC/Express</li><li>前端框架：Bootstrap/Jquery/EasyUI/LigerUI/Vue</li><li>数据库相关：MySQL/MongoDB/Redis/ElasticSearch</li><li>版本管理：Svn/Git</li><li>单元测试：JUnit</li><li>云和开放平台：SAE/阿里云/腾讯云/微信应用开发</li></ul><hr><h1 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h1><p>感谢您花时间阅读我的简历，期待能有机会和您共事。</p>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul><li>手机：15821753692（微信同号）</li><li>Email：<ul><li><a href=\"mailto:snailtem@gmail.com\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">snailtem@gmail.com</a> （主）</li><li><a href=\"mailto:snaildev@outlook.com\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">snaildev@outlook.com</a> （备）</li></ul></li><li>QQ：1397407698</li></ul><h1 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h1><ul><li>赵明/男/1990</li><li>本科/黄山学院 计算机科学与技术（2010/9–2014/7）</li><li>工作年限：<strong>4年</strong></li><li>技术博客：<ul><li><a href=\"https://snaildev.github.io\">https://snaildev.github.io</a></li><li><a href=\"http://www.cnblogs.com/snaildev\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/snaildev</a></li></ul></li><li>Github：<a href=\"https://github.com/snaildev\" target=\"_blank\" rel=\"noopener\">https://github.com/snaildev</a></li><li>期望职位：Java高级程序员，应用架构师</li><li>期望薪资：税前月薪28k+</li><li>期望城市：上海</li></ul><h1 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h1><h2 id=\"猫酷科技-（-2015年5月-至今-）\"><a href=\"#猫酷科技-（-2015年5月-至今-）\" class=\"headerlink\" title=\"猫酷科技 （ 2015年5月 ~ 至今 ）\"></a>猫酷科技 （ 2015年5月 ~ 至今 ）</h2><h3 id=\"猫酷车场\"><a href=\"#猫酷车场\" class=\"headerlink\" title=\"猫酷车场\"></a>猫酷车场</h3><p>实现功能：实现用户线上寻车，停车缴费等功能。</p><p>演进过程：</p><ol><li>接手：主导了猫酷车场2.0项目的研发，在1.0的基础上，对车场业务进行梳理，对上层业务代码进行封装，对底层接口对接进行开放，实现新车场接入不动上层业务代码。</li><li>改进：对接口对接层进行改进，实现配置化。第三方车场接口除了是http协议之外，也有不少是webservice/wcf这种soap协议的， 解决方式是通过抓包形式，实现报文配置的统一化。</li><li>持续改进：各个第三方接口的签名方式尽不相同，对接难免需要写代码实现，对于这种，解决方案是按照车场接口的厂商进行分类封装，重复对接同种厂商接口，仅需配置即可。</li><li>无感停车：接入支付宝车场，并开放车场相应功能（进出场通知，离场代扣）给到线下车场，使得车辆离场时不仅可以在使用会员权益、优惠券、积分后，还可以继续使用支付宝免密支付车费，无感出场。</li></ol><p>实现效果：系统更加稳定，用户体验更佳，对接成本从2人天降到0.5人天，目前车场平均月流水（多个商场合计）为800W左右</p><p>欢迎查阅：微信关注上海静安大悦城、近铁城市广场、上海环球港等可查看停车场功能。</p><p>猫酷车场简介： <img src=\"../images/park.jpg\" alt=\"park\"></p><h3 id=\"发布系统\"><a href=\"#发布系统\" class=\"headerlink\" title=\"发布系统\"></a>发布系统</h3><p>实现功能：实现代码发布、备份管理以及服务器管理等功能。</p><p>演进过程：</p><ol><li>接手分析：对发布各个流程进行分析，代码获取、代码编译、代码发布、生产环境备份、代码同步到目的服务器、 发布异常可回滚修复以及发布完成后进行接口测试等。<ul><li>代码获取（源代码管理器Git）</li><li>代码编译及发布（Java–&gt;Maven, .Net–&gt;MSBuild, .NetCore–&gt;dotnet，静态文件发布跳过编译过程）</li><li>服务器数据同步（rsync）</li><li>进行接口测试（Jmeter脚本）</li><li>发布结果推送给项目组成员（邮件通知）</li></ul></li><li>实践进行：服务器应该分环境，测试、仿真和正式。<ul><li>测试（研发发布，测试验证）</li><li>仿真（研发组长发布，研发和测试验证）</li><li>正式（就是生产环境，研发组长发布，仿真通过验证后，将仿真环境作为一个复制集同步到正式环境）</li></ul></li></ol><p>实现效果：规范了发布流程，解放了运维，使得公司约210个项目可使用发布系统稳定发布。</p><p>发布系统流程图： <img src=\"../images/deploy.jpg\" alt=\"deploy\"></p><h3 id=\"其他项目\"><a href=\"#其他项目\" class=\"headerlink\" title=\"其他项目\"></a>其他项目</h3><ul><li>长益预付卡系统对接</li><li>微信小程序发布系统</li><li>Mongo2Es实时同步工具（<a href=\"https://github.com/SnailDev/SnailDev.Mongo2Es）\" target=\"_blank\" rel=\"noopener\">https://github.com/SnailDev/SnailDev.Mongo2Es）</a></li><li>MongoDB Web端查询系统（<a href=\"https://github.com/SnailDev/SnailDev.MongoStudio）\" target=\"_blank\" rel=\"noopener\">https://github.com/SnailDev/SnailDev.MongoStudio）</a></li><li>票据打印机ESC/POS指令解析（<a href=\"https://github.com/SnailDev/SnailDev.EscPosParser）\" target=\"_blank\" rel=\"noopener\">https://github.com/SnailDev/SnailDev.EscPosParser）</a></li><li>NestRepository查询Es SDK封装（<a href=\"https://github.com/SnailDev/SnailDev.Mongo2Es/blob/master/README_NESTRepo.md）\" target=\"_blank\" rel=\"noopener\">https://github.com/SnailDev/SnailDev.Mongo2Es/blob/master/README_NESTRepo.md）</a></li></ul><h2 id=\"博彦科技-（-2013年10月-2015年5月-含8个月实习）\"><a href=\"#博彦科技-（-2013年10月-2015年5月-含8个月实习）\" class=\"headerlink\" title=\"博彦科技 （ 2013年10月 ~ 2015年5月 含8个月实习）\"></a>博彦科技 （ 2013年10月 ~ 2015年5月 含8个月实习）</h2><h3 id=\"美国房贷系统\"><a href=\"#美国房贷系统\" class=\"headerlink\" title=\"美国房贷系统\"></a>美国房贷系统</h3><p>工作内容： 参与美国房贷系统Elliemae中WebCenter功能模块的开发和维护；即组长分配JIRA,然后根据JIRA上测试或者客户反馈的bug，进行复现，阅读源代码进行审查，修复bug，提交给组长Code Review。</p><p>开发模式： 敏捷开发，晚日报，晨站会</p><h3 id=\"内部日报系统\"><a href=\"#内部日报系统\" class=\"headerlink\" title=\"内部日报系统\"></a>内部日报系统</h3><p>工作内容：基于Asp.net MVC + Entity Framework + Bootstrap内部日报和请假系统的研发。</p><p>工作说明：由于项目组采用的是敏捷开发模式，每日站会和日报都是必须的，为了满足日报和请假的需求，定制了一套适合项目组内部的日报系统和请假系统。并结合了AlertSystem实现了成员日报邮件提醒。</p><h3 id=\"其他项目-1\"><a href=\"#其他项目-1\" class=\"headerlink\" title=\"其他项目\"></a>其他项目</h3><ul><li>培训考试系统</li><li>内部小工具（HostsHelper、FileFilter、IIsHelper等）</li><li>AlertSystem（基于WindowsService后台定时Email提醒服务）</li></ul><h1 id=\"技能清单\"><a href=\"#技能清单\" class=\"headerlink\" title=\"技能清单\"></a>技能清单</h1><p>以下均为我熟练使用的技能</p><ul><li>Web开发：Java/C#.Net/Node</li><li>Web框架：Spring/Asp.Net MVC/Express</li><li>前端框架：Bootstrap/Jquery/EasyUI/LigerUI/Vue</li><li>数据库相关：MySQL/MongoDB/Redis/ElasticSearch</li><li>版本管理：Svn/Git</li><li>单元测试：JUnit</li><li>云和开放平台：SAE/阿里云/腾讯云/微信应用开发</li></ul><hr><h1 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h1><p>感谢您花时间阅读我的简历，期待能有机会和您共事。</p>"},{"_content":"# 联系方式\n\n* 手机：15821753692（微信同号）\n* Email：\n    * snailtem@gmail.com （主）\n    * snaildev@outlook.com （备）\n* QQ：1397407698\n\n\n# 个人信息\n\n* 赵明/男/1990\n* 本科/黄山学院 计算机科学与技术（2010/9--2014/7）\n* 工作年限：**4年**（含2年Java研发经验）\n* 技术博客：\n    *   https://snaildev.github.io\n    *   http://www.cnblogs.com/snaildev\n* Github：https://github.com/snaildev\n* 期望职位：Java高级研发\n* 期望城市：上海\n\n# 工作经历\n\n## 猫酷科技 （ 2015年5月 ~ 至今 ）\n\n### 猫酷车场\n\n实现功能：实现用户线上寻车，停车缴费等功能。\n\n演进过程：\n1. 接手：主导了猫酷车场2.0项目的研发，在1.0的基础上，对车场业务进行梳理，对上层业务代码进行封装，对底层接口对接进行开放，实现新车场接入不动上层业务代码。\n2. 改进：对接口对接层进行改进，实现配置化。第三方车场接口除了是http协议之外，也有不少是webservice/wcf这种soap协议的， 解决方式是通过抓包形式，实现报文配置的统一化。\n3. 持续改进：各个第三方接口的签名方式尽不相同，对接难免需要写代码实现，对于这种，解决方案是按照车场接口的厂商进行分类封装，重复对接同种厂商接口，仅需配置即可。\n4. 无感停车：接入支付宝车场，并开放车场相应功能（进出场通知，离场代扣）给到线下车场，使得车辆离场时不仅可以在使用会员权益、优惠券、积分后，还可以继续使用支付宝免密支付车费，无感出场。\n\n实现效果：系统更加稳定，用户体验更佳，对接成本从2人天降到0.5人天，目前车场平均月流水（多个商场合计）为800W左右\n\n欢迎查阅：微信关注上海静安大悦城、近铁城市广场、上海环球港等可查看停车场功能。\n\n猫酷车场简介：\n![park](../images/park.jpg)\n\n### 发布系统\n\n实现功能：实现代码发布、备份管理以及服务器管理等功能。\n\n演进过程：\n1. 接手分析：对发布各个流程进行分析，代码获取、代码编译、代码发布、生产环境备份、代码同步到目的服务器、 发布异常可回滚修复以及发布完成后进行接口测试等。\n    * 代码获取（源代码管理器Git）\n    * 代码编译及发布（Java-->Maven, .Net-->MSBuild, .NetCore-->dotnet，静态文件发布跳过编译过程）\n    * 服务器数据同步（rsync）\n    * 进行接口测试（Jmeter脚本）\n    * 发布结果推送给项目组成员（邮件通知）\n2. 实践进行：服务器应该分环境，测试、仿真和正式。\n    * 测试（研发发布，测试验证）\n    * 仿真（研发组长发布，研发和测试验证）\n    * 正式（就是生产环境，研发组长发布，仿真通过验证后，将仿真环境作为一个复制集同步到正式环境）\n\n实现效果：规范了发布流程，解放了运维，使得公司约210个项目可使用发布系统稳定发布。\n\n发布系统流程图：\n![deploy](../images/deploy.jpg)\n\n### 其他项目\n* 长益预付卡系统对接\n* 微信小程序发布系统\n* Mongo2Es实时同步工具（https://github.com/SnailDev/SnailDev.Mongo2Es）\n* MongoDB Web端查询系统（https://github.com/SnailDev/SnailDev.MongoStudio）\n* 票据打印机ESC/POS指令解析（https://github.com/SnailDev/SnailDev.EscPosParser）\n* NestRepository查询Es SDK封装（https://github.com/SnailDev/SnailDev.Mongo2Es/blob/master/README_NESTRepo.md）\n\n\n## 博彦科技 （ 2013年10月 ~ 2015年5月 含8个月实习）\n\n### 美国房贷系统\n\n工作内容： 参与美国房贷系统Elliemae中WebCenter功能模块的开发和维护；即组长分配JIRA,然后根据JIRA上测试或者客户反馈的bug，进行复现，阅读源代码进行审查，修复bug，提交给组长Code Review。\n\n开发模式： 敏捷开发，晚日报，晨站会\n\n\n### 内部日报系统\n\n工作内容：基于Asp.net MVC + Entity Framework + Bootstrap内部日报和请假系统的研发。 \n\n工作说明：由于项目组采用的是敏捷开发模式，每日站会和日报都是必须的，为了满足日报和请假的需求，定制了一套适合项目组内部的日报系统和请假系统。并结合了AlertSystem实现了成员日报邮件提醒。\n\n### 其他项目\n* 培训考试系统\n* 内部小工具（HostsHelper、FileFilter、IIsHelper等） \n* AlertSystem（基于WindowsService后台定时Email提醒服务）\n\n# 技能清单\n\n以下均为我熟练使用的技能\n\n* Web开发：Java/C#.Net/Node\n* Web框架：Spring/Asp.Net MVC/Express\n* 前端框架：Bootstrap/Jquery/EasyUI/LigerUI\n* 数据库相关：MySQL/MongoDB/Redis/ElasticSearch\n* 版本管理：Svn/Git\n* 单元测试：JUnit\n* 云和开放平台：SAE/阿里云/腾讯云/微信应用开发\n\n- - -\n# 致谢\n\n感谢您花时间阅读我的简历，期待能有机会和您共事。","source":"_drafts/java高级研发-赵明-黄山学院-猫酷科技-4年 - 副本.md","raw":"# 联系方式\n\n* 手机：15821753692（微信同号）\n* Email：\n    * snailtem@gmail.com （主）\n    * snaildev@outlook.com （备）\n* QQ：1397407698\n\n\n# 个人信息\n\n* 赵明/男/1990\n* 本科/黄山学院 计算机科学与技术（2010/9--2014/7）\n* 工作年限：**4年**（含2年Java研发经验）\n* 技术博客：\n    *   https://snaildev.github.io\n    *   http://www.cnblogs.com/snaildev\n* Github：https://github.com/snaildev\n* 期望职位：Java高级研发\n* 期望城市：上海\n\n# 工作经历\n\n## 猫酷科技 （ 2015年5月 ~ 至今 ）\n\n### 猫酷车场\n\n实现功能：实现用户线上寻车，停车缴费等功能。\n\n演进过程：\n1. 接手：主导了猫酷车场2.0项目的研发，在1.0的基础上，对车场业务进行梳理，对上层业务代码进行封装，对底层接口对接进行开放，实现新车场接入不动上层业务代码。\n2. 改进：对接口对接层进行改进，实现配置化。第三方车场接口除了是http协议之外，也有不少是webservice/wcf这种soap协议的， 解决方式是通过抓包形式，实现报文配置的统一化。\n3. 持续改进：各个第三方接口的签名方式尽不相同，对接难免需要写代码实现，对于这种，解决方案是按照车场接口的厂商进行分类封装，重复对接同种厂商接口，仅需配置即可。\n4. 无感停车：接入支付宝车场，并开放车场相应功能（进出场通知，离场代扣）给到线下车场，使得车辆离场时不仅可以在使用会员权益、优惠券、积分后，还可以继续使用支付宝免密支付车费，无感出场。\n\n实现效果：系统更加稳定，用户体验更佳，对接成本从2人天降到0.5人天，目前车场平均月流水（多个商场合计）为800W左右\n\n欢迎查阅：微信关注上海静安大悦城、近铁城市广场、上海环球港等可查看停车场功能。\n\n猫酷车场简介：\n![park](../images/park.jpg)\n\n### 发布系统\n\n实现功能：实现代码发布、备份管理以及服务器管理等功能。\n\n演进过程：\n1. 接手分析：对发布各个流程进行分析，代码获取、代码编译、代码发布、生产环境备份、代码同步到目的服务器、 发布异常可回滚修复以及发布完成后进行接口测试等。\n    * 代码获取（源代码管理器Git）\n    * 代码编译及发布（Java-->Maven, .Net-->MSBuild, .NetCore-->dotnet，静态文件发布跳过编译过程）\n    * 服务器数据同步（rsync）\n    * 进行接口测试（Jmeter脚本）\n    * 发布结果推送给项目组成员（邮件通知）\n2. 实践进行：服务器应该分环境，测试、仿真和正式。\n    * 测试（研发发布，测试验证）\n    * 仿真（研发组长发布，研发和测试验证）\n    * 正式（就是生产环境，研发组长发布，仿真通过验证后，将仿真环境作为一个复制集同步到正式环境）\n\n实现效果：规范了发布流程，解放了运维，使得公司约210个项目可使用发布系统稳定发布。\n\n发布系统流程图：\n![deploy](../images/deploy.jpg)\n\n### 其他项目\n* 长益预付卡系统对接\n* 微信小程序发布系统\n* Mongo2Es实时同步工具（https://github.com/SnailDev/SnailDev.Mongo2Es）\n* MongoDB Web端查询系统（https://github.com/SnailDev/SnailDev.MongoStudio）\n* 票据打印机ESC/POS指令解析（https://github.com/SnailDev/SnailDev.EscPosParser）\n* NestRepository查询Es SDK封装（https://github.com/SnailDev/SnailDev.Mongo2Es/blob/master/README_NESTRepo.md）\n\n\n## 博彦科技 （ 2013年10月 ~ 2015年5月 含8个月实习）\n\n### 美国房贷系统\n\n工作内容： 参与美国房贷系统Elliemae中WebCenter功能模块的开发和维护；即组长分配JIRA,然后根据JIRA上测试或者客户反馈的bug，进行复现，阅读源代码进行审查，修复bug，提交给组长Code Review。\n\n开发模式： 敏捷开发，晚日报，晨站会\n\n\n### 内部日报系统\n\n工作内容：基于Asp.net MVC + Entity Framework + Bootstrap内部日报和请假系统的研发。 \n\n工作说明：由于项目组采用的是敏捷开发模式，每日站会和日报都是必须的，为了满足日报和请假的需求，定制了一套适合项目组内部的日报系统和请假系统。并结合了AlertSystem实现了成员日报邮件提醒。\n\n### 其他项目\n* 培训考试系统\n* 内部小工具（HostsHelper、FileFilter、IIsHelper等） \n* AlertSystem（基于WindowsService后台定时Email提醒服务）\n\n# 技能清单\n\n以下均为我熟练使用的技能\n\n* Web开发：Java/C#.Net/Node\n* Web框架：Spring/Asp.Net MVC/Express\n* 前端框架：Bootstrap/Jquery/EasyUI/LigerUI\n* 数据库相关：MySQL/MongoDB/Redis/ElasticSearch\n* 版本管理：Svn/Git\n* 单元测试：JUnit\n* 云和开放平台：SAE/阿里云/腾讯云/微信应用开发\n\n- - -\n# 致谢\n\n感谢您花时间阅读我的简历，期待能有机会和您共事。","slug":"java高级研发-赵明-黄山学院-猫酷科技-4年 - 副本","published":0,"date":"2018-10-03T01:13:40.023Z","updated":"2018-09-10T02:45:20.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmyu0s9p0006x8uonycbandp","content":"<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul><li>手机：15821753692（微信同号）</li><li>Email：<ul><li><a href=\"mailto:snailtem@gmail.com\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">snailtem@gmail.com</a> （主）</li><li><a href=\"mailto:snaildev@outlook.com\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">snaildev@outlook.com</a> （备）</li></ul></li><li>QQ：1397407698</li></ul><h1 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h1><ul><li>赵明/男/1990</li><li>本科/黄山学院 计算机科学与技术（2010/9–2014/7）</li><li>工作年限：<strong>4年</strong>（含2年Java研发经验）</li><li>技术博客：<ul><li><a href=\"https://snaildev.github.io\">https://snaildev.github.io</a></li><li><a href=\"http://www.cnblogs.com/snaildev\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/snaildev</a></li></ul></li><li>Github：<a href=\"https://github.com/snaildev\" target=\"_blank\" rel=\"noopener\">https://github.com/snaildev</a></li><li>期望职位：Java高级研发</li><li>期望城市：上海</li></ul><h1 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h1><h2 id=\"猫酷科技-（-2015年5月-至今-）\"><a href=\"#猫酷科技-（-2015年5月-至今-）\" class=\"headerlink\" title=\"猫酷科技 （ 2015年5月 ~ 至今 ）\"></a>猫酷科技 （ 2015年5月 ~ 至今 ）</h2><h3 id=\"猫酷车场\"><a href=\"#猫酷车场\" class=\"headerlink\" title=\"猫酷车场\"></a>猫酷车场</h3><p>实现功能：实现用户线上寻车，停车缴费等功能。</p><p>演进过程：</p><ol><li>接手：主导了猫酷车场2.0项目的研发，在1.0的基础上，对车场业务进行梳理，对上层业务代码进行封装，对底层接口对接进行开放，实现新车场接入不动上层业务代码。</li><li>改进：对接口对接层进行改进，实现配置化。第三方车场接口除了是http协议之外，也有不少是webservice/wcf这种soap协议的， 解决方式是通过抓包形式，实现报文配置的统一化。</li><li>持续改进：各个第三方接口的签名方式尽不相同，对接难免需要写代码实现，对于这种，解决方案是按照车场接口的厂商进行分类封装，重复对接同种厂商接口，仅需配置即可。</li><li>无感停车：接入支付宝车场，并开放车场相应功能（进出场通知，离场代扣）给到线下车场，使得车辆离场时不仅可以在使用会员权益、优惠券、积分后，还可以继续使用支付宝免密支付车费，无感出场。</li></ol><p>实现效果：系统更加稳定，用户体验更佳，对接成本从2人天降到0.5人天，目前车场平均月流水（多个商场合计）为800W左右</p><p>欢迎查阅：微信关注上海静安大悦城、近铁城市广场、上海环球港等可查看停车场功能。</p><p>猫酷车场简介： <img src=\"../images/park.jpg\" alt=\"park\"></p><h3 id=\"发布系统\"><a href=\"#发布系统\" class=\"headerlink\" title=\"发布系统\"></a>发布系统</h3><p>实现功能：实现代码发布、备份管理以及服务器管理等功能。</p><p>演进过程：</p><ol><li>接手分析：对发布各个流程进行分析，代码获取、代码编译、代码发布、生产环境备份、代码同步到目的服务器、 发布异常可回滚修复以及发布完成后进行接口测试等。<ul><li>代码获取（源代码管理器Git）</li><li>代码编译及发布（Java–&gt;Maven, .Net–&gt;MSBuild, .NetCore–&gt;dotnet，静态文件发布跳过编译过程）</li><li>服务器数据同步（rsync）</li><li>进行接口测试（Jmeter脚本）</li><li>发布结果推送给项目组成员（邮件通知）</li></ul></li><li>实践进行：服务器应该分环境，测试、仿真和正式。<ul><li>测试（研发发布，测试验证）</li><li>仿真（研发组长发布，研发和测试验证）</li><li>正式（就是生产环境，研发组长发布，仿真通过验证后，将仿真环境作为一个复制集同步到正式环境）</li></ul></li></ol><p>实现效果：规范了发布流程，解放了运维，使得公司约210个项目可使用发布系统稳定发布。</p><p>发布系统流程图： <img src=\"../images/deploy.jpg\" alt=\"deploy\"></p><h3 id=\"其他项目\"><a href=\"#其他项目\" class=\"headerlink\" title=\"其他项目\"></a>其他项目</h3><ul><li>长益预付卡系统对接</li><li>微信小程序发布系统</li><li>Mongo2Es实时同步工具（<a href=\"https://github.com/SnailDev/SnailDev.Mongo2Es）\" target=\"_blank\" rel=\"noopener\">https://github.com/SnailDev/SnailDev.Mongo2Es）</a></li><li>MongoDB Web端查询系统（<a href=\"https://github.com/SnailDev/SnailDev.MongoStudio）\" target=\"_blank\" rel=\"noopener\">https://github.com/SnailDev/SnailDev.MongoStudio）</a></li><li>票据打印机ESC/POS指令解析（<a href=\"https://github.com/SnailDev/SnailDev.EscPosParser）\" target=\"_blank\" rel=\"noopener\">https://github.com/SnailDev/SnailDev.EscPosParser）</a></li><li>NestRepository查询Es SDK封装（<a href=\"https://github.com/SnailDev/SnailDev.Mongo2Es/blob/master/README_NESTRepo.md）\" target=\"_blank\" rel=\"noopener\">https://github.com/SnailDev/SnailDev.Mongo2Es/blob/master/README_NESTRepo.md）</a></li></ul><h2 id=\"博彦科技-（-2013年10月-2015年5月-含8个月实习）\"><a href=\"#博彦科技-（-2013年10月-2015年5月-含8个月实习）\" class=\"headerlink\" title=\"博彦科技 （ 2013年10月 ~ 2015年5月 含8个月实习）\"></a>博彦科技 （ 2013年10月 ~ 2015年5月 含8个月实习）</h2><h3 id=\"美国房贷系统\"><a href=\"#美国房贷系统\" class=\"headerlink\" title=\"美国房贷系统\"></a>美国房贷系统</h3><p>工作内容： 参与美国房贷系统Elliemae中WebCenter功能模块的开发和维护；即组长分配JIRA,然后根据JIRA上测试或者客户反馈的bug，进行复现，阅读源代码进行审查，修复bug，提交给组长Code Review。</p><p>开发模式： 敏捷开发，晚日报，晨站会</p><h3 id=\"内部日报系统\"><a href=\"#内部日报系统\" class=\"headerlink\" title=\"内部日报系统\"></a>内部日报系统</h3><p>工作内容：基于Asp.net MVC + Entity Framework + Bootstrap内部日报和请假系统的研发。</p><p>工作说明：由于项目组采用的是敏捷开发模式，每日站会和日报都是必须的，为了满足日报和请假的需求，定制了一套适合项目组内部的日报系统和请假系统。并结合了AlertSystem实现了成员日报邮件提醒。</p><h3 id=\"其他项目-1\"><a href=\"#其他项目-1\" class=\"headerlink\" title=\"其他项目\"></a>其他项目</h3><ul><li>培训考试系统</li><li>内部小工具（HostsHelper、FileFilter、IIsHelper等）</li><li>AlertSystem（基于WindowsService后台定时Email提醒服务）</li></ul><h1 id=\"技能清单\"><a href=\"#技能清单\" class=\"headerlink\" title=\"技能清单\"></a>技能清单</h1><p>以下均为我熟练使用的技能</p><ul><li>Web开发：Java/C#.Net/Node</li><li>Web框架：Spring/Asp.Net MVC/Express</li><li>前端框架：Bootstrap/Jquery/EasyUI/LigerUI</li><li>数据库相关：MySQL/MongoDB/Redis/ElasticSearch</li><li>版本管理：Svn/Git</li><li>单元测试：JUnit</li><li>云和开放平台：SAE/阿里云/腾讯云/微信应用开发</li></ul><hr><h1 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h1><p>感谢您花时间阅读我的简历，期待能有机会和您共事。</p>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul><li>手机：15821753692（微信同号）</li><li>Email：<ul><li><a href=\"mailto:snailtem@gmail.com\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">snailtem@gmail.com</a> （主）</li><li><a href=\"mailto:snaildev@outlook.com\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">snaildev@outlook.com</a> （备）</li></ul></li><li>QQ：1397407698</li></ul><h1 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h1><ul><li>赵明/男/1990</li><li>本科/黄山学院 计算机科学与技术（2010/9–2014/7）</li><li>工作年限：<strong>4年</strong>（含2年Java研发经验）</li><li>技术博客：<ul><li><a href=\"https://snaildev.github.io\">https://snaildev.github.io</a></li><li><a href=\"http://www.cnblogs.com/snaildev\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/snaildev</a></li></ul></li><li>Github：<a href=\"https://github.com/snaildev\" target=\"_blank\" rel=\"noopener\">https://github.com/snaildev</a></li><li>期望职位：Java高级研发</li><li>期望城市：上海</li></ul><h1 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h1><h2 id=\"猫酷科技-（-2015年5月-至今-）\"><a href=\"#猫酷科技-（-2015年5月-至今-）\" class=\"headerlink\" title=\"猫酷科技 （ 2015年5月 ~ 至今 ）\"></a>猫酷科技 （ 2015年5月 ~ 至今 ）</h2><h3 id=\"猫酷车场\"><a href=\"#猫酷车场\" class=\"headerlink\" title=\"猫酷车场\"></a>猫酷车场</h3><p>实现功能：实现用户线上寻车，停车缴费等功能。</p><p>演进过程：</p><ol><li>接手：主导了猫酷车场2.0项目的研发，在1.0的基础上，对车场业务进行梳理，对上层业务代码进行封装，对底层接口对接进行开放，实现新车场接入不动上层业务代码。</li><li>改进：对接口对接层进行改进，实现配置化。第三方车场接口除了是http协议之外，也有不少是webservice/wcf这种soap协议的， 解决方式是通过抓包形式，实现报文配置的统一化。</li><li>持续改进：各个第三方接口的签名方式尽不相同，对接难免需要写代码实现，对于这种，解决方案是按照车场接口的厂商进行分类封装，重复对接同种厂商接口，仅需配置即可。</li><li>无感停车：接入支付宝车场，并开放车场相应功能（进出场通知，离场代扣）给到线下车场，使得车辆离场时不仅可以在使用会员权益、优惠券、积分后，还可以继续使用支付宝免密支付车费，无感出场。</li></ol><p>实现效果：系统更加稳定，用户体验更佳，对接成本从2人天降到0.5人天，目前车场平均月流水（多个商场合计）为800W左右</p><p>欢迎查阅：微信关注上海静安大悦城、近铁城市广场、上海环球港等可查看停车场功能。</p><p>猫酷车场简介： <img src=\"../images/park.jpg\" alt=\"park\"></p><h3 id=\"发布系统\"><a href=\"#发布系统\" class=\"headerlink\" title=\"发布系统\"></a>发布系统</h3><p>实现功能：实现代码发布、备份管理以及服务器管理等功能。</p><p>演进过程：</p><ol><li>接手分析：对发布各个流程进行分析，代码获取、代码编译、代码发布、生产环境备份、代码同步到目的服务器、 发布异常可回滚修复以及发布完成后进行接口测试等。<ul><li>代码获取（源代码管理器Git）</li><li>代码编译及发布（Java–&gt;Maven, .Net–&gt;MSBuild, .NetCore–&gt;dotnet，静态文件发布跳过编译过程）</li><li>服务器数据同步（rsync）</li><li>进行接口测试（Jmeter脚本）</li><li>发布结果推送给项目组成员（邮件通知）</li></ul></li><li>实践进行：服务器应该分环境，测试、仿真和正式。<ul><li>测试（研发发布，测试验证）</li><li>仿真（研发组长发布，研发和测试验证）</li><li>正式（就是生产环境，研发组长发布，仿真通过验证后，将仿真环境作为一个复制集同步到正式环境）</li></ul></li></ol><p>实现效果：规范了发布流程，解放了运维，使得公司约210个项目可使用发布系统稳定发布。</p><p>发布系统流程图： <img src=\"../images/deploy.jpg\" alt=\"deploy\"></p><h3 id=\"其他项目\"><a href=\"#其他项目\" class=\"headerlink\" title=\"其他项目\"></a>其他项目</h3><ul><li>长益预付卡系统对接</li><li>微信小程序发布系统</li><li>Mongo2Es实时同步工具（<a href=\"https://github.com/SnailDev/SnailDev.Mongo2Es）\" target=\"_blank\" rel=\"noopener\">https://github.com/SnailDev/SnailDev.Mongo2Es）</a></li><li>MongoDB Web端查询系统（<a href=\"https://github.com/SnailDev/SnailDev.MongoStudio）\" target=\"_blank\" rel=\"noopener\">https://github.com/SnailDev/SnailDev.MongoStudio）</a></li><li>票据打印机ESC/POS指令解析（<a href=\"https://github.com/SnailDev/SnailDev.EscPosParser）\" target=\"_blank\" rel=\"noopener\">https://github.com/SnailDev/SnailDev.EscPosParser）</a></li><li>NestRepository查询Es SDK封装（<a href=\"https://github.com/SnailDev/SnailDev.Mongo2Es/blob/master/README_NESTRepo.md）\" target=\"_blank\" rel=\"noopener\">https://github.com/SnailDev/SnailDev.Mongo2Es/blob/master/README_NESTRepo.md）</a></li></ul><h2 id=\"博彦科技-（-2013年10月-2015年5月-含8个月实习）\"><a href=\"#博彦科技-（-2013年10月-2015年5月-含8个月实习）\" class=\"headerlink\" title=\"博彦科技 （ 2013年10月 ~ 2015年5月 含8个月实习）\"></a>博彦科技 （ 2013年10月 ~ 2015年5月 含8个月实习）</h2><h3 id=\"美国房贷系统\"><a href=\"#美国房贷系统\" class=\"headerlink\" title=\"美国房贷系统\"></a>美国房贷系统</h3><p>工作内容： 参与美国房贷系统Elliemae中WebCenter功能模块的开发和维护；即组长分配JIRA,然后根据JIRA上测试或者客户反馈的bug，进行复现，阅读源代码进行审查，修复bug，提交给组长Code Review。</p><p>开发模式： 敏捷开发，晚日报，晨站会</p><h3 id=\"内部日报系统\"><a href=\"#内部日报系统\" class=\"headerlink\" title=\"内部日报系统\"></a>内部日报系统</h3><p>工作内容：基于Asp.net MVC + Entity Framework + Bootstrap内部日报和请假系统的研发。</p><p>工作说明：由于项目组采用的是敏捷开发模式，每日站会和日报都是必须的，为了满足日报和请假的需求，定制了一套适合项目组内部的日报系统和请假系统。并结合了AlertSystem实现了成员日报邮件提醒。</p><h3 id=\"其他项目-1\"><a href=\"#其他项目-1\" class=\"headerlink\" title=\"其他项目\"></a>其他项目</h3><ul><li>培训考试系统</li><li>内部小工具（HostsHelper、FileFilter、IIsHelper等）</li><li>AlertSystem（基于WindowsService后台定时Email提醒服务）</li></ul><h1 id=\"技能清单\"><a href=\"#技能清单\" class=\"headerlink\" title=\"技能清单\"></a>技能清单</h1><p>以下均为我熟练使用的技能</p><ul><li>Web开发：Java/C#.Net/Node</li><li>Web框架：Spring/Asp.Net MVC/Express</li><li>前端框架：Bootstrap/Jquery/EasyUI/LigerUI</li><li>数据库相关：MySQL/MongoDB/Redis/ElasticSearch</li><li>版本管理：Svn/Git</li><li>单元测试：JUnit</li><li>云和开放平台：SAE/阿里云/腾讯云/微信应用开发</li></ul><hr><h1 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h1><p>感谢您花时间阅读我的简历，期待能有机会和您共事。</p>"},{"title":"为什么要写博客","author":"SnailDev","date":"2017-06-15T02:26:00.000Z","featured_image":"/images/blog.jpg","_content":"![blog](/images/blog.jpg)\n> **不管你是谁，都应该现在开始经营你的个人博客。**\n\n<!-- more -->\n\n## 1. 深度思考\n书写是为了更好的思考，看到、知道并不一定掌握，只有通过文字，有条理和逻辑的呈现出来，你才算会真正的理解和掌握，而在写作的过程，你才会把曾经松散的思路和想法串联起来，形成系统的总结。\n\n\n## 2. 沉淀想法\n俗话说，好记性不如烂笔头，必有其道理。因为想法和创意，瞬间即逝，当你想要二次查找或者给别人介绍的时候，你会发现记忆是多么的不靠谱，而只有日常的记录和写作才可以帮你随取、随用，而且好的想法，还可以刺激和影响更多人的新想法，通过他们的评论和分享，你的想法和创意将获得倍增。\n\n\n\n## 3. 价值杠杆\n一个人的价值，在于其影响力。写作是一项低门槛、高回报——即高工作杠杆率——的事情。通过写作，你可以用最简单的方式持续积累个人影响力，尤其是通过专业主题领域的持续写作，让你在特定受众群体中建立你的影响力和号召力，这可以让你在职场发展过程，持续增加个人溢价和商业潜力。\n\n\n\n## 4. 建立连接\n我的写作期初只是为了记录自己的成长收获，我却意外的获得了：\n前辈的鼓励、很多同龄大学生的共鸣、潜在雇主的实习机会、合作伙伴的邀约、创业合伙人的结缘、客户资源的获取……\n事实上，远远不止这些。我这些年最知心的朋友和伙伴，都潜移默化的因为我的博客的存在而使得我们自然相吸，每每很多朋友一见如故，让我觉得世界上另一端还有如此多和我志同道合的朋友，我做什么都不会孤独，我做什么都会得到大家的帮助与支持。\n连接力作为21世纪最重要的能力之一，我想没有什么能比持续写作更容易帮助你提升这种能力了。\n\n\n\n## 5. 塑造品牌\n人的一生都在经营品牌，你信奉的人生哲学、你所追求的使命、你追求的价值观、你的品位和风格、你的为人处世、你的态度，这些都构成你作为一个品牌的要素。\n文如其人，你的文字表达是让别人认识你的绝佳方式，透过文字的阅读，可以了解你是一个专业的、细腻的、幽默的、胸怀天下的、消极的、执着的、乃至有爱的独立生命个体。\n个人品牌的经营的确需要付诸非常人的努力和坚持，方能发挥其影响力。\n\n\n\n## 6. 动态简历\n纸质的简历只是一张干巴巴的纸，然而博客则是一个会讲故事经纪人。\n今天所有的HR都喜欢这样的人才：\n  1. 善于学习的（读书笔记、实践观察）；\n  2. 热爱分享的（分享工作实践经验）；\n  3. 坚持不懈的（每天写一篇网络日志）；\n  4. 营销自我的（开博客做个人品牌）；\n  5. 连接能力强（通过网络拓展人脉资源）。\n\n而这一切，都可以通过一个博客实现。","source":"_posts/about-me-why-should-wirte-blog.md","raw":"---\ntitle: 为什么要写博客\nauthor: SnailDev\ntags:\n  - 随手写写\ncategories:\n  - 自我认知\ndate: 2017-06-15 10:26:00\nfeatured_image: /images/blog.jpg\n---\n![blog](/images/blog.jpg)\n> **不管你是谁，都应该现在开始经营你的个人博客。**\n\n<!-- more -->\n\n## 1. 深度思考\n书写是为了更好的思考，看到、知道并不一定掌握，只有通过文字，有条理和逻辑的呈现出来，你才算会真正的理解和掌握，而在写作的过程，你才会把曾经松散的思路和想法串联起来，形成系统的总结。\n\n\n## 2. 沉淀想法\n俗话说，好记性不如烂笔头，必有其道理。因为想法和创意，瞬间即逝，当你想要二次查找或者给别人介绍的时候，你会发现记忆是多么的不靠谱，而只有日常的记录和写作才可以帮你随取、随用，而且好的想法，还可以刺激和影响更多人的新想法，通过他们的评论和分享，你的想法和创意将获得倍增。\n\n\n\n## 3. 价值杠杆\n一个人的价值，在于其影响力。写作是一项低门槛、高回报——即高工作杠杆率——的事情。通过写作，你可以用最简单的方式持续积累个人影响力，尤其是通过专业主题领域的持续写作，让你在特定受众群体中建立你的影响力和号召力，这可以让你在职场发展过程，持续增加个人溢价和商业潜力。\n\n\n\n## 4. 建立连接\n我的写作期初只是为了记录自己的成长收获，我却意外的获得了：\n前辈的鼓励、很多同龄大学生的共鸣、潜在雇主的实习机会、合作伙伴的邀约、创业合伙人的结缘、客户资源的获取……\n事实上，远远不止这些。我这些年最知心的朋友和伙伴，都潜移默化的因为我的博客的存在而使得我们自然相吸，每每很多朋友一见如故，让我觉得世界上另一端还有如此多和我志同道合的朋友，我做什么都不会孤独，我做什么都会得到大家的帮助与支持。\n连接力作为21世纪最重要的能力之一，我想没有什么能比持续写作更容易帮助你提升这种能力了。\n\n\n\n## 5. 塑造品牌\n人的一生都在经营品牌，你信奉的人生哲学、你所追求的使命、你追求的价值观、你的品位和风格、你的为人处世、你的态度，这些都构成你作为一个品牌的要素。\n文如其人，你的文字表达是让别人认识你的绝佳方式，透过文字的阅读，可以了解你是一个专业的、细腻的、幽默的、胸怀天下的、消极的、执着的、乃至有爱的独立生命个体。\n个人品牌的经营的确需要付诸非常人的努力和坚持，方能发挥其影响力。\n\n\n\n## 6. 动态简历\n纸质的简历只是一张干巴巴的纸，然而博客则是一个会讲故事经纪人。\n今天所有的HR都喜欢这样的人才：\n  1. 善于学习的（读书笔记、实践观察）；\n  2. 热爱分享的（分享工作实践经验）；\n  3. 坚持不懈的（每天写一篇网络日志）；\n  4. 营销自我的（开博客做个人品牌）；\n  5. 连接能力强（通过网络拓展人脉资源）。\n\n而这一切，都可以通过一个博客实现。","slug":"about-me-why-should-wirte-blog","published":1,"updated":"2018-10-03T01:35:47.961Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmyu0sa20008x8uogimcdp0d","content":"<p><img src=\"/images/blog.jpg\" alt=\"blog\"></p><blockquote><p><strong>不管你是谁，都应该现在开始经营你的个人博客。</strong></p></blockquote><a id=\"more\"></a><h2 id=\"1-深度思考\"><a href=\"#1-深度思考\" class=\"headerlink\" title=\"1. 深度思考\"></a>1. 深度思考</h2><p>书写是为了更好的思考，看到、知道并不一定掌握，只有通过文字，有条理和逻辑的呈现出来，你才算会真正的理解和掌握，而在写作的过程，你才会把曾经松散的思路和想法串联起来，形成系统的总结。</p><h2 id=\"2-沉淀想法\"><a href=\"#2-沉淀想法\" class=\"headerlink\" title=\"2. 沉淀想法\"></a>2. 沉淀想法</h2><p>俗话说，好记性不如烂笔头，必有其道理。因为想法和创意，瞬间即逝，当你想要二次查找或者给别人介绍的时候，你会发现记忆是多么的不靠谱，而只有日常的记录和写作才可以帮你随取、随用，而且好的想法，还可以刺激和影响更多人的新想法，通过他们的评论和分享，你的想法和创意将获得倍增。</p><h2 id=\"3-价值杠杆\"><a href=\"#3-价值杠杆\" class=\"headerlink\" title=\"3. 价值杠杆\"></a>3. 价值杠杆</h2><p>一个人的价值，在于其影响力。写作是一项低门槛、高回报——即高工作杠杆率——的事情。通过写作，你可以用最简单的方式持续积累个人影响力，尤其是通过专业主题领域的持续写作，让你在特定受众群体中建立你的影响力和号召力，这可以让你在职场发展过程，持续增加个人溢价和商业潜力。</p><h2 id=\"4-建立连接\"><a href=\"#4-建立连接\" class=\"headerlink\" title=\"4. 建立连接\"></a>4. 建立连接</h2><p>我的写作期初只是为了记录自己的成长收获，我却意外的获得了： 前辈的鼓励、很多同龄大学生的共鸣、潜在雇主的实习机会、合作伙伴的邀约、创业合伙人的结缘、客户资源的获取…… 事实上，远远不止这些。我这些年最知心的朋友和伙伴，都潜移默化的因为我的博客的存在而使得我们自然相吸，每每很多朋友一见如故，让我觉得世界上另一端还有如此多和我志同道合的朋友，我做什么都不会孤独，我做什么都会得到大家的帮助与支持。 连接力作为21世纪最重要的能力之一，我想没有什么能比持续写作更容易帮助你提升这种能力了。</p><h2 id=\"5-塑造品牌\"><a href=\"#5-塑造品牌\" class=\"headerlink\" title=\"5. 塑造品牌\"></a>5. 塑造品牌</h2><p>人的一生都在经营品牌，你信奉的人生哲学、你所追求的使命、你追求的价值观、你的品位和风格、你的为人处世、你的态度，这些都构成你作为一个品牌的要素。 文如其人，你的文字表达是让别人认识你的绝佳方式，透过文字的阅读，可以了解你是一个专业的、细腻的、幽默的、胸怀天下的、消极的、执着的、乃至有爱的独立生命个体。 个人品牌的经营的确需要付诸非常人的努力和坚持，方能发挥其影响力。</p><h2 id=\"6-动态简历\"><a href=\"#6-动态简历\" class=\"headerlink\" title=\"6. 动态简历\"></a>6. 动态简历</h2><p>纸质的简历只是一张干巴巴的纸，然而博客则是一个会讲故事经纪人。 今天所有的HR都喜欢这样的人才：</p><ol><li>善于学习的（读书笔记、实践观察）；</li><li>热爱分享的（分享工作实践经验）；</li><li>坚持不懈的（每天写一篇网络日志）；</li><li>营销自我的（开博客做个人品牌）；</li><li>连接能力强（通过网络拓展人脉资源）。</li></ol><p>而这一切，都可以通过一个博客实现。</p>","site":{"data":{}},"excerpt":"<p><img src=\"/images/blog.jpg\" alt=\"blog\"></p><blockquote><p><strong>不管你是谁，都应该现在开始经营你的个人博客。</strong></p></blockquote>","more":"<h2 id=\"1-深度思考\"><a href=\"#1-深度思考\" class=\"headerlink\" title=\"1. 深度思考\"></a>1. 深度思考</h2><p>书写是为了更好的思考，看到、知道并不一定掌握，只有通过文字，有条理和逻辑的呈现出来，你才算会真正的理解和掌握，而在写作的过程，你才会把曾经松散的思路和想法串联起来，形成系统的总结。</p><h2 id=\"2-沉淀想法\"><a href=\"#2-沉淀想法\" class=\"headerlink\" title=\"2. 沉淀想法\"></a>2. 沉淀想法</h2><p>俗话说，好记性不如烂笔头，必有其道理。因为想法和创意，瞬间即逝，当你想要二次查找或者给别人介绍的时候，你会发现记忆是多么的不靠谱，而只有日常的记录和写作才可以帮你随取、随用，而且好的想法，还可以刺激和影响更多人的新想法，通过他们的评论和分享，你的想法和创意将获得倍增。</p><h2 id=\"3-价值杠杆\"><a href=\"#3-价值杠杆\" class=\"headerlink\" title=\"3. 价值杠杆\"></a>3. 价值杠杆</h2><p>一个人的价值，在于其影响力。写作是一项低门槛、高回报——即高工作杠杆率——的事情。通过写作，你可以用最简单的方式持续积累个人影响力，尤其是通过专业主题领域的持续写作，让你在特定受众群体中建立你的影响力和号召力，这可以让你在职场发展过程，持续增加个人溢价和商业潜力。</p><h2 id=\"4-建立连接\"><a href=\"#4-建立连接\" class=\"headerlink\" title=\"4. 建立连接\"></a>4. 建立连接</h2><p>我的写作期初只是为了记录自己的成长收获，我却意外的获得了： 前辈的鼓励、很多同龄大学生的共鸣、潜在雇主的实习机会、合作伙伴的邀约、创业合伙人的结缘、客户资源的获取…… 事实上，远远不止这些。我这些年最知心的朋友和伙伴，都潜移默化的因为我的博客的存在而使得我们自然相吸，每每很多朋友一见如故，让我觉得世界上另一端还有如此多和我志同道合的朋友，我做什么都不会孤独，我做什么都会得到大家的帮助与支持。 连接力作为21世纪最重要的能力之一，我想没有什么能比持续写作更容易帮助你提升这种能力了。</p><h2 id=\"5-塑造品牌\"><a href=\"#5-塑造品牌\" class=\"headerlink\" title=\"5. 塑造品牌\"></a>5. 塑造品牌</h2><p>人的一生都在经营品牌，你信奉的人生哲学、你所追求的使命、你追求的价值观、你的品位和风格、你的为人处世、你的态度，这些都构成你作为一个品牌的要素。 文如其人，你的文字表达是让别人认识你的绝佳方式，透过文字的阅读，可以了解你是一个专业的、细腻的、幽默的、胸怀天下的、消极的、执着的、乃至有爱的独立生命个体。 个人品牌的经营的确需要付诸非常人的努力和坚持，方能发挥其影响力。</p><h2 id=\"6-动态简历\"><a href=\"#6-动态简历\" class=\"headerlink\" title=\"6. 动态简历\"></a>6. 动态简历</h2><p>纸质的简历只是一张干巴巴的纸，然而博客则是一个会讲故事经纪人。 今天所有的HR都喜欢这样的人才：</p><ol><li>善于学习的（读书笔记、实践观察）；</li><li>热爱分享的（分享工作实践经验）；</li><li>坚持不懈的（每天写一篇网络日志）；</li><li>营销自我的（开博客做个人品牌）；</li><li>连接能力强（通过网络拓展人脉资源）。</li></ol><p>而这一切，都可以通过一个博客实现。</p>"},{"title":"java基础（三）继承","author":"SnailDev","date":"2018-06-03T12:54:28.000Z","featured_image":"/images/inheritance_1.png","_content":"![inheritance](/images/inheritance_1.png)\n\n上篇随笔我们聊完封装， 知道封装是private + getter and setter, 其目的是为了安全， 也是为了更易于维护，模块化操作。\n\n这篇我们继续聊聊面向对象三大特性中的继承，在《Think in java》中有这样一句话：\n\n> 复用代码是Java众多引人注目的功能之一\n\n但要成为极具革命性的语言，仅仅能够复用代码并加以改变是不够的，它还必须做更多的事情。在这句话中最引人注目的是“复用代码”，尽可能的复用代码是我们程序员一直在追求的，而继承也是面向对象思想中实现复用的重要手段。\n\n我们先看一段代码：\n```java\npublic class Man {\n  private String name;\n  private String sex;\n  private int age;\n  private Woman wife;\n\n  // getter and setter\n}\n\npublic class Woman {\n  private String name;\n  private int age;\n  private String sex;\n  private Man husband;\n\n  // getter and setter\n}\n```\n这里我们可以看出，Man、Woman两个类除了各自的wife、husband外其余部分全部相同，作为一个想最大限度实现复用代码的我们是不能忍受这样重复代码，那么利用继承吧。\n\n首先让我们先离开软件编程的世界，从生活中我们知道男人、女人都是人，而且都有一些共性，比如名字，年龄，性别等等，而且他们能够吃东西、走路、说话等共同的行为，所以我们从这些特征可以发现并抽象出人的属性和行为。**使用继承我们可以使用已存在的类的定义作为基础建立新类，新类的定义可以增加新的数据或新的功能，也可以使用父类的功能，但不能选择性继承。**\n\n修改代码如下：\n```java\npublic class Person {\n  private String name;\n  private int age;\n  private String sex;\n\n  // getter and setter\n}\n\npublic class Man extends Person {\n  private Woman wife;\n\n  // getter and setter\n}\n\npublic class Woman extends Person {\n  private Man husband;\n\n  // getter and setter\n}\n```\n\n对于Man、Woman使用继承后，除了代码量的减少我们还能够明显看到他们的关系。\n\n继承所描述的是“is-a”的关系，如果有两个对象A和B,若可以描述为“A是B”，则可以表示A继承B，其中B是被继承者称之为父类或者超类，A是继承者称之为子类或者派生类。实际上，继承者是被继承者的特殊化，它除了拥有被继承者的特性外，还拥有自己独有的特性。例如\n\n\n","source":"_drafts/java基础（三）继承.md","raw":"---\ntitle: java基础（三）继承\nauthor: SnailDev\ntags:\n  - Java基础\ncategories:\n  - Java基础\ndate: 2018-06-03 20:54:28\nfeatured_image: /images/inheritance_1.png\n---\n![inheritance](/images/inheritance_1.png)\n\n上篇随笔我们聊完封装， 知道封装是private + getter and setter, 其目的是为了安全， 也是为了更易于维护，模块化操作。\n\n这篇我们继续聊聊面向对象三大特性中的继承，在《Think in java》中有这样一句话：\n\n> 复用代码是Java众多引人注目的功能之一\n\n但要成为极具革命性的语言，仅仅能够复用代码并加以改变是不够的，它还必须做更多的事情。在这句话中最引人注目的是“复用代码”，尽可能的复用代码是我们程序员一直在追求的，而继承也是面向对象思想中实现复用的重要手段。\n\n我们先看一段代码：\n```java\npublic class Man {\n  private String name;\n  private String sex;\n  private int age;\n  private Woman wife;\n\n  // getter and setter\n}\n\npublic class Woman {\n  private String name;\n  private int age;\n  private String sex;\n  private Man husband;\n\n  // getter and setter\n}\n```\n这里我们可以看出，Man、Woman两个类除了各自的wife、husband外其余部分全部相同，作为一个想最大限度实现复用代码的我们是不能忍受这样重复代码，那么利用继承吧。\n\n首先让我们先离开软件编程的世界，从生活中我们知道男人、女人都是人，而且都有一些共性，比如名字，年龄，性别等等，而且他们能够吃东西、走路、说话等共同的行为，所以我们从这些特征可以发现并抽象出人的属性和行为。**使用继承我们可以使用已存在的类的定义作为基础建立新类，新类的定义可以增加新的数据或新的功能，也可以使用父类的功能，但不能选择性继承。**\n\n修改代码如下：\n```java\npublic class Person {\n  private String name;\n  private int age;\n  private String sex;\n\n  // getter and setter\n}\n\npublic class Man extends Person {\n  private Woman wife;\n\n  // getter and setter\n}\n\npublic class Woman extends Person {\n  private Man husband;\n\n  // getter and setter\n}\n```\n\n对于Man、Woman使用继承后，除了代码量的减少我们还能够明显看到他们的关系。\n\n继承所描述的是“is-a”的关系，如果有两个对象A和B,若可以描述为“A是B”，则可以表示A继承B，其中B是被继承者称之为父类或者超类，A是继承者称之为子类或者派生类。实际上，继承者是被继承者的特殊化，它除了拥有被继承者的特性外，还拥有自己独有的特性。例如\n\n\n","slug":"java基础（三）继承","published":0,"updated":"2018-10-03T01:29:54.974Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmyu0sab000ax8uoxge0rqpc","content":"<p><img src=\"/images/inheritance_1.png\" alt=\"inheritance\"></p><p>上篇随笔我们聊完封装， 知道封装是private + getter and setter, 其目的是为了安全， 也是为了更易于维护，模块化操作。</p><p>这篇我们继续聊聊面向对象三大特性中的继承，在《Think in java》中有这样一句话：</p><blockquote><p>复用代码是Java众多引人注目的功能之一</p></blockquote><p>但要成为极具革命性的语言，仅仅能够复用代码并加以改变是不够的，它还必须做更多的事情。在这句话中最引人注目的是“复用代码”，尽可能的复用代码是我们程序员一直在追求的，而继承也是面向对象思想中实现复用的重要手段。</p><p>我们先看一段代码：</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String sex;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Woman wife;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// getter and setter</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Woman</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String sex;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Man husband;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// getter and setter</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这里我们可以看出，Man、Woman两个类除了各自的wife、husband外其余部分全部相同，作为一个想最大限度实现复用代码的我们是不能忍受这样重复代码，那么利用继承吧。</p><p>首先让我们先离开软件编程的世界，从生活中我们知道男人、女人都是人，而且都有一些共性，比如名字，年龄，性别等等，而且他们能够吃东西、走路、说话等共同的行为，所以我们从这些特征可以发现并抽象出人的属性和行为。<strong>使用继承我们可以使用已存在的类的定义作为基础建立新类，新类的定义可以增加新的数据或新的功能，也可以使用父类的功能，但不能选择性继承。</strong></p><p>修改代码如下：</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String sex;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// getter and setter</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Woman wife;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// getter and setter</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Woman</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Man husband;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// getter and setter</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>对于Man、Woman使用继承后，除了代码量的减少我们还能够明显看到他们的关系。</p><p>继承所描述的是“is-a”的关系，如果有两个对象A和B,若可以描述为“A是B”，则可以表示A继承B，其中B是被继承者称之为父类或者超类，A是继承者称之为子类或者派生类。实际上，继承者是被继承者的特殊化，它除了拥有被继承者的特性外，还拥有自己独有的特性。例如</p>","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/inheritance_1.png\" alt=\"inheritance\"></p><p>上篇随笔我们聊完封装， 知道封装是private + getter and setter, 其目的是为了安全， 也是为了更易于维护，模块化操作。</p><p>这篇我们继续聊聊面向对象三大特性中的继承，在《Think in java》中有这样一句话：</p><blockquote><p>复用代码是Java众多引人注目的功能之一</p></blockquote><p>但要成为极具革命性的语言，仅仅能够复用代码并加以改变是不够的，它还必须做更多的事情。在这句话中最引人注目的是“复用代码”，尽可能的复用代码是我们程序员一直在追求的，而继承也是面向对象思想中实现复用的重要手段。</p><p>我们先看一段代码：</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String sex;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Woman wife;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// getter and setter</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Woman</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String sex;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Man husband;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// getter and setter</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这里我们可以看出，Man、Woman两个类除了各自的wife、husband外其余部分全部相同，作为一个想最大限度实现复用代码的我们是不能忍受这样重复代码，那么利用继承吧。</p><p>首先让我们先离开软件编程的世界，从生活中我们知道男人、女人都是人，而且都有一些共性，比如名字，年龄，性别等等，而且他们能够吃东西、走路、说话等共同的行为，所以我们从这些特征可以发现并抽象出人的属性和行为。<strong>使用继承我们可以使用已存在的类的定义作为基础建立新类，新类的定义可以增加新的数据或新的功能，也可以使用父类的功能，但不能选择性继承。</strong></p><p>修改代码如下：</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String sex;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// getter and setter</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Woman wife;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// getter and setter</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Woman</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Man husband;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// getter and setter</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>对于Man、Woman使用继承后，除了代码量的减少我们还能够明显看到他们的关系。</p><p>继承所描述的是“is-a”的关系，如果有两个对象A和B,若可以描述为“A是B”，则可以表示A继承B，其中B是被继承者称之为父类或者超类，A是继承者称之为子类或者派生类。实际上，继承者是被继承者的特殊化，它除了拥有被继承者的特性外，还拥有自己独有的特性。例如</p>"},{"title":"java基础（一）面向对象","author":"SnailDev","date":"2018-06-01T14:13:32.000Z","featured_image":"/images/object-oriented-programming_1.jpg","_content":"![object-oriented-programming](/images/object-oriented-programming_1.jpg)\n\n面向对象的思想面向过程的思想有着本质的区别的，对于面向过程的思维来说，我们分析解决问题时会将问题拆分成n个步骤，第一步先做什么，第二步再做什么；而对于面向对象的思维来说，**会首先分析问题里面涉及到哪些类和对象，然后再分析这些类和对象应该具有哪些属性和方法，最后分析类与类之间的关系**。\n\n面向对象有一个非常重要的设计思维：合适的方法应该出现在合适的类里面。\n<!-- more -->\n\n# 1. 简单理解面向对象的思想\n面对问题域：\n\n不能\n- ~~考虑解决方案实现，第一步应该干什么，第二步应该干什么...~~\n\n应该\n- 先分析问题解决方案 涉及到的类和对象\n- 然后分析各个类和对象对应的动静态属性\n- 最后分析抽象对象和对象之间的关系\n\n# 2. 面向对象的设计思想\n面向对象的基本思想是，从现实世界中可观存在的事物出发来构造软件系统，并在系统的构造中尽可能运用人类的自然思维方式。\n\n面向对象更加强调运用人类在日常生活的逻辑思维中经常采用的思想方法与原则，如抽象、分类、继承、聚合、多态等。\n\n人在思考的时候，首先眼睛里看到的是一个个对象。\n\n## 2.1 对象和类的概念\n\n对象是用于计算机语言对问题域中事物的描述，对象通过“属性(attribute)”和“方法(method)”来分别对应事物所具有的静态属性和动态属性。\n\n类是用于描述同一类对象的一个抽象的概念，类中定义了这一类对象所具有的静态属性和动态属性。\n\n类可以看成一类对象的模板，对象可以看成该类的一个具体的实例。\n\n举个栗子：\n\n人的定义：能制造工具并能熟练使用工具进行劳动的高等动物。\n\n给人下定义的过程，其实就是把人的相关特性抽象出来，如：\n 1. 能制造工具；\n 2. 能熟练使用工具；\n 3. 高等动物。 \n\n人在这里叫做这一类事物的抽象，在你的脑子里有人的概念，可人的概念在脑子里到底是怎样的？ 首先人是高等动物，那么高等动物这个特征就是人的静态属性，其次，这个高等动物可以 制造工具并熟练使用工具，制造工具和熟练使用工具就是人的动态属性。反应到java的类上，就是一个是成员变量（静态属性），一个是方法（动态属性）。脑子里的人的概念其实是一类事物的抽象，这种抽象的东西我们就叫做类，椅子是类，桌子是类，交通工具也是类，而这一类事物的具体实例就是对象了。\n\n\n## 2.2 如何抽象出一个类\n上文已经说明面向对象的设计思想就是对问题域特征进行抽象，抽象出一些类，那么该如何去做呢？首先需要明确的是，**类具有静态属性和动态属性**，那么反应到java类中的体现就是，**成员变量和方法**。\n\n让我们来看一下职员的抽象：\n\n![object-oriented-programming](/images/object-oriented-programming_2.jpg)\n\n首先分析下，职员有哪些属性？有姓名，年龄，目前薪资等属性；有哪些方法？显示姓名，显示年龄，修改姓名，领取工资。当然，所有的方法其实都可以让别人来做，但**面向对象的设计思想就是方法应该出现在最合适的类里面**，这里显然职员这个类自己最合适。\n\n对于每个对象来说，它都有一些属性（成员变量），只不过对象间的取值不同而已。上图所描述的职员这个类实例化出两个职员，职员A和职员B，他们都有姓名、年龄和目前薪资这些属性，但具体数值却不一样，正因为这些变化，对象和对象之间才能区分开来。\n\n如何区分类和对象？类是一类具有共同特征事物的抽象，而对象就是这个类下面的具体实例了。\n\n## 2.3 类（对象）之间的关系\n### 2.3.1 关联关系\n\n![object-oriented-programming](/images/object-oriented-programming_3.jpg)\n\n类和类之间存在关系的，如学生和老师这两个类，老师可以教学生，学生可以向老师学习，这是他们之间的关系，而关系和关系之间也是不同，你和你老婆的关系和你和你其他女朋友的关系是不能混为一谈的。关系中**最弱**的一种关系就是关联关系了。关联关系反应到程序上往往是一个类的方法里面的参数是另一个类的具体对象，比如教授教学生，教哪个学生，教学是教授这个类的一个方法，某个研究生是研究生这个类里面的一个具体对象，这两个类或者说对象之间有关系，但是不是很紧密的关系。\n\n### 2.3.2 继承关系\n![object-oriented-programming](/images/object-oriented-programming_4.jpg)\n\n对应：一般和特殊\n\n继承关系的前提：XX是一种XX。满足继承的前提就可以称之为继承关系，如游泳运动员是一种运动员，这点是满足的，那么游泳运动员就是从运动员继承过来的，游泳运动员和运动员之间就是一种继承关系。学生是一个人，学生从人继承，老师也是一个人，老师也从人继承，学生是一种老师，这点说不过去，所以学生和老师之间就不存在继承关系，因此做设计的时候分清继承关系很简单，那就是使得“XX是一种XX”说的过去。图中，运动员派生出了不同种类的运动员，包括游泳的，球类的，射击的。球类运动员再派生出足球的，篮球的，排球的，这就是一棵继承树，不过这棵树是比较理想的情况，只有一个根节点。但是实际中，继承关系不一定只从一个类继承，可能从多个类继承，比如说，孩子即继承父亲这个类，也继承母亲这个类。C++正是想封装这种关系，所以它存在多继承。\n\n### 2.3.3 聚合关系\n![object-oriented-programming](/images/object-oriented-programming_5.jpg)\n\n对应：整体和部分\n\n什么是聚合？聚合就是一个整体和部分的关系。我们是“XX是XX的一部分”，只要说的通，他就是聚合关系，队长是球队的一部分，队员也是球队的一部分，因此队长和球队，队员和球队都是聚合关系。脑袋是人的一部分，身体和胳膊也是人的一部分，因此脑袋、身体和胳膊与人都是聚合关系。聚合关系再分细一点就是**聚集关系和组合关系**，比如球队、队长、队员，这三者是聚集关系，假如这个队长既是足球队的队长，也是篮球队的队长，一个人分属两个不同的球队，这是可以的，球队和队长之间没有不可分割的关系，这就是**聚集关系**。而另一种**组合关系**，就是一种不可分割的关系，相对于一个人的脑袋不可能既属于你又属于别人，身体也一样不可能同时属于多个人。\n\n### 2.3.4 实现关系\n![object-oriented-programming](/images/object-oriented-programming_6.jpg)\n\n对于父类（抽象类）或接口来说，我觉得应该具有这样一个方法，但是不知道具体怎么实现，谁去实现，我的子类实现，这就是实现关系。而根据实现不同，具有不同的表现形态，这就是多态。\n\n### 2.3.5 多态\n![object-oriented-programming](/images/object-oriented-programming_7.jpg)\n\n# 3. Java与面向对象\n\n- 对象是Java程序的核心，在Java程序中“万物皆对象”；\n- 对象可以看成是静态属性（成员变量）和动态属性（方法）的封装体；\n- 类是创建同一类型对象的“模板”，在类中定义了一个对象所应具有的成员变量和方法；\n- J2SDK提供了很多类供编程人员使用，编程人员也可以定义自己的类。\n\n对象和类是分不开的，必须首先定义类才能有对象，首先定义方法才能调用。对象是Java里面的核心，做任何东西你首先造出一个对象才能做。静态属性简称属性，也叫成员变量，以后说属性或者说成员变量他们指的都是同一回事。\n\n整个类可以看作是静态的属性还有方法之间的一个综合。怎么抽象出一个类的概念，从两方面入手，一个是静态属性，即具有哪些成员变量，另一个就是动态属性，具有哪些方法。\n\n下面是一段示例代码，可以仔细体会下：\n```Java\npublic class Person {\n    private String name;\n    private String age;\n\n    // 省略getter和setter方法\n\n    public void makeTools(){\n        System.out.println(\"我在制造工具\");\n    }\n\n    public void useTools(){\n        System.out.println(\"我在使用工具\");\n    }\n}\n\npublic class Man extends Person {\n\n}\n\npublic class Woman extends Person {\n    \n}\n```\n\n# 4. 为什么使用面向对象编程？\n面向对象编程就是使用一组对象互相配合通过沟通一起完成特定的功能.做软件苦苦追求的一种境界是可重用性（reusable）,可扩展性。如果是面向过程，一般情况下属性和方法是分开的，没有关系的，这样复用起来很麻烦，而且局限在方法这个层次上，而面向对象则不同，它将属性和方法包装，可以综合起来复用，就是整个对象的复用。所以面向对象和面向过程相比，前者明显更容易让我们达到可重用性。","source":"_posts/java-base-object-oriented.md","raw":"---\ntitle: java基础（一）面向对象\nauthor: SnailDev\ntags:\n  - Java基础\ncategories:\n  - Java基础\ndate: 2018-06-01 22:13:32\nfeatured_image: /images/object-oriented-programming_1.jpg\n---\n![object-oriented-programming](/images/object-oriented-programming_1.jpg)\n\n面向对象的思想面向过程的思想有着本质的区别的，对于面向过程的思维来说，我们分析解决问题时会将问题拆分成n个步骤，第一步先做什么，第二步再做什么；而对于面向对象的思维来说，**会首先分析问题里面涉及到哪些类和对象，然后再分析这些类和对象应该具有哪些属性和方法，最后分析类与类之间的关系**。\n\n面向对象有一个非常重要的设计思维：合适的方法应该出现在合适的类里面。\n<!-- more -->\n\n# 1. 简单理解面向对象的思想\n面对问题域：\n\n不能\n- ~~考虑解决方案实现，第一步应该干什么，第二步应该干什么...~~\n\n应该\n- 先分析问题解决方案 涉及到的类和对象\n- 然后分析各个类和对象对应的动静态属性\n- 最后分析抽象对象和对象之间的关系\n\n# 2. 面向对象的设计思想\n面向对象的基本思想是，从现实世界中可观存在的事物出发来构造软件系统，并在系统的构造中尽可能运用人类的自然思维方式。\n\n面向对象更加强调运用人类在日常生活的逻辑思维中经常采用的思想方法与原则，如抽象、分类、继承、聚合、多态等。\n\n人在思考的时候，首先眼睛里看到的是一个个对象。\n\n## 2.1 对象和类的概念\n\n对象是用于计算机语言对问题域中事物的描述，对象通过“属性(attribute)”和“方法(method)”来分别对应事物所具有的静态属性和动态属性。\n\n类是用于描述同一类对象的一个抽象的概念，类中定义了这一类对象所具有的静态属性和动态属性。\n\n类可以看成一类对象的模板，对象可以看成该类的一个具体的实例。\n\n举个栗子：\n\n人的定义：能制造工具并能熟练使用工具进行劳动的高等动物。\n\n给人下定义的过程，其实就是把人的相关特性抽象出来，如：\n 1. 能制造工具；\n 2. 能熟练使用工具；\n 3. 高等动物。 \n\n人在这里叫做这一类事物的抽象，在你的脑子里有人的概念，可人的概念在脑子里到底是怎样的？ 首先人是高等动物，那么高等动物这个特征就是人的静态属性，其次，这个高等动物可以 制造工具并熟练使用工具，制造工具和熟练使用工具就是人的动态属性。反应到java的类上，就是一个是成员变量（静态属性），一个是方法（动态属性）。脑子里的人的概念其实是一类事物的抽象，这种抽象的东西我们就叫做类，椅子是类，桌子是类，交通工具也是类，而这一类事物的具体实例就是对象了。\n\n\n## 2.2 如何抽象出一个类\n上文已经说明面向对象的设计思想就是对问题域特征进行抽象，抽象出一些类，那么该如何去做呢？首先需要明确的是，**类具有静态属性和动态属性**，那么反应到java类中的体现就是，**成员变量和方法**。\n\n让我们来看一下职员的抽象：\n\n![object-oriented-programming](/images/object-oriented-programming_2.jpg)\n\n首先分析下，职员有哪些属性？有姓名，年龄，目前薪资等属性；有哪些方法？显示姓名，显示年龄，修改姓名，领取工资。当然，所有的方法其实都可以让别人来做，但**面向对象的设计思想就是方法应该出现在最合适的类里面**，这里显然职员这个类自己最合适。\n\n对于每个对象来说，它都有一些属性（成员变量），只不过对象间的取值不同而已。上图所描述的职员这个类实例化出两个职员，职员A和职员B，他们都有姓名、年龄和目前薪资这些属性，但具体数值却不一样，正因为这些变化，对象和对象之间才能区分开来。\n\n如何区分类和对象？类是一类具有共同特征事物的抽象，而对象就是这个类下面的具体实例了。\n\n## 2.3 类（对象）之间的关系\n### 2.3.1 关联关系\n\n![object-oriented-programming](/images/object-oriented-programming_3.jpg)\n\n类和类之间存在关系的，如学生和老师这两个类，老师可以教学生，学生可以向老师学习，这是他们之间的关系，而关系和关系之间也是不同，你和你老婆的关系和你和你其他女朋友的关系是不能混为一谈的。关系中**最弱**的一种关系就是关联关系了。关联关系反应到程序上往往是一个类的方法里面的参数是另一个类的具体对象，比如教授教学生，教哪个学生，教学是教授这个类的一个方法，某个研究生是研究生这个类里面的一个具体对象，这两个类或者说对象之间有关系，但是不是很紧密的关系。\n\n### 2.3.2 继承关系\n![object-oriented-programming](/images/object-oriented-programming_4.jpg)\n\n对应：一般和特殊\n\n继承关系的前提：XX是一种XX。满足继承的前提就可以称之为继承关系，如游泳运动员是一种运动员，这点是满足的，那么游泳运动员就是从运动员继承过来的，游泳运动员和运动员之间就是一种继承关系。学生是一个人，学生从人继承，老师也是一个人，老师也从人继承，学生是一种老师，这点说不过去，所以学生和老师之间就不存在继承关系，因此做设计的时候分清继承关系很简单，那就是使得“XX是一种XX”说的过去。图中，运动员派生出了不同种类的运动员，包括游泳的，球类的，射击的。球类运动员再派生出足球的，篮球的，排球的，这就是一棵继承树，不过这棵树是比较理想的情况，只有一个根节点。但是实际中，继承关系不一定只从一个类继承，可能从多个类继承，比如说，孩子即继承父亲这个类，也继承母亲这个类。C++正是想封装这种关系，所以它存在多继承。\n\n### 2.3.3 聚合关系\n![object-oriented-programming](/images/object-oriented-programming_5.jpg)\n\n对应：整体和部分\n\n什么是聚合？聚合就是一个整体和部分的关系。我们是“XX是XX的一部分”，只要说的通，他就是聚合关系，队长是球队的一部分，队员也是球队的一部分，因此队长和球队，队员和球队都是聚合关系。脑袋是人的一部分，身体和胳膊也是人的一部分，因此脑袋、身体和胳膊与人都是聚合关系。聚合关系再分细一点就是**聚集关系和组合关系**，比如球队、队长、队员，这三者是聚集关系，假如这个队长既是足球队的队长，也是篮球队的队长，一个人分属两个不同的球队，这是可以的，球队和队长之间没有不可分割的关系，这就是**聚集关系**。而另一种**组合关系**，就是一种不可分割的关系，相对于一个人的脑袋不可能既属于你又属于别人，身体也一样不可能同时属于多个人。\n\n### 2.3.4 实现关系\n![object-oriented-programming](/images/object-oriented-programming_6.jpg)\n\n对于父类（抽象类）或接口来说，我觉得应该具有这样一个方法，但是不知道具体怎么实现，谁去实现，我的子类实现，这就是实现关系。而根据实现不同，具有不同的表现形态，这就是多态。\n\n### 2.3.5 多态\n![object-oriented-programming](/images/object-oriented-programming_7.jpg)\n\n# 3. Java与面向对象\n\n- 对象是Java程序的核心，在Java程序中“万物皆对象”；\n- 对象可以看成是静态属性（成员变量）和动态属性（方法）的封装体；\n- 类是创建同一类型对象的“模板”，在类中定义了一个对象所应具有的成员变量和方法；\n- J2SDK提供了很多类供编程人员使用，编程人员也可以定义自己的类。\n\n对象和类是分不开的，必须首先定义类才能有对象，首先定义方法才能调用。对象是Java里面的核心，做任何东西你首先造出一个对象才能做。静态属性简称属性，也叫成员变量，以后说属性或者说成员变量他们指的都是同一回事。\n\n整个类可以看作是静态的属性还有方法之间的一个综合。怎么抽象出一个类的概念，从两方面入手，一个是静态属性，即具有哪些成员变量，另一个就是动态属性，具有哪些方法。\n\n下面是一段示例代码，可以仔细体会下：\n```Java\npublic class Person {\n    private String name;\n    private String age;\n\n    // 省略getter和setter方法\n\n    public void makeTools(){\n        System.out.println(\"我在制造工具\");\n    }\n\n    public void useTools(){\n        System.out.println(\"我在使用工具\");\n    }\n}\n\npublic class Man extends Person {\n\n}\n\npublic class Woman extends Person {\n    \n}\n```\n\n# 4. 为什么使用面向对象编程？\n面向对象编程就是使用一组对象互相配合通过沟通一起完成特定的功能.做软件苦苦追求的一种境界是可重用性（reusable）,可扩展性。如果是面向过程，一般情况下属性和方法是分开的，没有关系的，这样复用起来很麻烦，而且局限在方法这个层次上，而面向对象则不同，它将属性和方法包装，可以综合起来复用，就是整个对象的复用。所以面向对象和面向过程相比，前者明显更容易让我们达到可重用性。","slug":"java-base-object-oriented","published":1,"updated":"2018-10-03T01:36:07.961Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmyu0sai000ex8uob10gelld","content":"<p><img src=\"/images/object-oriented-programming_1.jpg\" alt=\"object-oriented-programming\"></p><p>面向对象的思想面向过程的思想有着本质的区别的，对于面向过程的思维来说，我们分析解决问题时会将问题拆分成n个步骤，第一步先做什么，第二步再做什么；而对于面向对象的思维来说，<strong>会首先分析问题里面涉及到哪些类和对象，然后再分析这些类和对象应该具有哪些属性和方法，最后分析类与类之间的关系</strong>。</p><p>面向对象有一个非常重要的设计思维：合适的方法应该出现在合适的类里面。<a id=\"more\"></a></p><h1 id=\"1-简单理解面向对象的思想\"><a href=\"#1-简单理解面向对象的思想\" class=\"headerlink\" title=\"1. 简单理解面向对象的思想\"></a>1. 简单理解面向对象的思想</h1><p>面对问题域：</p><p>不能</p><ul><li><del>考虑解决方案实现，第一步应该干什么，第二步应该干什么…</del></li></ul><p>应该</p><ul><li>先分析问题解决方案 涉及到的类和对象</li><li>然后分析各个类和对象对应的动静态属性</li><li>最后分析抽象对象和对象之间的关系</li></ul><h1 id=\"2-面向对象的设计思想\"><a href=\"#2-面向对象的设计思想\" class=\"headerlink\" title=\"2. 面向对象的设计思想\"></a>2. 面向对象的设计思想</h1><p>面向对象的基本思想是，从现实世界中可观存在的事物出发来构造软件系统，并在系统的构造中尽可能运用人类的自然思维方式。</p><p>面向对象更加强调运用人类在日常生活的逻辑思维中经常采用的思想方法与原则，如抽象、分类、继承、聚合、多态等。</p><p>人在思考的时候，首先眼睛里看到的是一个个对象。</p><h2 id=\"2-1-对象和类的概念\"><a href=\"#2-1-对象和类的概念\" class=\"headerlink\" title=\"2.1 对象和类的概念\"></a>2.1 对象和类的概念</h2><p>对象是用于计算机语言对问题域中事物的描述，对象通过“属性(attribute)”和“方法(method)”来分别对应事物所具有的静态属性和动态属性。</p><p>类是用于描述同一类对象的一个抽象的概念，类中定义了这一类对象所具有的静态属性和动态属性。</p><p>类可以看成一类对象的模板，对象可以看成该类的一个具体的实例。</p><p>举个栗子：</p><p>人的定义：能制造工具并能熟练使用工具进行劳动的高等动物。</p><p>给人下定义的过程，其实就是把人的相关特性抽象出来，如：</p><ol><li>能制造工具；</li><li>能熟练使用工具；</li><li>高等动物。</li></ol><p>人在这里叫做这一类事物的抽象，在你的脑子里有人的概念，可人的概念在脑子里到底是怎样的？ 首先人是高等动物，那么高等动物这个特征就是人的静态属性，其次，这个高等动物可以 制造工具并熟练使用工具，制造工具和熟练使用工具就是人的动态属性。反应到java的类上，就是一个是成员变量（静态属性），一个是方法（动态属性）。脑子里的人的概念其实是一类事物的抽象，这种抽象的东西我们就叫做类，椅子是类，桌子是类，交通工具也是类，而这一类事物的具体实例就是对象了。</p><h2 id=\"2-2-如何抽象出一个类\"><a href=\"#2-2-如何抽象出一个类\" class=\"headerlink\" title=\"2.2 如何抽象出一个类\"></a>2.2 如何抽象出一个类</h2><p>上文已经说明面向对象的设计思想就是对问题域特征进行抽象，抽象出一些类，那么该如何去做呢？首先需要明确的是，<strong>类具有静态属性和动态属性</strong>，那么反应到java类中的体现就是，<strong>成员变量和方法</strong>。</p><p>让我们来看一下职员的抽象：</p><p><img src=\"/images/object-oriented-programming_2.jpg\" alt=\"object-oriented-programming\"></p><p>首先分析下，职员有哪些属性？有姓名，年龄，目前薪资等属性；有哪些方法？显示姓名，显示年龄，修改姓名，领取工资。当然，所有的方法其实都可以让别人来做，但<strong>面向对象的设计思想就是方法应该出现在最合适的类里面</strong>，这里显然职员这个类自己最合适。</p><p>对于每个对象来说，它都有一些属性（成员变量），只不过对象间的取值不同而已。上图所描述的职员这个类实例化出两个职员，职员A和职员B，他们都有姓名、年龄和目前薪资这些属性，但具体数值却不一样，正因为这些变化，对象和对象之间才能区分开来。</p><p>如何区分类和对象？类是一类具有共同特征事物的抽象，而对象就是这个类下面的具体实例了。</p><h2 id=\"2-3-类（对象）之间的关系\"><a href=\"#2-3-类（对象）之间的关系\" class=\"headerlink\" title=\"2.3 类（对象）之间的关系\"></a>2.3 类（对象）之间的关系</h2><h3 id=\"2-3-1-关联关系\"><a href=\"#2-3-1-关联关系\" class=\"headerlink\" title=\"2.3.1 关联关系\"></a>2.3.1 关联关系</h3><p><img src=\"/images/object-oriented-programming_3.jpg\" alt=\"object-oriented-programming\"></p><p>类和类之间存在关系的，如学生和老师这两个类，老师可以教学生，学生可以向老师学习，这是他们之间的关系，而关系和关系之间也是不同，你和你老婆的关系和你和你其他女朋友的关系是不能混为一谈的。关系中<strong>最弱</strong>的一种关系就是关联关系了。关联关系反应到程序上往往是一个类的方法里面的参数是另一个类的具体对象，比如教授教学生，教哪个学生，教学是教授这个类的一个方法，某个研究生是研究生这个类里面的一个具体对象，这两个类或者说对象之间有关系，但是不是很紧密的关系。</p><h3 id=\"2-3-2-继承关系\"><a href=\"#2-3-2-继承关系\" class=\"headerlink\" title=\"2.3.2 继承关系\"></a>2.3.2 继承关系</h3><p><img src=\"/images/object-oriented-programming_4.jpg\" alt=\"object-oriented-programming\"></p><p>对应：一般和特殊</p><p>继承关系的前提：XX是一种XX。满足继承的前提就可以称之为继承关系，如游泳运动员是一种运动员，这点是满足的，那么游泳运动员就是从运动员继承过来的，游泳运动员和运动员之间就是一种继承关系。学生是一个人，学生从人继承，老师也是一个人，老师也从人继承，学生是一种老师，这点说不过去，所以学生和老师之间就不存在继承关系，因此做设计的时候分清继承关系很简单，那就是使得“XX是一种XX”说的过去。图中，运动员派生出了不同种类的运动员，包括游泳的，球类的，射击的。球类运动员再派生出足球的，篮球的，排球的，这就是一棵继承树，不过这棵树是比较理想的情况，只有一个根节点。但是实际中，继承关系不一定只从一个类继承，可能从多个类继承，比如说，孩子即继承父亲这个类，也继承母亲这个类。C++正是想封装这种关系，所以它存在多继承。</p><h3 id=\"2-3-3-聚合关系\"><a href=\"#2-3-3-聚合关系\" class=\"headerlink\" title=\"2.3.3 聚合关系\"></a>2.3.3 聚合关系</h3><p><img src=\"/images/object-oriented-programming_5.jpg\" alt=\"object-oriented-programming\"></p><p>对应：整体和部分</p><p>什么是聚合？聚合就是一个整体和部分的关系。我们是“XX是XX的一部分”，只要说的通，他就是聚合关系，队长是球队的一部分，队员也是球队的一部分，因此队长和球队，队员和球队都是聚合关系。脑袋是人的一部分，身体和胳膊也是人的一部分，因此脑袋、身体和胳膊与人都是聚合关系。聚合关系再分细一点就是<strong>聚集关系和组合关系</strong>，比如球队、队长、队员，这三者是聚集关系，假如这个队长既是足球队的队长，也是篮球队的队长，一个人分属两个不同的球队，这是可以的，球队和队长之间没有不可分割的关系，这就是<strong>聚集关系</strong>。而另一种<strong>组合关系</strong>，就是一种不可分割的关系，相对于一个人的脑袋不可能既属于你又属于别人，身体也一样不可能同时属于多个人。</p><h3 id=\"2-3-4-实现关系\"><a href=\"#2-3-4-实现关系\" class=\"headerlink\" title=\"2.3.4 实现关系\"></a>2.3.4 实现关系</h3><p><img src=\"/images/object-oriented-programming_6.jpg\" alt=\"object-oriented-programming\"></p><p>对于父类（抽象类）或接口来说，我觉得应该具有这样一个方法，但是不知道具体怎么实现，谁去实现，我的子类实现，这就是实现关系。而根据实现不同，具有不同的表现形态，这就是多态。</p><h3 id=\"2-3-5-多态\"><a href=\"#2-3-5-多态\" class=\"headerlink\" title=\"2.3.5 多态\"></a>2.3.5 多态</h3><p><img src=\"/images/object-oriented-programming_7.jpg\" alt=\"object-oriented-programming\"></p><h1 id=\"3-Java与面向对象\"><a href=\"#3-Java与面向对象\" class=\"headerlink\" title=\"3. Java与面向对象\"></a>3. Java与面向对象</h1><ul><li>对象是Java程序的核心，在Java程序中“万物皆对象”；</li><li>对象可以看成是静态属性（成员变量）和动态属性（方法）的封装体；</li><li>类是创建同一类型对象的“模板”，在类中定义了一个对象所应具有的成员变量和方法；</li><li>J2SDK提供了很多类供编程人员使用，编程人员也可以定义自己的类。</li></ul><p>对象和类是分不开的，必须首先定义类才能有对象，首先定义方法才能调用。对象是Java里面的核心，做任何东西你首先造出一个对象才能做。静态属性简称属性，也叫成员变量，以后说属性或者说成员变量他们指的都是同一回事。</p><p>整个类可以看作是静态的属性还有方法之间的一个综合。怎么抽象出一个类的概念，从两方面入手，一个是静态属性，即具有哪些成员变量，另一个就是动态属性，具有哪些方法。</p><p>下面是一段示例代码，可以仔细体会下：</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 省略getter和setter方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">makeTools</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"我在制造工具\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">useTools</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"我在使用工具\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Woman</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id=\"4-为什么使用面向对象编程？\"><a href=\"#4-为什么使用面向对象编程？\" class=\"headerlink\" title=\"4. 为什么使用面向对象编程？\"></a>4. 为什么使用面向对象编程？</h1><p>面向对象编程就是使用一组对象互相配合通过沟通一起完成特定的功能.做软件苦苦追求的一种境界是可重用性（reusable）,可扩展性。如果是面向过程，一般情况下属性和方法是分开的，没有关系的，这样复用起来很麻烦，而且局限在方法这个层次上，而面向对象则不同，它将属性和方法包装，可以综合起来复用，就是整个对象的复用。所以面向对象和面向过程相比，前者明显更容易让我们达到可重用性。</p>","site":{"data":{}},"excerpt":"<p><img src=\"/images/object-oriented-programming_1.jpg\" alt=\"object-oriented-programming\"></p><p>面向对象的思想面向过程的思想有着本质的区别的，对于面向过程的思维来说，我们分析解决问题时会将问题拆分成n个步骤，第一步先做什么，第二步再做什么；而对于面向对象的思维来说，<strong>会首先分析问题里面涉及到哪些类和对象，然后再分析这些类和对象应该具有哪些属性和方法，最后分析类与类之间的关系</strong>。</p><p>面向对象有一个非常重要的设计思维：合适的方法应该出现在合适的类里面。","more":"</p><h1 id=\"1-简单理解面向对象的思想\"><a href=\"#1-简单理解面向对象的思想\" class=\"headerlink\" title=\"1. 简单理解面向对象的思想\"></a>1. 简单理解面向对象的思想</h1><p>面对问题域：</p><p>不能</p><ul><li><del>考虑解决方案实现，第一步应该干什么，第二步应该干什么…</del></li></ul><p>应该</p><ul><li>先分析问题解决方案 涉及到的类和对象</li><li>然后分析各个类和对象对应的动静态属性</li><li>最后分析抽象对象和对象之间的关系</li></ul><h1 id=\"2-面向对象的设计思想\"><a href=\"#2-面向对象的设计思想\" class=\"headerlink\" title=\"2. 面向对象的设计思想\"></a>2. 面向对象的设计思想</h1><p>面向对象的基本思想是，从现实世界中可观存在的事物出发来构造软件系统，并在系统的构造中尽可能运用人类的自然思维方式。</p><p>面向对象更加强调运用人类在日常生活的逻辑思维中经常采用的思想方法与原则，如抽象、分类、继承、聚合、多态等。</p><p>人在思考的时候，首先眼睛里看到的是一个个对象。</p><h2 id=\"2-1-对象和类的概念\"><a href=\"#2-1-对象和类的概念\" class=\"headerlink\" title=\"2.1 对象和类的概念\"></a>2.1 对象和类的概念</h2><p>对象是用于计算机语言对问题域中事物的描述，对象通过“属性(attribute)”和“方法(method)”来分别对应事物所具有的静态属性和动态属性。</p><p>类是用于描述同一类对象的一个抽象的概念，类中定义了这一类对象所具有的静态属性和动态属性。</p><p>类可以看成一类对象的模板，对象可以看成该类的一个具体的实例。</p><p>举个栗子：</p><p>人的定义：能制造工具并能熟练使用工具进行劳动的高等动物。</p><p>给人下定义的过程，其实就是把人的相关特性抽象出来，如：</p><ol><li>能制造工具；</li><li>能熟练使用工具；</li><li>高等动物。</li></ol><p>人在这里叫做这一类事物的抽象，在你的脑子里有人的概念，可人的概念在脑子里到底是怎样的？ 首先人是高等动物，那么高等动物这个特征就是人的静态属性，其次，这个高等动物可以 制造工具并熟练使用工具，制造工具和熟练使用工具就是人的动态属性。反应到java的类上，就是一个是成员变量（静态属性），一个是方法（动态属性）。脑子里的人的概念其实是一类事物的抽象，这种抽象的东西我们就叫做类，椅子是类，桌子是类，交通工具也是类，而这一类事物的具体实例就是对象了。</p><h2 id=\"2-2-如何抽象出一个类\"><a href=\"#2-2-如何抽象出一个类\" class=\"headerlink\" title=\"2.2 如何抽象出一个类\"></a>2.2 如何抽象出一个类</h2><p>上文已经说明面向对象的设计思想就是对问题域特征进行抽象，抽象出一些类，那么该如何去做呢？首先需要明确的是，<strong>类具有静态属性和动态属性</strong>，那么反应到java类中的体现就是，<strong>成员变量和方法</strong>。</p><p>让我们来看一下职员的抽象：</p><p><img src=\"/images/object-oriented-programming_2.jpg\" alt=\"object-oriented-programming\"></p><p>首先分析下，职员有哪些属性？有姓名，年龄，目前薪资等属性；有哪些方法？显示姓名，显示年龄，修改姓名，领取工资。当然，所有的方法其实都可以让别人来做，但<strong>面向对象的设计思想就是方法应该出现在最合适的类里面</strong>，这里显然职员这个类自己最合适。</p><p>对于每个对象来说，它都有一些属性（成员变量），只不过对象间的取值不同而已。上图所描述的职员这个类实例化出两个职员，职员A和职员B，他们都有姓名、年龄和目前薪资这些属性，但具体数值却不一样，正因为这些变化，对象和对象之间才能区分开来。</p><p>如何区分类和对象？类是一类具有共同特征事物的抽象，而对象就是这个类下面的具体实例了。</p><h2 id=\"2-3-类（对象）之间的关系\"><a href=\"#2-3-类（对象）之间的关系\" class=\"headerlink\" title=\"2.3 类（对象）之间的关系\"></a>2.3 类（对象）之间的关系</h2><h3 id=\"2-3-1-关联关系\"><a href=\"#2-3-1-关联关系\" class=\"headerlink\" title=\"2.3.1 关联关系\"></a>2.3.1 关联关系</h3><p><img src=\"/images/object-oriented-programming_3.jpg\" alt=\"object-oriented-programming\"></p><p>类和类之间存在关系的，如学生和老师这两个类，老师可以教学生，学生可以向老师学习，这是他们之间的关系，而关系和关系之间也是不同，你和你老婆的关系和你和你其他女朋友的关系是不能混为一谈的。关系中<strong>最弱</strong>的一种关系就是关联关系了。关联关系反应到程序上往往是一个类的方法里面的参数是另一个类的具体对象，比如教授教学生，教哪个学生，教学是教授这个类的一个方法，某个研究生是研究生这个类里面的一个具体对象，这两个类或者说对象之间有关系，但是不是很紧密的关系。</p><h3 id=\"2-3-2-继承关系\"><a href=\"#2-3-2-继承关系\" class=\"headerlink\" title=\"2.3.2 继承关系\"></a>2.3.2 继承关系</h3><p><img src=\"/images/object-oriented-programming_4.jpg\" alt=\"object-oriented-programming\"></p><p>对应：一般和特殊</p><p>继承关系的前提：XX是一种XX。满足继承的前提就可以称之为继承关系，如游泳运动员是一种运动员，这点是满足的，那么游泳运动员就是从运动员继承过来的，游泳运动员和运动员之间就是一种继承关系。学生是一个人，学生从人继承，老师也是一个人，老师也从人继承，学生是一种老师，这点说不过去，所以学生和老师之间就不存在继承关系，因此做设计的时候分清继承关系很简单，那就是使得“XX是一种XX”说的过去。图中，运动员派生出了不同种类的运动员，包括游泳的，球类的，射击的。球类运动员再派生出足球的，篮球的，排球的，这就是一棵继承树，不过这棵树是比较理想的情况，只有一个根节点。但是实际中，继承关系不一定只从一个类继承，可能从多个类继承，比如说，孩子即继承父亲这个类，也继承母亲这个类。C++正是想封装这种关系，所以它存在多继承。</p><h3 id=\"2-3-3-聚合关系\"><a href=\"#2-3-3-聚合关系\" class=\"headerlink\" title=\"2.3.3 聚合关系\"></a>2.3.3 聚合关系</h3><p><img src=\"/images/object-oriented-programming_5.jpg\" alt=\"object-oriented-programming\"></p><p>对应：整体和部分</p><p>什么是聚合？聚合就是一个整体和部分的关系。我们是“XX是XX的一部分”，只要说的通，他就是聚合关系，队长是球队的一部分，队员也是球队的一部分，因此队长和球队，队员和球队都是聚合关系。脑袋是人的一部分，身体和胳膊也是人的一部分，因此脑袋、身体和胳膊与人都是聚合关系。聚合关系再分细一点就是<strong>聚集关系和组合关系</strong>，比如球队、队长、队员，这三者是聚集关系，假如这个队长既是足球队的队长，也是篮球队的队长，一个人分属两个不同的球队，这是可以的，球队和队长之间没有不可分割的关系，这就是<strong>聚集关系</strong>。而另一种<strong>组合关系</strong>，就是一种不可分割的关系，相对于一个人的脑袋不可能既属于你又属于别人，身体也一样不可能同时属于多个人。</p><h3 id=\"2-3-4-实现关系\"><a href=\"#2-3-4-实现关系\" class=\"headerlink\" title=\"2.3.4 实现关系\"></a>2.3.4 实现关系</h3><p><img src=\"/images/object-oriented-programming_6.jpg\" alt=\"object-oriented-programming\"></p><p>对于父类（抽象类）或接口来说，我觉得应该具有这样一个方法，但是不知道具体怎么实现，谁去实现，我的子类实现，这就是实现关系。而根据实现不同，具有不同的表现形态，这就是多态。</p><h3 id=\"2-3-5-多态\"><a href=\"#2-3-5-多态\" class=\"headerlink\" title=\"2.3.5 多态\"></a>2.3.5 多态</h3><p><img src=\"/images/object-oriented-programming_7.jpg\" alt=\"object-oriented-programming\"></p><h1 id=\"3-Java与面向对象\"><a href=\"#3-Java与面向对象\" class=\"headerlink\" title=\"3. Java与面向对象\"></a>3. Java与面向对象</h1><ul><li>对象是Java程序的核心，在Java程序中“万物皆对象”；</li><li>对象可以看成是静态属性（成员变量）和动态属性（方法）的封装体；</li><li>类是创建同一类型对象的“模板”，在类中定义了一个对象所应具有的成员变量和方法；</li><li>J2SDK提供了很多类供编程人员使用，编程人员也可以定义自己的类。</li></ul><p>对象和类是分不开的，必须首先定义类才能有对象，首先定义方法才能调用。对象是Java里面的核心，做任何东西你首先造出一个对象才能做。静态属性简称属性，也叫成员变量，以后说属性或者说成员变量他们指的都是同一回事。</p><p>整个类可以看作是静态的属性还有方法之间的一个综合。怎么抽象出一个类的概念，从两方面入手，一个是静态属性，即具有哪些成员变量，另一个就是动态属性，具有哪些方法。</p><p>下面是一段示例代码，可以仔细体会下：</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 省略getter和setter方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">makeTools</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"我在制造工具\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">useTools</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"我在使用工具\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Woman</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id=\"4-为什么使用面向对象编程？\"><a href=\"#4-为什么使用面向对象编程？\" class=\"headerlink\" title=\"4. 为什么使用面向对象编程？\"></a>4. 为什么使用面向对象编程？</h1><p>面向对象编程就是使用一组对象互相配合通过沟通一起完成特定的功能.做软件苦苦追求的一种境界是可重用性（reusable）,可扩展性。如果是面向过程，一般情况下属性和方法是分开的，没有关系的，这样复用起来很麻烦，而且局限在方法这个层次上，而面向对象则不同，它将属性和方法包装，可以综合起来复用，就是整个对象的复用。所以面向对象和面向过程相比，前者明显更容易让我们达到可重用性。</p>"},{"title":"高性能js库Lodash","author":"SnailDev","date":"2018-05-08T03:09:00.000Z","featured_image":"/images/lodash_0.jpg","_content":"![timg](/images/lodash_0.jpg)\n\n\n有几年开发经验的工程师，往往都会有自己的一套工具库，称为utils、helpers等等，这套库一方面是自己的技术积累，另一方面也是对某项技术的扩展，领先于技术规范的制订和实现。\nLodash就是这样的一套工具库，它内部封装了诸多对字符串、数组、对象等常见数据类型的处理函数，其中部分是目前ECMAScript尚未制订的规范，但同时被业界所认可的辅助函数。而且每天使用npm安装Lodash的数量在百万级以上，这在一定程度上证明了其代码的健壮性，值得我们在项目中一试。\n<!-- more -->\n\n## 1. 模块组成\n\n- Lodash听得辅助函数主要分为以下几类，函数列表和用法实力请查看Lodash的官方文档：\n- Array， 适合于数组类型，比如填充数据、查找元素、数组分片等操作\n- Collocation， 适用于数组和对象类型，部分适用于字符串，比如分组、查找、过滤等操作\n- Function， 适用于函数类型，比如节流、延迟、缓存、设置钩子等操作\n- Lang， 普遍适用于各种类型，常用于执行类型判断和类型转换\n- Math， 使用与数值类型，常用于执行数学运算\n- Number， 适用于生成随机数，比较数值与数值区间的关系\n- Object， 适用于对象类型，常用于对象的创建、扩展、类型转换、检索、集合等操作\n- Seq， 常用于创建链式调用，提高执行性能（惰性计算）\n- String， 适用于字符串类型\n- lodash/fp 模块提供了更接近函数式编程的开发方法，其内部的函数经过包装，具有immutable、auto-curried、iteratee-first、data-last（官方介绍）等特点。\n- Fixed Arity，固化参数个数，便于柯里化\n- Rearragned Arguments， 重新调整参数位置，便于函数之间的聚合\n- Capped Iteratee Argument， 封装Iteratee参数\n\n## 1. 性能\n在 Filip Zawada的文章[《How to Speed Up Lo-Dash ×100? Introducing Lazy Evaluation》](https://link.jianshu.com/?t=http://filimanjaro.com/blog/2014/introducing-lazy-evaluation/)中提到了Lodash提高执行速度的思路，主要有三点： Lazy Evaluation、Pipelining和Deferred Execution。下面两张图来自Filip的博客：\n\n![976007-20180123132259975-836139498](/images/lodash_1.gif)\n\n假设有如上图所示的问题： 从若干个求中取出三个面值小于10的球。第一步是从所有的求中取出所有面值小于10的球，第二部是从上一步的结果中去三个球。\n\n![976007-20180123132320240-161059187](/images/lodash_2.gif)\n\n上图是另一个解决方案，如果一个球能够通过第一步，那么就继续执行第二步，直至结束然后测试下一个球。。。当我们取到三个球之后就中断整个循环。Filip称这是Lazy Evaluation Algorithm， 就个人理解这并不全面，他后续提到的Pipelining（管道计算），再加上一个中断循环执行的算法应该更符合这里的图示。\n\n此外，使用Lodash的链式调用时，只有现实或隐式调用 .value 方法才会对链式调用的整个操作进行取值，这种不在声明时立即求值，而在使用时进行求职的方式，是Lazy Evaluation最大的特点。\n\n## 3. 九个实例\n收益于Lodash的普及程度，使用它可以提高很多人开发时于都代码的效率，减少彼此之间的误解（Loss of Consciousness）。在[《Lodash: 10 Javascript Utility Functions That You Should Probably Stop Rewriting》](https://link.jianshu.com/?t=http://colintoh.com/blog/lodash-10-javascript-utility-functions-stop-rewriting)一文中，作者列举了多个常用的Lodash函数，实例演示了使用Lodash的技巧。\n\n1. N次循环\n\n```javascript\n// 1. Basic for loop.\nfor(var i = 0; i < 5; i++){\n    //...\n}\n\n// 2. Using Array's join and split methods\nArray.apply(null, Array(5)).forEach(function(){\n    //...\n});\n\n// Lodash\n_.times(5, function(){\n    //...\n}); \n```\nfor 语句是执行虚幻的不二选择，Array.apply也可以模拟循环，但在上面代码的使用场景下，_.tiems()的解决方法更加简洁和易于理解。\n\n2. 深层查找属性值\n```javascript\n// Fetch the name of the first pet from each owner\nvar ownerArr = [{\n    \"owner\": \"Colin\",\n    \"pets\": [{\"name\": \"dog1\"}, {\"name\": \"dog2\"}]\n}, {\n    \"owner\": \"John\",\n    \"pets\": [{\"name\": \"dog3\"}, {\"name\": \"dog4\"}]\n}];\n\n// Array's map method.\nownerArr.map(function(owner){\n    return owner.pets[0].name;\n});\n\n// Lodash\n_.map(ownerArr, \"pets[0].name\");\n```\n_.map 方法是对原生 map 方法的改进，其中使用 pets[0].name 字符串对嵌套数据取值的方式简化了很多冗余的代码，非常类似使用jQuery选择DOM节点 ul>li>a , 对于前端开发者来说有种久违的亲切感。\n\n3. 个性化数组\n```javascript\n// Array's map method.\nArray.apply(null, Array(6)).map(function(item, index){\n    return \"ball_\" + index; \n});\n\n// Lodash\n_.times(6, _.uniqueId.bind(null, 'ball_'));\n\n// Lodash\n_.times(6, _.partial(_.uniqueId, 'ball_'));\n// eg. [ball_0, ball_1, ball_2, ball_3, ball_4, ball_6]\n```\n在上面的代码中，我们要创建一个初始值不同、长度为6的数组，其中 _.uniqueId 方法用于生成独一无二的标示符（递增的数字，在程序运行期间保持独一无二）， _.partial 方法是对 bind 的封装。\n\n4. 深拷贝\n```javascript\nvar objA = {\n    \"name\": \"colin\"\n}\n\n// 常用的方法一般会比较长，循环对象等\n// http://stackoverflow.com/questions/4459928/how-to-deep-clone-in-javascript\n\n// Lodash\nvar objB = _.cloneDeep(objA);\nobjB === objA // false\n```\nJavaScript 没有直接提供深拷贝的函数，但是我们可以用其他杉树来模拟，比如 JSON.parse(JSON.stringify(objectToClone)), 但这种方法要求对象中的属性值不能是函数。Lodash 中的 _.cloneDeep 函数封装了深拷贝的逻辑，用起来更加简洁。\n\n5. 随机数\n```javascript\n// Native utility method\nfunction getRandomNumber(min, max){\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\ngetRandomNumber(15, 20);\n\n// Lodash\n_.random(15, 20);\n```\nLodash 的随机数生成函数更贴近实际开发，ECMAScript 的随机数生成函数式底层必备的接口，两者都不可获取。此外，使用 _.random(15, 20, true) 还可以在15到20之间生成随机的浮点数。\n\n6. 对象扩展\n```javascript\n// Adding extend function to Object.prototype\nObject.prototype.extend = function(obj) {\n    for (var i in obj) {\n        if (obj.hasOwnProperty(i)) {\n            this[i] = obj[i];\n        }\n    }\n};\n\nvar objA = {\"name\": \"colin\", \"car\": \"suzuki\"};\nvar objB = {\"name\": \"james\", \"age\": 17};\n\nobjA.extend(objB);\nobjA; // {\"name\": \"james\", \"age\": 17, \"car\": \"suzuki\"};\n\n// Lodash\n_.assign(objA, ojbB);\n```\n_.assign 是浅拷贝， 和ES6新增的 Object.assign 函数功能一致（建议优先使用Object.assign）。\n\n7. 筛选属性\n```javascript\n// Native method: Remove an array of keys from object\nObject.prototype.remove = function(arr) {\n    var that = this;\n    arr.forEach(function(key){\n        delete(this[key]);\n    });\n};\n\nvar objA = {\"name\": \"colin\", \"car\": \"suzuki\", \"age\": 17};\n\nobjA.remove(['car', 'age']);\nobjA; // {\"name\": \"colin\"}\n\n// Lodash\nobjA = _.omit(objA, ['car', 'age']);\n// => {\"name\": \"colin\"}\n\nobjA = _.omit(objA, \"car\");\n// => {\"name\": \"colin\", \"age\": 17}\n\nobjA = _.omit(objA, _.isNumber);\n// => {\"name\": \"colin\", \"car\": \"suzuki\"};\n```\n大多数情况下，Lodash所提供的辅助函数都会比原声的函数更贴近开发需求。在上面的代码中，开发者可以使用数组、字符串以及函数的方式筛选对象的属性，并且最终会返回一个新的对象，中间执行筛选时不会对旧对象产生影响。\n```javascript\n// Native method: Returning a new object with selected properties\nObject.prototype.pick = function(arr) {\n    var _this = this;\n    var obj = {};\n    arr.forEach(function(){\n        obj[key] = _this[key];\n    });\n    \n    return obj;\n};\n\nvar objA = {\"name\": \"colin\", \"car\": \"suzuki\", \"age\": 17};\n\nvar objB = objA.pick(['car', 'age']);\n// => {\"car\": \"suzuki\", \"age\": 17}\n\n// Lodash\nvar objB = _.pick(objA, ['car', 'age']);\n// => {\"car\": \"suzuki\", \"age\":17}\n```\n_.pick 是 _.omit 的相反操作，用于从其他对象中挑选属性生成新的对象。\n\n8. 随机元素\n```javascript\nvar luckDraw = [\"Colin\", \"John\", \"James\", \"Lily\", \"Mary\"];\n\nfunction pickRandomPerson(luckyDraw){\n    var index = Math.floor(Math.random() * (luckyDraw.length - 1));\n    return luckyDraw[index];\n}\n\npickRandomPerson(luckyDraw); //John\n\n// Lodash\n_.sample(luckyDraw); // Colin\n\n// Lodash - Getting 2 random item\n_.sample(luckyDraw, 2); // ['John', 'Lily']\n```\n_.sample 支持随机挑选多个元素并返回新的数组。\n\n9. 针对 JSON.parse 的错误处理\n```javascript\n// Using try-catch to handle the JSON.parse error\nfunction parse(str){\n    try {\n        return JSON.parse(str);\n    }\n    \n    catch(e) {\n        return false;\n    }\n}\n\n// With Lodash\nfunction parseLodash(str){\n    return _.attempt(JSON.parse.bind(null, str));\n}\n\nparse('a');\n// => false\nparseLodash('a');\n// => Return an error object\n\nparse('{\"name\": \"colin\"}');\n// => Return {\"name\": \"colin\"}\nparseLodash('{\"name\": \"colin\"}');\n// => Return {\"name\": \"colin\"}\n```\n如果你在使用 JSON.parse 时没有预置错误处理，那么它很有可能会成为一个定时炸弹，我们不应该默认接收的JSON对象都是有效的。 try-catch 是常见的错误处理方式，如果项目中使用Lodash，那么可以使用 _.attmpt 替代 try-catch 的方式，当解析JSON出错时，该方法会返回一个 Error 对象。\n\n> 随着ES6的普及，Lodash的功能或多或少会被原生功能所替代，所以使用时还需要进一步甄别，建议优先使用原生函数，有关ES6替代Lodash的部分，请参考文章[《10 个可用 ES6 替代的 Lodash 特性》](https://link.jianshu.com/?t=http://www.zcfy.cc/article/10-lodash-features-you-can-replace-with-es6-467.html)。\n\n其中有两处分别值得一看：\n```javascript\n// 使用箭头函数创建可复用的路径\nconst object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n\n[\n    obj => obj.a[0].b.c,\n    obj => ojb.a[1]\n].map(path => path(object));\n\n// 使用箭头函数编写链式调用\nconst pipe = function => data => {\n    return functions.reduce(\n        (value, func) => func(value),\n        data\n    );\n};\n\nconst pipeline = pipe([\n    x => x * 2,\n    x => x / 3,\n    x => x > 5,\n    b => !b\n]);\n\npipeline(5);\n// true\npipeline(20);\n// false\n```\n在ES6中，如果一个函数只接收一个形参且函数提示一个 return 语句， 就可以使用箭头函数简化为：\n```javascript\nconst func = p => v;\n\n// 类似于（不完全相同）\nconst func = function(p) {\n    return v;\n}\n```\n当有多重嵌套时，可以简化为：\n```javascript\nconst func = a => b => c => a + b + c;\nfunc(1)(2)(3);\n// => 6\n\n// 类似于\nconst func = function (a) {\n    return function (b) {\n        return function (c) {\n            return a + b + c;\n        }\n    }\n}\n```","source":"_posts/javascript-library-lodash.md","raw":"---\ntitle: 高性能js库Lodash\nauthor: SnailDev\ntags:\n  - JavaScript\ncategories:\n  - JavaScript\ndate: 2018-05-08 11:09:00\nfeatured_image: /images/lodash_0.jpg\n---\n![timg](/images/lodash_0.jpg)\n\n\n有几年开发经验的工程师，往往都会有自己的一套工具库，称为utils、helpers等等，这套库一方面是自己的技术积累，另一方面也是对某项技术的扩展，领先于技术规范的制订和实现。\nLodash就是这样的一套工具库，它内部封装了诸多对字符串、数组、对象等常见数据类型的处理函数，其中部分是目前ECMAScript尚未制订的规范，但同时被业界所认可的辅助函数。而且每天使用npm安装Lodash的数量在百万级以上，这在一定程度上证明了其代码的健壮性，值得我们在项目中一试。\n<!-- more -->\n\n## 1. 模块组成\n\n- Lodash听得辅助函数主要分为以下几类，函数列表和用法实力请查看Lodash的官方文档：\n- Array， 适合于数组类型，比如填充数据、查找元素、数组分片等操作\n- Collocation， 适用于数组和对象类型，部分适用于字符串，比如分组、查找、过滤等操作\n- Function， 适用于函数类型，比如节流、延迟、缓存、设置钩子等操作\n- Lang， 普遍适用于各种类型，常用于执行类型判断和类型转换\n- Math， 使用与数值类型，常用于执行数学运算\n- Number， 适用于生成随机数，比较数值与数值区间的关系\n- Object， 适用于对象类型，常用于对象的创建、扩展、类型转换、检索、集合等操作\n- Seq， 常用于创建链式调用，提高执行性能（惰性计算）\n- String， 适用于字符串类型\n- lodash/fp 模块提供了更接近函数式编程的开发方法，其内部的函数经过包装，具有immutable、auto-curried、iteratee-first、data-last（官方介绍）等特点。\n- Fixed Arity，固化参数个数，便于柯里化\n- Rearragned Arguments， 重新调整参数位置，便于函数之间的聚合\n- Capped Iteratee Argument， 封装Iteratee参数\n\n## 1. 性能\n在 Filip Zawada的文章[《How to Speed Up Lo-Dash ×100? Introducing Lazy Evaluation》](https://link.jianshu.com/?t=http://filimanjaro.com/blog/2014/introducing-lazy-evaluation/)中提到了Lodash提高执行速度的思路，主要有三点： Lazy Evaluation、Pipelining和Deferred Execution。下面两张图来自Filip的博客：\n\n![976007-20180123132259975-836139498](/images/lodash_1.gif)\n\n假设有如上图所示的问题： 从若干个求中取出三个面值小于10的球。第一步是从所有的求中取出所有面值小于10的球，第二部是从上一步的结果中去三个球。\n\n![976007-20180123132320240-161059187](/images/lodash_2.gif)\n\n上图是另一个解决方案，如果一个球能够通过第一步，那么就继续执行第二步，直至结束然后测试下一个球。。。当我们取到三个球之后就中断整个循环。Filip称这是Lazy Evaluation Algorithm， 就个人理解这并不全面，他后续提到的Pipelining（管道计算），再加上一个中断循环执行的算法应该更符合这里的图示。\n\n此外，使用Lodash的链式调用时，只有现实或隐式调用 .value 方法才会对链式调用的整个操作进行取值，这种不在声明时立即求值，而在使用时进行求职的方式，是Lazy Evaluation最大的特点。\n\n## 3. 九个实例\n收益于Lodash的普及程度，使用它可以提高很多人开发时于都代码的效率，减少彼此之间的误解（Loss of Consciousness）。在[《Lodash: 10 Javascript Utility Functions That You Should Probably Stop Rewriting》](https://link.jianshu.com/?t=http://colintoh.com/blog/lodash-10-javascript-utility-functions-stop-rewriting)一文中，作者列举了多个常用的Lodash函数，实例演示了使用Lodash的技巧。\n\n1. N次循环\n\n```javascript\n// 1. Basic for loop.\nfor(var i = 0; i < 5; i++){\n    //...\n}\n\n// 2. Using Array's join and split methods\nArray.apply(null, Array(5)).forEach(function(){\n    //...\n});\n\n// Lodash\n_.times(5, function(){\n    //...\n}); \n```\nfor 语句是执行虚幻的不二选择，Array.apply也可以模拟循环，但在上面代码的使用场景下，_.tiems()的解决方法更加简洁和易于理解。\n\n2. 深层查找属性值\n```javascript\n// Fetch the name of the first pet from each owner\nvar ownerArr = [{\n    \"owner\": \"Colin\",\n    \"pets\": [{\"name\": \"dog1\"}, {\"name\": \"dog2\"}]\n}, {\n    \"owner\": \"John\",\n    \"pets\": [{\"name\": \"dog3\"}, {\"name\": \"dog4\"}]\n}];\n\n// Array's map method.\nownerArr.map(function(owner){\n    return owner.pets[0].name;\n});\n\n// Lodash\n_.map(ownerArr, \"pets[0].name\");\n```\n_.map 方法是对原生 map 方法的改进，其中使用 pets[0].name 字符串对嵌套数据取值的方式简化了很多冗余的代码，非常类似使用jQuery选择DOM节点 ul>li>a , 对于前端开发者来说有种久违的亲切感。\n\n3. 个性化数组\n```javascript\n// Array's map method.\nArray.apply(null, Array(6)).map(function(item, index){\n    return \"ball_\" + index; \n});\n\n// Lodash\n_.times(6, _.uniqueId.bind(null, 'ball_'));\n\n// Lodash\n_.times(6, _.partial(_.uniqueId, 'ball_'));\n// eg. [ball_0, ball_1, ball_2, ball_3, ball_4, ball_6]\n```\n在上面的代码中，我们要创建一个初始值不同、长度为6的数组，其中 _.uniqueId 方法用于生成独一无二的标示符（递增的数字，在程序运行期间保持独一无二）， _.partial 方法是对 bind 的封装。\n\n4. 深拷贝\n```javascript\nvar objA = {\n    \"name\": \"colin\"\n}\n\n// 常用的方法一般会比较长，循环对象等\n// http://stackoverflow.com/questions/4459928/how-to-deep-clone-in-javascript\n\n// Lodash\nvar objB = _.cloneDeep(objA);\nobjB === objA // false\n```\nJavaScript 没有直接提供深拷贝的函数，但是我们可以用其他杉树来模拟，比如 JSON.parse(JSON.stringify(objectToClone)), 但这种方法要求对象中的属性值不能是函数。Lodash 中的 _.cloneDeep 函数封装了深拷贝的逻辑，用起来更加简洁。\n\n5. 随机数\n```javascript\n// Native utility method\nfunction getRandomNumber(min, max){\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\ngetRandomNumber(15, 20);\n\n// Lodash\n_.random(15, 20);\n```\nLodash 的随机数生成函数更贴近实际开发，ECMAScript 的随机数生成函数式底层必备的接口，两者都不可获取。此外，使用 _.random(15, 20, true) 还可以在15到20之间生成随机的浮点数。\n\n6. 对象扩展\n```javascript\n// Adding extend function to Object.prototype\nObject.prototype.extend = function(obj) {\n    for (var i in obj) {\n        if (obj.hasOwnProperty(i)) {\n            this[i] = obj[i];\n        }\n    }\n};\n\nvar objA = {\"name\": \"colin\", \"car\": \"suzuki\"};\nvar objB = {\"name\": \"james\", \"age\": 17};\n\nobjA.extend(objB);\nobjA; // {\"name\": \"james\", \"age\": 17, \"car\": \"suzuki\"};\n\n// Lodash\n_.assign(objA, ojbB);\n```\n_.assign 是浅拷贝， 和ES6新增的 Object.assign 函数功能一致（建议优先使用Object.assign）。\n\n7. 筛选属性\n```javascript\n// Native method: Remove an array of keys from object\nObject.prototype.remove = function(arr) {\n    var that = this;\n    arr.forEach(function(key){\n        delete(this[key]);\n    });\n};\n\nvar objA = {\"name\": \"colin\", \"car\": \"suzuki\", \"age\": 17};\n\nobjA.remove(['car', 'age']);\nobjA; // {\"name\": \"colin\"}\n\n// Lodash\nobjA = _.omit(objA, ['car', 'age']);\n// => {\"name\": \"colin\"}\n\nobjA = _.omit(objA, \"car\");\n// => {\"name\": \"colin\", \"age\": 17}\n\nobjA = _.omit(objA, _.isNumber);\n// => {\"name\": \"colin\", \"car\": \"suzuki\"};\n```\n大多数情况下，Lodash所提供的辅助函数都会比原声的函数更贴近开发需求。在上面的代码中，开发者可以使用数组、字符串以及函数的方式筛选对象的属性，并且最终会返回一个新的对象，中间执行筛选时不会对旧对象产生影响。\n```javascript\n// Native method: Returning a new object with selected properties\nObject.prototype.pick = function(arr) {\n    var _this = this;\n    var obj = {};\n    arr.forEach(function(){\n        obj[key] = _this[key];\n    });\n    \n    return obj;\n};\n\nvar objA = {\"name\": \"colin\", \"car\": \"suzuki\", \"age\": 17};\n\nvar objB = objA.pick(['car', 'age']);\n// => {\"car\": \"suzuki\", \"age\": 17}\n\n// Lodash\nvar objB = _.pick(objA, ['car', 'age']);\n// => {\"car\": \"suzuki\", \"age\":17}\n```\n_.pick 是 _.omit 的相反操作，用于从其他对象中挑选属性生成新的对象。\n\n8. 随机元素\n```javascript\nvar luckDraw = [\"Colin\", \"John\", \"James\", \"Lily\", \"Mary\"];\n\nfunction pickRandomPerson(luckyDraw){\n    var index = Math.floor(Math.random() * (luckyDraw.length - 1));\n    return luckyDraw[index];\n}\n\npickRandomPerson(luckyDraw); //John\n\n// Lodash\n_.sample(luckyDraw); // Colin\n\n// Lodash - Getting 2 random item\n_.sample(luckyDraw, 2); // ['John', 'Lily']\n```\n_.sample 支持随机挑选多个元素并返回新的数组。\n\n9. 针对 JSON.parse 的错误处理\n```javascript\n// Using try-catch to handle the JSON.parse error\nfunction parse(str){\n    try {\n        return JSON.parse(str);\n    }\n    \n    catch(e) {\n        return false;\n    }\n}\n\n// With Lodash\nfunction parseLodash(str){\n    return _.attempt(JSON.parse.bind(null, str));\n}\n\nparse('a');\n// => false\nparseLodash('a');\n// => Return an error object\n\nparse('{\"name\": \"colin\"}');\n// => Return {\"name\": \"colin\"}\nparseLodash('{\"name\": \"colin\"}');\n// => Return {\"name\": \"colin\"}\n```\n如果你在使用 JSON.parse 时没有预置错误处理，那么它很有可能会成为一个定时炸弹，我们不应该默认接收的JSON对象都是有效的。 try-catch 是常见的错误处理方式，如果项目中使用Lodash，那么可以使用 _.attmpt 替代 try-catch 的方式，当解析JSON出错时，该方法会返回一个 Error 对象。\n\n> 随着ES6的普及，Lodash的功能或多或少会被原生功能所替代，所以使用时还需要进一步甄别，建议优先使用原生函数，有关ES6替代Lodash的部分，请参考文章[《10 个可用 ES6 替代的 Lodash 特性》](https://link.jianshu.com/?t=http://www.zcfy.cc/article/10-lodash-features-you-can-replace-with-es6-467.html)。\n\n其中有两处分别值得一看：\n```javascript\n// 使用箭头函数创建可复用的路径\nconst object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n\n[\n    obj => obj.a[0].b.c,\n    obj => ojb.a[1]\n].map(path => path(object));\n\n// 使用箭头函数编写链式调用\nconst pipe = function => data => {\n    return functions.reduce(\n        (value, func) => func(value),\n        data\n    );\n};\n\nconst pipeline = pipe([\n    x => x * 2,\n    x => x / 3,\n    x => x > 5,\n    b => !b\n]);\n\npipeline(5);\n// true\npipeline(20);\n// false\n```\n在ES6中，如果一个函数只接收一个形参且函数提示一个 return 语句， 就可以使用箭头函数简化为：\n```javascript\nconst func = p => v;\n\n// 类似于（不完全相同）\nconst func = function(p) {\n    return v;\n}\n```\n当有多重嵌套时，可以简化为：\n```javascript\nconst func = a => b => c => a + b + c;\nfunc(1)(2)(3);\n// => 6\n\n// 类似于\nconst func = function (a) {\n    return function (b) {\n        return function (c) {\n            return a + b + c;\n        }\n    }\n}\n```","slug":"javascript-library-lodash","published":1,"updated":"2018-10-03T01:39:08.990Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmyu0sao000gx8uo398zqwt8","content":"<p><img src=\"/images/lodash_0.jpg\" alt=\"timg\"></p><p>有几年开发经验的工程师，往往都会有自己的一套工具库，称为utils、helpers等等，这套库一方面是自己的技术积累，另一方面也是对某项技术的扩展，领先于技术规范的制订和实现。 Lodash就是这样的一套工具库，它内部封装了诸多对字符串、数组、对象等常见数据类型的处理函数，其中部分是目前ECMAScript尚未制订的规范，但同时被业界所认可的辅助函数。而且每天使用npm安装Lodash的数量在百万级以上，这在一定程度上证明了其代码的健壮性，值得我们在项目中一试。<a id=\"more\"></a></p><h2 id=\"1-模块组成\"><a href=\"#1-模块组成\" class=\"headerlink\" title=\"1. 模块组成\"></a>1. 模块组成</h2><ul><li>Lodash听得辅助函数主要分为以下几类，函数列表和用法实力请查看Lodash的官方文档：</li><li>Array， 适合于数组类型，比如填充数据、查找元素、数组分片等操作</li><li>Collocation， 适用于数组和对象类型，部分适用于字符串，比如分组、查找、过滤等操作</li><li>Function， 适用于函数类型，比如节流、延迟、缓存、设置钩子等操作</li><li>Lang， 普遍适用于各种类型，常用于执行类型判断和类型转换</li><li>Math， 使用与数值类型，常用于执行数学运算</li><li>Number， 适用于生成随机数，比较数值与数值区间的关系</li><li>Object， 适用于对象类型，常用于对象的创建、扩展、类型转换、检索、集合等操作</li><li>Seq， 常用于创建链式调用，提高执行性能（惰性计算）</li><li>String， 适用于字符串类型</li><li>lodash/fp 模块提供了更接近函数式编程的开发方法，其内部的函数经过包装，具有immutable、auto-curried、iteratee-first、data-last（官方介绍）等特点。</li><li>Fixed Arity，固化参数个数，便于柯里化</li><li>Rearragned Arguments， 重新调整参数位置，便于函数之间的聚合</li><li>Capped Iteratee Argument， 封装Iteratee参数</li></ul><h2 id=\"1-性能\"><a href=\"#1-性能\" class=\"headerlink\" title=\"1. 性能\"></a>1. 性能</h2><p>在 Filip Zawada的文章<a href=\"https://link.jianshu.com/?t=http://filimanjaro.com/blog/2014/introducing-lazy-evaluation/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">《How to Speed Up Lo-Dash ×100? Introducing Lazy Evaluation》</a>中提到了Lodash提高执行速度的思路，主要有三点： Lazy Evaluation、Pipelining和Deferred Execution。下面两张图来自Filip的博客：</p><p><img src=\"/images/lodash_1.gif\" alt=\"976007-20180123132259975-836139498\"></p><p>假设有如上图所示的问题： 从若干个求中取出三个面值小于10的球。第一步是从所有的求中取出所有面值小于10的球，第二部是从上一步的结果中去三个球。</p><p><img src=\"/images/lodash_2.gif\" alt=\"976007-20180123132320240-161059187\"></p><p>上图是另一个解决方案，如果一个球能够通过第一步，那么就继续执行第二步，直至结束然后测试下一个球。。。当我们取到三个球之后就中断整个循环。Filip称这是Lazy Evaluation Algorithm， 就个人理解这并不全面，他后续提到的Pipelining（管道计算），再加上一个中断循环执行的算法应该更符合这里的图示。</p><p>此外，使用Lodash的链式调用时，只有现实或隐式调用 .value 方法才会对链式调用的整个操作进行取值，这种不在声明时立即求值，而在使用时进行求职的方式，是Lazy Evaluation最大的特点。</p><h2 id=\"3-九个实例\"><a href=\"#3-九个实例\" class=\"headerlink\" title=\"3. 九个实例\"></a>3. 九个实例</h2><p>收益于Lodash的普及程度，使用它可以提高很多人开发时于都代码的效率，减少彼此之间的误解（Loss of Consciousness）。在<a href=\"https://link.jianshu.com/?t=http://colintoh.com/blog/lodash-10-javascript-utility-functions-stop-rewriting\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">《Lodash: 10 Javascript Utility Functions That You Should Probably Stop Rewriting》</a>一文中，作者列举了多个常用的Lodash函数，实例演示了使用Lodash的技巧。</p><ol><li>N次循环</li></ol><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. Basic for loop.</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. Using Array's join and split methods</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.apply(<span class=\"literal\">null</span>, <span class=\"built_in\">Array</span>(<span class=\"number\">5</span>)).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Lodash</span></span><br><span class=\"line\">_.times(<span class=\"number\">5</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><p>for 语句是执行虚幻的不二选择，Array.apply也可以模拟循环，但在上面代码的使用场景下，_.tiems()的解决方法更加简洁和易于理解。</p><ol start=\"2\"><li>深层查找属性值<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Fetch the name of the first pet from each owner</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ownerArr = [&#123;</span><br><span class=\"line\">    <span class=\"string\">\"owner\"</span>: <span class=\"string\">\"Colin\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"pets\"</span>: [&#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"dog1\"</span>&#125;, &#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"dog2\"</span>&#125;]</span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">    <span class=\"string\">\"owner\"</span>: <span class=\"string\">\"John\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"pets\"</span>: [&#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"dog3\"</span>&#125;, &#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"dog4\"</span>&#125;]</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Array's map method.</span></span><br><span class=\"line\">ownerArr.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">owner</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> owner.pets[<span class=\"number\">0</span>].name;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Lodash</span></span><br><span class=\"line\">_.map(ownerArr, <span class=\"string\">\"pets[0].name\"</span>);</span><br></pre></td></tr></table></figure></li></ol><p>_.map 方法是对原生 map 方法的改进，其中使用 pets[0].name 字符串对嵌套数据取值的方式简化了很多冗余的代码，非常类似使用jQuery选择DOM节点 ul&gt;li&gt;a , 对于前端开发者来说有种久违的亲切感。</p><ol start=\"3\"><li>个性化数组<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Array's map method.</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.apply(<span class=\"literal\">null</span>, <span class=\"built_in\">Array</span>(<span class=\"number\">6</span>)).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, index</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"ball_\"</span> + index; </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Lodash</span></span><br><span class=\"line\">_.times(<span class=\"number\">6</span>, _.uniqueId.bind(<span class=\"literal\">null</span>, <span class=\"string\">'ball_'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Lodash</span></span><br><span class=\"line\">_.times(<span class=\"number\">6</span>, _.partial(_.uniqueId, <span class=\"string\">'ball_'</span>));</span><br><span class=\"line\"><span class=\"comment\">// eg. [ball_0, ball_1, ball_2, ball_3, ball_4, ball_6]</span></span><br></pre></td></tr></table></figure></li></ol><p>在上面的代码中，我们要创建一个初始值不同、长度为6的数组，其中 _.uniqueId 方法用于生成独一无二的标示符（递增的数字，在程序运行期间保持独一无二）， _.partial 方法是对 bind 的封装。</p><ol start=\"4\"><li>深拷贝<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> objA = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"colin\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 常用的方法一般会比较长，循环对象等</span></span><br><span class=\"line\"><span class=\"comment\">// http://stackoverflow.com/questions/4459928/how-to-deep-clone-in-javascript</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Lodash</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> objB = _.cloneDeep(objA);</span><br><span class=\"line\">objB === objA <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></li></ol><p>JavaScript 没有直接提供深拷贝的函数，但是我们可以用其他杉树来模拟，比如 JSON.parse(JSON.stringify(objectToClone)), 但这种方法要求对象中的属性值不能是函数。Lodash 中的 _.cloneDeep 函数封装了深拷贝的逻辑，用起来更加简洁。</p><ol start=\"5\"><li>随机数<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Native utility method</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRandomNumber</span>(<span class=\"params\">min, max</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * (max - min + <span class=\"number\">1</span>)) + min;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getRandomNumber(<span class=\"number\">15</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Lodash</span></span><br><span class=\"line\">_.random(<span class=\"number\">15</span>, <span class=\"number\">20</span>);</span><br></pre></td></tr></table></figure></li></ol><p>Lodash 的随机数生成函数更贴近实际开发，ECMAScript 的随机数生成函数式底层必备的接口，两者都不可获取。此外，使用 _.random(15, 20, true) 还可以在15到20之间生成随机的浮点数。</p><ol start=\"6\"><li>对象扩展<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Adding extend function to Object.prototype</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.extend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (obj.hasOwnProperty(i)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>[i] = obj[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> objA = &#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"colin\"</span>, <span class=\"string\">\"car\"</span>: <span class=\"string\">\"suzuki\"</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> objB = &#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"james\"</span>, <span class=\"string\">\"age\"</span>: <span class=\"number\">17</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">objA.extend(objB);</span><br><span class=\"line\">objA; <span class=\"comment\">// &#123;\"name\": \"james\", \"age\": 17, \"car\": \"suzuki\"&#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Lodash</span></span><br><span class=\"line\">_.assign(objA, ojbB);</span><br></pre></td></tr></table></figure></li></ol><p>_.assign 是浅拷贝， 和ES6新增的 Object.assign 函数功能一致（建议优先使用Object.assign）。</p><ol start=\"7\"><li>筛选属性<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Native method: Remove an array of keys from object</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.remove = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span>(<span class=\"keyword\">this</span>[key]);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> objA = &#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"colin\"</span>, <span class=\"string\">\"car\"</span>: <span class=\"string\">\"suzuki\"</span>, <span class=\"string\">\"age\"</span>: <span class=\"number\">17</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">objA.remove([<span class=\"string\">'car'</span>, <span class=\"string\">'age'</span>]);</span><br><span class=\"line\">objA; <span class=\"comment\">// &#123;\"name\": \"colin\"&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Lodash</span></span><br><span class=\"line\">objA = _.omit(objA, [<span class=\"string\">'car'</span>, <span class=\"string\">'age'</span>]);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; &#123;\"name\": \"colin\"&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">objA = _.omit(objA, <span class=\"string\">\"car\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; &#123;\"name\": \"colin\", \"age\": 17&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">objA = _.omit(objA, _.isNumber);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; &#123;\"name\": \"colin\", \"car\": \"suzuki\"&#125;;</span></span><br></pre></td></tr></table></figure></li></ol><p>大多数情况下，Lodash所提供的辅助函数都会比原声的函数更贴近开发需求。在上面的代码中，开发者可以使用数组、字符串以及函数的方式筛选对象的属性，并且最终会返回一个新的对象，中间执行筛选时不会对旧对象产生影响。</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Native method: Returning a new object with selected properties</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.pick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\">    arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        obj[key] = _this[key];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> objA = &#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"colin\"</span>, <span class=\"string\">\"car\"</span>: <span class=\"string\">\"suzuki\"</span>, <span class=\"string\">\"age\"</span>: <span class=\"number\">17</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> objB = objA.pick([<span class=\"string\">'car'</span>, <span class=\"string\">'age'</span>]);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; &#123;\"car\": \"suzuki\", \"age\": 17&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Lodash</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> objB = _.pick(objA, [<span class=\"string\">'car'</span>, <span class=\"string\">'age'</span>]);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; &#123;\"car\": \"suzuki\", \"age\":17&#125;</span></span><br></pre></td></tr></table></figure><p></p><p>_.pick 是 _.omit 的相反操作，用于从其他对象中挑选属性生成新的对象。</p><ol start=\"8\"><li>随机元素<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> luckDraw = [<span class=\"string\">\"Colin\"</span>, <span class=\"string\">\"John\"</span>, <span class=\"string\">\"James\"</span>, <span class=\"string\">\"Lily\"</span>, <span class=\"string\">\"Mary\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pickRandomPerson</span>(<span class=\"params\">luckyDraw</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> index = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * (luckyDraw.length - <span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> luckyDraw[index];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">pickRandomPerson(luckyDraw); <span class=\"comment\">//John</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Lodash</span></span><br><span class=\"line\">_.sample(luckyDraw); <span class=\"comment\">// Colin</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Lodash - Getting 2 random item</span></span><br><span class=\"line\">_.sample(luckyDraw, <span class=\"number\">2</span>); <span class=\"comment\">// ['John', 'Lily']</span></span><br></pre></td></tr></table></figure></li></ol><p>_.sample 支持随机挑选多个元素并返回新的数组。</p><ol start=\"9\"><li>针对 JSON.parse 的错误处理<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Using try-catch to handle the JSON.parse error</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parse</span>(<span class=\"params\">str</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">JSON</span>.parse(str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// With Lodash</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseLodash</span>(<span class=\"params\">str</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.attempt(<span class=\"built_in\">JSON</span>.parse.bind(<span class=\"literal\">null</span>, str));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">parse(<span class=\"string\">'a'</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; false</span></span><br><span class=\"line\">parseLodash(<span class=\"string\">'a'</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Return an error object</span></span><br><span class=\"line\"></span><br><span class=\"line\">parse(<span class=\"string\">'&#123;\"name\": \"colin\"&#125;'</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Return &#123;\"name\": \"colin\"&#125;</span></span><br><span class=\"line\">parseLodash(<span class=\"string\">'&#123;\"name\": \"colin\"&#125;'</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Return &#123;\"name\": \"colin\"&#125;</span></span><br></pre></td></tr></table></figure></li></ol><p>如果你在使用 JSON.parse 时没有预置错误处理，那么它很有可能会成为一个定时炸弹，我们不应该默认接收的JSON对象都是有效的。 try-catch 是常见的错误处理方式，如果项目中使用Lodash，那么可以使用 _.attmpt 替代 try-catch 的方式，当解析JSON出错时，该方法会返回一个 Error 对象。</p><blockquote><p>随着ES6的普及，Lodash的功能或多或少会被原生功能所替代，所以使用时还需要进一步甄别，建议优先使用原生函数，有关ES6替代Lodash的部分，请参考文章<a href=\"https://link.jianshu.com/?t=http://www.zcfy.cc/article/10-lodash-features-you-can-replace-with-es6-467.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">《10 个可用 ES6 替代的 Lodash 特性》</a>。</p></blockquote><p>其中有两处分别值得一看：</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用箭头函数创建可复用的路径</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> object = &#123; <span class=\"string\">'a'</span>: [&#123; <span class=\"string\">'b'</span>: &#123; <span class=\"string\">'c'</span>: <span class=\"number\">3</span> &#125; &#125;, <span class=\"number\">4</span>] &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">[</span><br><span class=\"line\">    obj =&gt; obj.a[<span class=\"number\">0</span>].b.c,</span><br><span class=\"line\">    obj =&gt; ojb.a[<span class=\"number\">1</span>]</span><br><span class=\"line\">].map(<span class=\"function\"><span class=\"params\">path</span> =&gt;</span> path(object));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用箭头函数编写链式调用</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> pipe = <span class=\"function\"><span class=\"params\">function</span> =&gt;</span> data =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> functions.reduce(</span><br><span class=\"line\">        (value, func) =&gt; func(value),</span><br><span class=\"line\">        data</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> pipeline = pipe([</span><br><span class=\"line\">    x =&gt; x * <span class=\"number\">2</span>,</span><br><span class=\"line\">    x =&gt; x / <span class=\"number\">3</span>,</span><br><span class=\"line\">    x =&gt; x &gt; <span class=\"number\">5</span>,</span><br><span class=\"line\">    b =&gt; !b</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\">pipeline(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br><span class=\"line\">pipeline(<span class=\"number\">20</span>);</span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure><p></p><p>在ES6中，如果一个函数只接收一个形参且函数提示一个 return 语句， 就可以使用箭头函数简化为：</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> func = <span class=\"function\"><span class=\"params\">p</span> =&gt;</span> v;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类似于（不完全相同）</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> func = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">p</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>当有多重嵌套时，可以简化为：</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> func = <span class=\"function\"><span class=\"params\">a</span> =&gt;</span> b =&gt; <span class=\"function\"><span class=\"params\">c</span> =&gt;</span> a + b + c;</span><br><span class=\"line\">func(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类似于</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> func = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">b</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">c</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a + b + c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>","site":{"data":{}},"excerpt":"<p><img src=\"/images/lodash_0.jpg\" alt=\"timg\"></p><p>有几年开发经验的工程师，往往都会有自己的一套工具库，称为utils、helpers等等，这套库一方面是自己的技术积累，另一方面也是对某项技术的扩展，领先于技术规范的制订和实现。 Lodash就是这样的一套工具库，它内部封装了诸多对字符串、数组、对象等常见数据类型的处理函数，其中部分是目前ECMAScript尚未制订的规范，但同时被业界所认可的辅助函数。而且每天使用npm安装Lodash的数量在百万级以上，这在一定程度上证明了其代码的健壮性，值得我们在项目中一试。","more":"</p><h2 id=\"1-模块组成\"><a href=\"#1-模块组成\" class=\"headerlink\" title=\"1. 模块组成\"></a>1. 模块组成</h2><ul><li>Lodash听得辅助函数主要分为以下几类，函数列表和用法实力请查看Lodash的官方文档：</li><li>Array， 适合于数组类型，比如填充数据、查找元素、数组分片等操作</li><li>Collocation， 适用于数组和对象类型，部分适用于字符串，比如分组、查找、过滤等操作</li><li>Function， 适用于函数类型，比如节流、延迟、缓存、设置钩子等操作</li><li>Lang， 普遍适用于各种类型，常用于执行类型判断和类型转换</li><li>Math， 使用与数值类型，常用于执行数学运算</li><li>Number， 适用于生成随机数，比较数值与数值区间的关系</li><li>Object， 适用于对象类型，常用于对象的创建、扩展、类型转换、检索、集合等操作</li><li>Seq， 常用于创建链式调用，提高执行性能（惰性计算）</li><li>String， 适用于字符串类型</li><li>lodash/fp 模块提供了更接近函数式编程的开发方法，其内部的函数经过包装，具有immutable、auto-curried、iteratee-first、data-last（官方介绍）等特点。</li><li>Fixed Arity，固化参数个数，便于柯里化</li><li>Rearragned Arguments， 重新调整参数位置，便于函数之间的聚合</li><li>Capped Iteratee Argument， 封装Iteratee参数</li></ul><h2 id=\"1-性能\"><a href=\"#1-性能\" class=\"headerlink\" title=\"1. 性能\"></a>1. 性能</h2><p>在 Filip Zawada的文章<a href=\"https://link.jianshu.com/?t=http://filimanjaro.com/blog/2014/introducing-lazy-evaluation/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">《How to Speed Up Lo-Dash ×100? Introducing Lazy Evaluation》</a>中提到了Lodash提高执行速度的思路，主要有三点： Lazy Evaluation、Pipelining和Deferred Execution。下面两张图来自Filip的博客：</p><p><img src=\"/images/lodash_1.gif\" alt=\"976007-20180123132259975-836139498\"></p><p>假设有如上图所示的问题： 从若干个求中取出三个面值小于10的球。第一步是从所有的求中取出所有面值小于10的球，第二部是从上一步的结果中去三个球。</p><p><img src=\"/images/lodash_2.gif\" alt=\"976007-20180123132320240-161059187\"></p><p>上图是另一个解决方案，如果一个球能够通过第一步，那么就继续执行第二步，直至结束然后测试下一个球。。。当我们取到三个球之后就中断整个循环。Filip称这是Lazy Evaluation Algorithm， 就个人理解这并不全面，他后续提到的Pipelining（管道计算），再加上一个中断循环执行的算法应该更符合这里的图示。</p><p>此外，使用Lodash的链式调用时，只有现实或隐式调用 .value 方法才会对链式调用的整个操作进行取值，这种不在声明时立即求值，而在使用时进行求职的方式，是Lazy Evaluation最大的特点。</p><h2 id=\"3-九个实例\"><a href=\"#3-九个实例\" class=\"headerlink\" title=\"3. 九个实例\"></a>3. 九个实例</h2><p>收益于Lodash的普及程度，使用它可以提高很多人开发时于都代码的效率，减少彼此之间的误解（Loss of Consciousness）。在<a href=\"https://link.jianshu.com/?t=http://colintoh.com/blog/lodash-10-javascript-utility-functions-stop-rewriting\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">《Lodash: 10 Javascript Utility Functions That You Should Probably Stop Rewriting》</a>一文中，作者列举了多个常用的Lodash函数，实例演示了使用Lodash的技巧。</p><ol><li>N次循环</li></ol><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. Basic for loop.</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. Using Array's join and split methods</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.apply(<span class=\"literal\">null</span>, <span class=\"built_in\">Array</span>(<span class=\"number\">5</span>)).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Lodash</span></span><br><span class=\"line\">_.times(<span class=\"number\">5</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><p>for 语句是执行虚幻的不二选择，Array.apply也可以模拟循环，但在上面代码的使用场景下，_.tiems()的解决方法更加简洁和易于理解。</p><ol start=\"2\"><li>深层查找属性值<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Fetch the name of the first pet from each owner</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ownerArr = [&#123;</span><br><span class=\"line\">    <span class=\"string\">\"owner\"</span>: <span class=\"string\">\"Colin\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"pets\"</span>: [&#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"dog1\"</span>&#125;, &#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"dog2\"</span>&#125;]</span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">    <span class=\"string\">\"owner\"</span>: <span class=\"string\">\"John\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"pets\"</span>: [&#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"dog3\"</span>&#125;, &#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"dog4\"</span>&#125;]</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Array's map method.</span></span><br><span class=\"line\">ownerArr.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">owner</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> owner.pets[<span class=\"number\">0</span>].name;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Lodash</span></span><br><span class=\"line\">_.map(ownerArr, <span class=\"string\">\"pets[0].name\"</span>);</span><br></pre></td></tr></table></figure></li></ol><p>_.map 方法是对原生 map 方法的改进，其中使用 pets[0].name 字符串对嵌套数据取值的方式简化了很多冗余的代码，非常类似使用jQuery选择DOM节点 ul&gt;li&gt;a , 对于前端开发者来说有种久违的亲切感。</p><ol start=\"3\"><li>个性化数组<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Array's map method.</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.apply(<span class=\"literal\">null</span>, <span class=\"built_in\">Array</span>(<span class=\"number\">6</span>)).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, index</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"ball_\"</span> + index; </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Lodash</span></span><br><span class=\"line\">_.times(<span class=\"number\">6</span>, _.uniqueId.bind(<span class=\"literal\">null</span>, <span class=\"string\">'ball_'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Lodash</span></span><br><span class=\"line\">_.times(<span class=\"number\">6</span>, _.partial(_.uniqueId, <span class=\"string\">'ball_'</span>));</span><br><span class=\"line\"><span class=\"comment\">// eg. [ball_0, ball_1, ball_2, ball_3, ball_4, ball_6]</span></span><br></pre></td></tr></table></figure></li></ol><p>在上面的代码中，我们要创建一个初始值不同、长度为6的数组，其中 _.uniqueId 方法用于生成独一无二的标示符（递增的数字，在程序运行期间保持独一无二）， _.partial 方法是对 bind 的封装。</p><ol start=\"4\"><li>深拷贝<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> objA = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"colin\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 常用的方法一般会比较长，循环对象等</span></span><br><span class=\"line\"><span class=\"comment\">// http://stackoverflow.com/questions/4459928/how-to-deep-clone-in-javascript</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Lodash</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> objB = _.cloneDeep(objA);</span><br><span class=\"line\">objB === objA <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></li></ol><p>JavaScript 没有直接提供深拷贝的函数，但是我们可以用其他杉树来模拟，比如 JSON.parse(JSON.stringify(objectToClone)), 但这种方法要求对象中的属性值不能是函数。Lodash 中的 _.cloneDeep 函数封装了深拷贝的逻辑，用起来更加简洁。</p><ol start=\"5\"><li>随机数<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Native utility method</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRandomNumber</span>(<span class=\"params\">min, max</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * (max - min + <span class=\"number\">1</span>)) + min;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getRandomNumber(<span class=\"number\">15</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Lodash</span></span><br><span class=\"line\">_.random(<span class=\"number\">15</span>, <span class=\"number\">20</span>);</span><br></pre></td></tr></table></figure></li></ol><p>Lodash 的随机数生成函数更贴近实际开发，ECMAScript 的随机数生成函数式底层必备的接口，两者都不可获取。此外，使用 _.random(15, 20, true) 还可以在15到20之间生成随机的浮点数。</p><ol start=\"6\"><li>对象扩展<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Adding extend function to Object.prototype</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.extend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (obj.hasOwnProperty(i)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>[i] = obj[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> objA = &#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"colin\"</span>, <span class=\"string\">\"car\"</span>: <span class=\"string\">\"suzuki\"</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> objB = &#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"james\"</span>, <span class=\"string\">\"age\"</span>: <span class=\"number\">17</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">objA.extend(objB);</span><br><span class=\"line\">objA; <span class=\"comment\">// &#123;\"name\": \"james\", \"age\": 17, \"car\": \"suzuki\"&#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Lodash</span></span><br><span class=\"line\">_.assign(objA, ojbB);</span><br></pre></td></tr></table></figure></li></ol><p>_.assign 是浅拷贝， 和ES6新增的 Object.assign 函数功能一致（建议优先使用Object.assign）。</p><ol start=\"7\"><li>筛选属性<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Native method: Remove an array of keys from object</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.remove = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span>(<span class=\"keyword\">this</span>[key]);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> objA = &#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"colin\"</span>, <span class=\"string\">\"car\"</span>: <span class=\"string\">\"suzuki\"</span>, <span class=\"string\">\"age\"</span>: <span class=\"number\">17</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">objA.remove([<span class=\"string\">'car'</span>, <span class=\"string\">'age'</span>]);</span><br><span class=\"line\">objA; <span class=\"comment\">// &#123;\"name\": \"colin\"&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Lodash</span></span><br><span class=\"line\">objA = _.omit(objA, [<span class=\"string\">'car'</span>, <span class=\"string\">'age'</span>]);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; &#123;\"name\": \"colin\"&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">objA = _.omit(objA, <span class=\"string\">\"car\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; &#123;\"name\": \"colin\", \"age\": 17&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">objA = _.omit(objA, _.isNumber);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; &#123;\"name\": \"colin\", \"car\": \"suzuki\"&#125;;</span></span><br></pre></td></tr></table></figure></li></ol><p>大多数情况下，Lodash所提供的辅助函数都会比原声的函数更贴近开发需求。在上面的代码中，开发者可以使用数组、字符串以及函数的方式筛选对象的属性，并且最终会返回一个新的对象，中间执行筛选时不会对旧对象产生影响。</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Native method: Returning a new object with selected properties</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.pick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\">    arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        obj[key] = _this[key];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> objA = &#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"colin\"</span>, <span class=\"string\">\"car\"</span>: <span class=\"string\">\"suzuki\"</span>, <span class=\"string\">\"age\"</span>: <span class=\"number\">17</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> objB = objA.pick([<span class=\"string\">'car'</span>, <span class=\"string\">'age'</span>]);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; &#123;\"car\": \"suzuki\", \"age\": 17&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Lodash</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> objB = _.pick(objA, [<span class=\"string\">'car'</span>, <span class=\"string\">'age'</span>]);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; &#123;\"car\": \"suzuki\", \"age\":17&#125;</span></span><br></pre></td></tr></table></figure><p></p><p>_.pick 是 _.omit 的相反操作，用于从其他对象中挑选属性生成新的对象。</p><ol start=\"8\"><li>随机元素<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> luckDraw = [<span class=\"string\">\"Colin\"</span>, <span class=\"string\">\"John\"</span>, <span class=\"string\">\"James\"</span>, <span class=\"string\">\"Lily\"</span>, <span class=\"string\">\"Mary\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pickRandomPerson</span>(<span class=\"params\">luckyDraw</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> index = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * (luckyDraw.length - <span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> luckyDraw[index];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">pickRandomPerson(luckyDraw); <span class=\"comment\">//John</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Lodash</span></span><br><span class=\"line\">_.sample(luckyDraw); <span class=\"comment\">// Colin</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Lodash - Getting 2 random item</span></span><br><span class=\"line\">_.sample(luckyDraw, <span class=\"number\">2</span>); <span class=\"comment\">// ['John', 'Lily']</span></span><br></pre></td></tr></table></figure></li></ol><p>_.sample 支持随机挑选多个元素并返回新的数组。</p><ol start=\"9\"><li>针对 JSON.parse 的错误处理<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Using try-catch to handle the JSON.parse error</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parse</span>(<span class=\"params\">str</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">JSON</span>.parse(str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// With Lodash</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseLodash</span>(<span class=\"params\">str</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.attempt(<span class=\"built_in\">JSON</span>.parse.bind(<span class=\"literal\">null</span>, str));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">parse(<span class=\"string\">'a'</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; false</span></span><br><span class=\"line\">parseLodash(<span class=\"string\">'a'</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Return an error object</span></span><br><span class=\"line\"></span><br><span class=\"line\">parse(<span class=\"string\">'&#123;\"name\": \"colin\"&#125;'</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Return &#123;\"name\": \"colin\"&#125;</span></span><br><span class=\"line\">parseLodash(<span class=\"string\">'&#123;\"name\": \"colin\"&#125;'</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; Return &#123;\"name\": \"colin\"&#125;</span></span><br></pre></td></tr></table></figure></li></ol><p>如果你在使用 JSON.parse 时没有预置错误处理，那么它很有可能会成为一个定时炸弹，我们不应该默认接收的JSON对象都是有效的。 try-catch 是常见的错误处理方式，如果项目中使用Lodash，那么可以使用 _.attmpt 替代 try-catch 的方式，当解析JSON出错时，该方法会返回一个 Error 对象。</p><blockquote><p>随着ES6的普及，Lodash的功能或多或少会被原生功能所替代，所以使用时还需要进一步甄别，建议优先使用原生函数，有关ES6替代Lodash的部分，请参考文章<a href=\"https://link.jianshu.com/?t=http://www.zcfy.cc/article/10-lodash-features-you-can-replace-with-es6-467.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">《10 个可用 ES6 替代的 Lodash 特性》</a>。</p></blockquote><p>其中有两处分别值得一看：</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用箭头函数创建可复用的路径</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> object = &#123; <span class=\"string\">'a'</span>: [&#123; <span class=\"string\">'b'</span>: &#123; <span class=\"string\">'c'</span>: <span class=\"number\">3</span> &#125; &#125;, <span class=\"number\">4</span>] &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">[</span><br><span class=\"line\">    obj =&gt; obj.a[<span class=\"number\">0</span>].b.c,</span><br><span class=\"line\">    obj =&gt; ojb.a[<span class=\"number\">1</span>]</span><br><span class=\"line\">].map(<span class=\"function\"><span class=\"params\">path</span> =&gt;</span> path(object));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用箭头函数编写链式调用</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> pipe = <span class=\"function\"><span class=\"params\">function</span> =&gt;</span> data =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> functions.reduce(</span><br><span class=\"line\">        (value, func) =&gt; func(value),</span><br><span class=\"line\">        data</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> pipeline = pipe([</span><br><span class=\"line\">    x =&gt; x * <span class=\"number\">2</span>,</span><br><span class=\"line\">    x =&gt; x / <span class=\"number\">3</span>,</span><br><span class=\"line\">    x =&gt; x &gt; <span class=\"number\">5</span>,</span><br><span class=\"line\">    b =&gt; !b</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\">pipeline(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br><span class=\"line\">pipeline(<span class=\"number\">20</span>);</span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure><p></p><p>在ES6中，如果一个函数只接收一个形参且函数提示一个 return 语句， 就可以使用箭头函数简化为：</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> func = <span class=\"function\"><span class=\"params\">p</span> =&gt;</span> v;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类似于（不完全相同）</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> func = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">p</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>当有多重嵌套时，可以简化为：</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> func = <span class=\"function\"><span class=\"params\">a</span> =&gt;</span> b =&gt; <span class=\"function\"><span class=\"params\">c</span> =&gt;</span> a + b + c;</span><br><span class=\"line\">func(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类似于</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> func = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">b</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">c</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a + b + c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p>"},{"title":"Consul服务治理","author":"SnailDev","date":"2018-05-09T09:53:00.000Z","featured_image":"/images/consul.jpg","_content":"![consul](/images/consul.jpg)\n\nConsul是google开源的一个使用go语言开发的服务发现、配置管理中心服务。内置了服务注册与发现框架、分布一致性协议实现、健康检查、Key/Value存储、多数据中心方案，不再需要依赖其他工具（如ZooKeeper等）。服务部署简单，只有一个可运行的二进制的包。每个节点都需要运行agent，他有两种运行模式server和client。每个数据中心官方建议需要3或5个server节点以保证数据安全，同时保证server-leader的选举能够正确的进行。\n<!-- more -->\n\n- client\n\n    client表示Consul的client模式，就是客户端模式。是Consul节点的一种模式，这种模式下，所有注册到当前节点的服务会被转发到server，本身是不持久化这些信息。\n\n- server\n\n    server表示Consul的server模式，表明这个Consul是个server，这种模式下，功能和client都一样，唯一不同的是，它会把所有的信息持久化的本地，这样遇到故障，信息是可以被保留的。\n\n- server-leader\n\n    中间那个server下面有leader的字眼，表明这个server是它们的老大，它和其它server不一样的一点是，它需要负责同步注册的信息给其它的server，同时也要负责各个节点的健康监测。\n\n- raft\n\n    server节点之间的数据一致性保证，一致性协议使用的是raft，而zookeeper用的paxos，etcd采用的也是taft。\n\n- 服务发现协议\n\n    Consul采用http和dns协议，etcd只支持http\n\n- 服务注册\n\n    Consul支持两种方式实现服务注册，一种是通过Consul的服务注册http API，由服务自己调用API实现注册，另一种方式是通过json个是的配置文件实现注册，将需要注册的服务以json格式的配置文件给出。Consul官方建议使用第二种方式。\n\n- 服务发现\n\n    Consul支持两种方式实现服务发现，一种是通过http API来查询有哪些服务，另外一种是通过Consul agent 自带的DNS（8600端口），域名是以NAME.service.consul的形式给出，NAME即在定义的服务配置文件中，服务的名称。DNS方式可以通过check的方式检查服务。\n\n- 服务间的通信协议\n\n    Consul使用gossip协议管理成员关系、广播消息到整个集群，他有两个gossip  pool（LAN pool和WAN pool），LAN pool是同一个数据中心内部通信的，WAN pool是多个数据中心通信的，LAN pool有多个，WAN pool只有一个。\n\n## 1. 安装\n首先去官网现在合适的consul包：https://www.consul.io/downloads.html\n安装直接下载zip包，解压后只有一个可执行的文件consul，将consul添加到系统的环境变量里面。\n```bash\n#unzip consul_1.0.2_linux_amd64.zip\n#cp -a consul  /usr/bin\n#consul\n```\n![1200972-20180104111330034-1408661682](/images/consul_1.png)\n\n出现上面的内容证明安装成功。\n\n## 2. 启动\nconsul必须启动agent才能使用，有两种启动模式server和client，还有一个官方自带的ui。server用与持久化服务信息，集群官方建议3或5个节点。client只用与于server交互。ui可以查看集群情况的。\n\n**Server**\n\ncn1：\n```bash\n#consul agent -bootstrap-expect 2 -server -data-dir /data/consul0 -node=cn1 -bind=192.168.1.202 -config-dir /etc/consul.d -enable-script-checks=true -datacenter=dc1 \n```\n\ncn2:\n```bash\n#consul agent -server  -data-dir /data/consul0 -node=cn2 -bind=192.168.1.201 -config-dir /etc/consul.d -enable-script-checks=true -datacenter=dc1 -join 192.168.1.202\n```\n\ncn3:\n```bash\n#consul agent -server -data-dir /data/consul0 -node=cn3 -bind=192.168.1.200 -config-dir /etc/consul.d -enable-script-checks=true -datacenter=dc1 -join 192.168.1.202\n```\n\n>参数解释：\n> - -bootstrap-expect： 集群期望的节点数，只有节点数量达到这个值才会选举leader。\n> - -server： 运行在server模式\n> - -data-dir：指定数据目录，其他的节点对于这个目录必须有读的权限\n> - -node：指定节点的名称\n> - -bind：为该节点绑定一个地址\n> - -config-dir：指定配置文件，定义服务的，默认所有一.json结尾的文件都会读\n> - -enable-script-checks=true：设置检查服务为可用\n> - -datacenter： 数据中心没名称，\n> - -join：加入到已有的集群中\n\n**Client**\n```bash\n#consul agent   -data-dir /data/consul0 -node=cn4 -bind=192.168.1.199 -config-dir /etc/consul.d -enable-script-checks=true  -datacenter=dc1  -join 192.168.1.202\n```\nclient节点可以有多个，自己根据服务指定即可。\n\n**UI**\n```bash\n#consul agent  -ui  -data-dir /data/consul0 -node=cn4 -bind=192.168.1.198  -client 192.168.1.198   -config-dir /etc/consul.d -enable-script-checks=true  -datacenter=dc1  -join 192.168.1.202\n```\n\n> - -ui：使用自带的ui，\n> - -ui-dir：指定ui的目录，使用自己定义的ui\n> - -client：指定web  ui、的监听地址，默认127.0.0.1只能本机访问。\n\n集群创建完成后，可以使用一些常用的命令检查集群的状态：\n```bash\n#consul  info\n```\n可以在raft：stat看到此节点的状态是fllower或者leader\n```bash\n#consul members\n\nNode Address Status Type Build Protocol DC Segment\ncn1 192.168.1.202:8301 alive server 1.0.2 2 dc1 <all>\ncn2 192.168.1.201:8301 alive server 1.0.2 2 dc1 <all>\ncn3 192.168.1.200:8301 alive client 1.0.2 2 dc1 <default>\n```\n\n新加入一个节点有几种方式:\n1. 这种方式，重启后不会自动加入集群\n```bash\n#consul  join  192.168.1.202\n```\n\n2. 在启动的时候使用-join指定一个集群\n```bash\n#consul agent  -ui  -data-dir /data/consul0 -node=cn4 -bind=192.168.1.198 -config-dir /etc/consul.d -enable-script-checks=true  -datacenter=dc1  -join 192.168.1.202\n```\n\n3. 使用-startjoin或-rejoin\n```bash\n#consul agent  -ui  -data-dir /data/consul0 -node=cn4 -bind=192.168.1.198 -config-dir /etc/consul.d -enable-script-checks=true  -datacenter=dc1  -rejoin\n```\n \n访问ui:\nhttp://192.168.1.198:8500/ui\n\n> 端口：\n> 8300：consul agent服务relplaction、rpc（client-server）\n> 8301：lan gossip\n> 8302：wan gossip\n> 8500：http api端口\n> 8600：DNS服务端口\n\n## 3. 服务注册\n采用的是配置文件的方式，（官方推荐）首先创建一个目录用于存放定义服务的配置文件\n```bash\n#mkdir /etc/consul.d/\n```\n启动服务的时候要使用-config-dir 参数指定。\n\n下面给出一个服务定义：\n```bash\n#cat web.json\n{\n\t\"service\": {\n\t\t\"name\": \"web\",\n\t\t\"tags\": [\"rails\"],\n\t\t\"port\": 80,\n\t\t\"check\": {\n\t\t\t\"name\": \"ping\",\n\t\t\t\"script\": \"curl -s localhost:80\",\n\t\t\t\"interval\": \"3s\"\n\t\t}\n\t}\n}\n```\n启动后就可以在没有运行web服务的机器上面执行DNS查询：\n```bash\n# dig @127.0.0.1 -p 8600 web.service.consul SRV\n\n;; ANSWER SECTION:\nweb.service.consul.\t0\tIN\tSRV\t1 1 80 cn2.node.dc1.consul.\nweb.service.consul.\t0\tIN\tSRV\t1 1 80 cn3.node.dc1.consul.\n\n;; ADDITIONAL SECTION:\ncn2.node.dc1.consul.\t0\tIN\tA\t192.168.1.201\ncn2.node.dc1.consul.\t0\tIN\tTXT\t\"consul-network-segment=\"\ncn3.node.dc1.consul.\t0\tIN\tA\t192.168.1.200\ncn3.node.dc1.consul.\t0\tIN\tTXT\t\"consul-network-segment=\"\n\n;; Query time: 17 msec\n;; SERVER: 127.0.0.1#8600(127.0.0.1)\n;; WHEN: 四 1月 04 14:39:32 CST 2018\n;; MSG SIZE rcvd: 229\n```\n可以看到服务已经注册到集群里面了。\n使用dns查询，默认域名格式NAME.service.consul，NAME就是web.json里面定义的service的name。可以自己指定域和端口：-domain、-dns-port 53 \n\n## 4. 健康检查\ncheck使用来做服务的健康检查的，可以拥有多个，也可以不使用支持多种方式检查。check必须是script或者TTL类型的，如果是script类型则script和interval变量必须被提供，如果是TTL类型则ttl变量必须被提供。script是consul主动去检查服务的健康状况，ttl是服务主动向consul报告自己的状况。\n\n- script check\n```bash\n{\n\t\"check\": {\n\t\t\"id\": mutil - memory,\n\t\t\"name\": \"memory utilization\",\n\t\t\"tags\": [\"system\"],\n\t\t\"script\": \"/etc/init.d/check_memory.py\",\n\t\t\"interval\": \"10s\",\n\t\t\"timeout\": \"1s\"\n\t}\n}\n```\n\n- http check\n```bash\n{\n\t\"check\": {\n\t\t\"id\": \"api\",\n\t\t\"name\": \"HTTP API  500\",\n\t\t\"http\": \"http://loclhost:500/health\",\n\t\t\"interval\": \"10s\",\n\t\t\"timeout\": \"1s\"\n\t}\n}\n```\n \n- tcp  check\n```bash\n{\n\t\"check\": {\n\t\t\"id\": \"ssh\",\n\t\t\"name\": \"ssh TCP 26622\",\n\t\t\"tcp\": \"localhost:26622\",\n\t\t\"interval\": \"10s\",\n\t\t\"timeout\": \"1s\"\n\t}\n}\n```\n\n- ttl  check\n```bash\n{\n\t\"check\": {\n\t\t\"id\": \"web-app\",\n\t\t\"name\": \"Web APP status\",\n\t\t\"notes\": \"Web APP does a curl  internally every 10 seconds\",\n\t\t\"ttl\": \"30s\"\n\t}\n}\n```\n\n全文完","source":"_posts/microservice-consul.md","raw":"---\ntitle: Consul服务治理\nauthor: SnailDev\ntags:\n  - 服务治理\ncategories:\n  - 服务治理\ndate: 2018-05-09 17:53:00\nfeatured_image: /images/consul.jpg\n---\n![consul](/images/consul.jpg)\n\nConsul是google开源的一个使用go语言开发的服务发现、配置管理中心服务。内置了服务注册与发现框架、分布一致性协议实现、健康检查、Key/Value存储、多数据中心方案，不再需要依赖其他工具（如ZooKeeper等）。服务部署简单，只有一个可运行的二进制的包。每个节点都需要运行agent，他有两种运行模式server和client。每个数据中心官方建议需要3或5个server节点以保证数据安全，同时保证server-leader的选举能够正确的进行。\n<!-- more -->\n\n- client\n\n    client表示Consul的client模式，就是客户端模式。是Consul节点的一种模式，这种模式下，所有注册到当前节点的服务会被转发到server，本身是不持久化这些信息。\n\n- server\n\n    server表示Consul的server模式，表明这个Consul是个server，这种模式下，功能和client都一样，唯一不同的是，它会把所有的信息持久化的本地，这样遇到故障，信息是可以被保留的。\n\n- server-leader\n\n    中间那个server下面有leader的字眼，表明这个server是它们的老大，它和其它server不一样的一点是，它需要负责同步注册的信息给其它的server，同时也要负责各个节点的健康监测。\n\n- raft\n\n    server节点之间的数据一致性保证，一致性协议使用的是raft，而zookeeper用的paxos，etcd采用的也是taft。\n\n- 服务发现协议\n\n    Consul采用http和dns协议，etcd只支持http\n\n- 服务注册\n\n    Consul支持两种方式实现服务注册，一种是通过Consul的服务注册http API，由服务自己调用API实现注册，另一种方式是通过json个是的配置文件实现注册，将需要注册的服务以json格式的配置文件给出。Consul官方建议使用第二种方式。\n\n- 服务发现\n\n    Consul支持两种方式实现服务发现，一种是通过http API来查询有哪些服务，另外一种是通过Consul agent 自带的DNS（8600端口），域名是以NAME.service.consul的形式给出，NAME即在定义的服务配置文件中，服务的名称。DNS方式可以通过check的方式检查服务。\n\n- 服务间的通信协议\n\n    Consul使用gossip协议管理成员关系、广播消息到整个集群，他有两个gossip  pool（LAN pool和WAN pool），LAN pool是同一个数据中心内部通信的，WAN pool是多个数据中心通信的，LAN pool有多个，WAN pool只有一个。\n\n## 1. 安装\n首先去官网现在合适的consul包：https://www.consul.io/downloads.html\n安装直接下载zip包，解压后只有一个可执行的文件consul，将consul添加到系统的环境变量里面。\n```bash\n#unzip consul_1.0.2_linux_amd64.zip\n#cp -a consul  /usr/bin\n#consul\n```\n![1200972-20180104111330034-1408661682](/images/consul_1.png)\n\n出现上面的内容证明安装成功。\n\n## 2. 启动\nconsul必须启动agent才能使用，有两种启动模式server和client，还有一个官方自带的ui。server用与持久化服务信息，集群官方建议3或5个节点。client只用与于server交互。ui可以查看集群情况的。\n\n**Server**\n\ncn1：\n```bash\n#consul agent -bootstrap-expect 2 -server -data-dir /data/consul0 -node=cn1 -bind=192.168.1.202 -config-dir /etc/consul.d -enable-script-checks=true -datacenter=dc1 \n```\n\ncn2:\n```bash\n#consul agent -server  -data-dir /data/consul0 -node=cn2 -bind=192.168.1.201 -config-dir /etc/consul.d -enable-script-checks=true -datacenter=dc1 -join 192.168.1.202\n```\n\ncn3:\n```bash\n#consul agent -server -data-dir /data/consul0 -node=cn3 -bind=192.168.1.200 -config-dir /etc/consul.d -enable-script-checks=true -datacenter=dc1 -join 192.168.1.202\n```\n\n>参数解释：\n> - -bootstrap-expect： 集群期望的节点数，只有节点数量达到这个值才会选举leader。\n> - -server： 运行在server模式\n> - -data-dir：指定数据目录，其他的节点对于这个目录必须有读的权限\n> - -node：指定节点的名称\n> - -bind：为该节点绑定一个地址\n> - -config-dir：指定配置文件，定义服务的，默认所有一.json结尾的文件都会读\n> - -enable-script-checks=true：设置检查服务为可用\n> - -datacenter： 数据中心没名称，\n> - -join：加入到已有的集群中\n\n**Client**\n```bash\n#consul agent   -data-dir /data/consul0 -node=cn4 -bind=192.168.1.199 -config-dir /etc/consul.d -enable-script-checks=true  -datacenter=dc1  -join 192.168.1.202\n```\nclient节点可以有多个，自己根据服务指定即可。\n\n**UI**\n```bash\n#consul agent  -ui  -data-dir /data/consul0 -node=cn4 -bind=192.168.1.198  -client 192.168.1.198   -config-dir /etc/consul.d -enable-script-checks=true  -datacenter=dc1  -join 192.168.1.202\n```\n\n> - -ui：使用自带的ui，\n> - -ui-dir：指定ui的目录，使用自己定义的ui\n> - -client：指定web  ui、的监听地址，默认127.0.0.1只能本机访问。\n\n集群创建完成后，可以使用一些常用的命令检查集群的状态：\n```bash\n#consul  info\n```\n可以在raft：stat看到此节点的状态是fllower或者leader\n```bash\n#consul members\n\nNode Address Status Type Build Protocol DC Segment\ncn1 192.168.1.202:8301 alive server 1.0.2 2 dc1 <all>\ncn2 192.168.1.201:8301 alive server 1.0.2 2 dc1 <all>\ncn3 192.168.1.200:8301 alive client 1.0.2 2 dc1 <default>\n```\n\n新加入一个节点有几种方式:\n1. 这种方式，重启后不会自动加入集群\n```bash\n#consul  join  192.168.1.202\n```\n\n2. 在启动的时候使用-join指定一个集群\n```bash\n#consul agent  -ui  -data-dir /data/consul0 -node=cn4 -bind=192.168.1.198 -config-dir /etc/consul.d -enable-script-checks=true  -datacenter=dc1  -join 192.168.1.202\n```\n\n3. 使用-startjoin或-rejoin\n```bash\n#consul agent  -ui  -data-dir /data/consul0 -node=cn4 -bind=192.168.1.198 -config-dir /etc/consul.d -enable-script-checks=true  -datacenter=dc1  -rejoin\n```\n \n访问ui:\nhttp://192.168.1.198:8500/ui\n\n> 端口：\n> 8300：consul agent服务relplaction、rpc（client-server）\n> 8301：lan gossip\n> 8302：wan gossip\n> 8500：http api端口\n> 8600：DNS服务端口\n\n## 3. 服务注册\n采用的是配置文件的方式，（官方推荐）首先创建一个目录用于存放定义服务的配置文件\n```bash\n#mkdir /etc/consul.d/\n```\n启动服务的时候要使用-config-dir 参数指定。\n\n下面给出一个服务定义：\n```bash\n#cat web.json\n{\n\t\"service\": {\n\t\t\"name\": \"web\",\n\t\t\"tags\": [\"rails\"],\n\t\t\"port\": 80,\n\t\t\"check\": {\n\t\t\t\"name\": \"ping\",\n\t\t\t\"script\": \"curl -s localhost:80\",\n\t\t\t\"interval\": \"3s\"\n\t\t}\n\t}\n}\n```\n启动后就可以在没有运行web服务的机器上面执行DNS查询：\n```bash\n# dig @127.0.0.1 -p 8600 web.service.consul SRV\n\n;; ANSWER SECTION:\nweb.service.consul.\t0\tIN\tSRV\t1 1 80 cn2.node.dc1.consul.\nweb.service.consul.\t0\tIN\tSRV\t1 1 80 cn3.node.dc1.consul.\n\n;; ADDITIONAL SECTION:\ncn2.node.dc1.consul.\t0\tIN\tA\t192.168.1.201\ncn2.node.dc1.consul.\t0\tIN\tTXT\t\"consul-network-segment=\"\ncn3.node.dc1.consul.\t0\tIN\tA\t192.168.1.200\ncn3.node.dc1.consul.\t0\tIN\tTXT\t\"consul-network-segment=\"\n\n;; Query time: 17 msec\n;; SERVER: 127.0.0.1#8600(127.0.0.1)\n;; WHEN: 四 1月 04 14:39:32 CST 2018\n;; MSG SIZE rcvd: 229\n```\n可以看到服务已经注册到集群里面了。\n使用dns查询，默认域名格式NAME.service.consul，NAME就是web.json里面定义的service的name。可以自己指定域和端口：-domain、-dns-port 53 \n\n## 4. 健康检查\ncheck使用来做服务的健康检查的，可以拥有多个，也可以不使用支持多种方式检查。check必须是script或者TTL类型的，如果是script类型则script和interval变量必须被提供，如果是TTL类型则ttl变量必须被提供。script是consul主动去检查服务的健康状况，ttl是服务主动向consul报告自己的状况。\n\n- script check\n```bash\n{\n\t\"check\": {\n\t\t\"id\": mutil - memory,\n\t\t\"name\": \"memory utilization\",\n\t\t\"tags\": [\"system\"],\n\t\t\"script\": \"/etc/init.d/check_memory.py\",\n\t\t\"interval\": \"10s\",\n\t\t\"timeout\": \"1s\"\n\t}\n}\n```\n\n- http check\n```bash\n{\n\t\"check\": {\n\t\t\"id\": \"api\",\n\t\t\"name\": \"HTTP API  500\",\n\t\t\"http\": \"http://loclhost:500/health\",\n\t\t\"interval\": \"10s\",\n\t\t\"timeout\": \"1s\"\n\t}\n}\n```\n \n- tcp  check\n```bash\n{\n\t\"check\": {\n\t\t\"id\": \"ssh\",\n\t\t\"name\": \"ssh TCP 26622\",\n\t\t\"tcp\": \"localhost:26622\",\n\t\t\"interval\": \"10s\",\n\t\t\"timeout\": \"1s\"\n\t}\n}\n```\n\n- ttl  check\n```bash\n{\n\t\"check\": {\n\t\t\"id\": \"web-app\",\n\t\t\"name\": \"Web APP status\",\n\t\t\"notes\": \"Web APP does a curl  internally every 10 seconds\",\n\t\t\"ttl\": \"30s\"\n\t}\n}\n```\n\n全文完","slug":"microservice-consul","published":1,"updated":"2018-10-03T01:37:18.697Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmyu0saw000jx8uolkw7x5mf","content":"<p><img src=\"/images/consul.jpg\" alt=\"consul\"></p><p>Consul是google开源的一个使用go语言开发的服务发现、配置管理中心服务。内置了服务注册与发现框架、分布一致性协议实现、健康检查、Key/Value存储、多数据中心方案，不再需要依赖其他工具（如ZooKeeper等）。服务部署简单，只有一个可运行的二进制的包。每个节点都需要运行agent，他有两种运行模式server和client。每个数据中心官方建议需要3或5个server节点以保证数据安全，同时保证server-leader的选举能够正确的进行。<a id=\"more\"></a></p><ul><li><p>client</p><p>client表示Consul的client模式，就是客户端模式。是Consul节点的一种模式，这种模式下，所有注册到当前节点的服务会被转发到server，本身是不持久化这些信息。</p></li><li><p>server</p><p>server表示Consul的server模式，表明这个Consul是个server，这种模式下，功能和client都一样，唯一不同的是，它会把所有的信息持久化的本地，这样遇到故障，信息是可以被保留的。</p></li><li><p>server-leader</p><p>中间那个server下面有leader的字眼，表明这个server是它们的老大，它和其它server不一样的一点是，它需要负责同步注册的信息给其它的server，同时也要负责各个节点的健康监测。</p></li><li><p>raft</p><p>server节点之间的数据一致性保证，一致性协议使用的是raft，而zookeeper用的paxos，etcd采用的也是taft。</p></li><li><p>服务发现协议</p><p>Consul采用http和dns协议，etcd只支持http</p></li><li><p>服务注册</p><p>Consul支持两种方式实现服务注册，一种是通过Consul的服务注册http API，由服务自己调用API实现注册，另一种方式是通过json个是的配置文件实现注册，将需要注册的服务以json格式的配置文件给出。Consul官方建议使用第二种方式。</p></li><li><p>服务发现</p><p>Consul支持两种方式实现服务发现，一种是通过http API来查询有哪些服务，另外一种是通过Consul agent 自带的DNS（8600端口），域名是以NAME.service.consul的形式给出，NAME即在定义的服务配置文件中，服务的名称。DNS方式可以通过check的方式检查服务。</p></li><li><p>服务间的通信协议</p><p>Consul使用gossip协议管理成员关系、广播消息到整个集群，他有两个gossip pool（LAN pool和WAN pool），LAN pool是同一个数据中心内部通信的，WAN pool是多个数据中心通信的，LAN pool有多个，WAN pool只有一个。</p></li></ul><h2 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a>1. 安装</h2><p>首先去官网现在合适的consul包：<a href=\"https://www.consul.io/downloads.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">https://www.consul.io/downloads.html</a> 安装直接下载zip包，解压后只有一个可执行的文件consul，将consul添加到系统的环境变量里面。</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#unzip consul_1.0.2_linux_amd64.zip</span></span><br><span class=\"line\"><span class=\"comment\">#cp -a consul  /usr/bin</span></span><br><span class=\"line\"><span class=\"comment\">#consul</span></span><br></pre></td></tr></table></figure><p></p><p><img src=\"/images/consul_1.png\" alt=\"1200972-20180104111330034-1408661682\"></p><p>出现上面的内容证明安装成功。</p><h2 id=\"2-启动\"><a href=\"#2-启动\" class=\"headerlink\" title=\"2. 启动\"></a>2. 启动</h2><p>consul必须启动agent才能使用，有两种启动模式server和client，还有一个官方自带的ui。server用与持久化服务信息，集群官方建议3或5个节点。client只用与于server交互。ui可以查看集群情况的。</p><p><strong>Server</strong></p><p>cn1：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#consul agent -bootstrap-expect 2 -server -data-dir /data/consul0 -node=cn1 -bind=192.168.1.202 -config-dir /etc/consul.d -enable-script-checks=true -datacenter=dc1</span></span><br></pre></td></tr></table></figure><p></p><p>cn2:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#consul agent -server  -data-dir /data/consul0 -node=cn2 -bind=192.168.1.201 -config-dir /etc/consul.d -enable-script-checks=true -datacenter=dc1 -join 192.168.1.202</span></span><br></pre></td></tr></table></figure><p></p><p>cn3:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#consul agent -server -data-dir /data/consul0 -node=cn3 -bind=192.168.1.200 -config-dir /etc/consul.d -enable-script-checks=true -datacenter=dc1 -join 192.168.1.202</span></span><br></pre></td></tr></table></figure><p></p><blockquote><p>参数解释：</p><ul><li>-bootstrap-expect： 集群期望的节点数，只有节点数量达到这个值才会选举leader。</li><li>-server： 运行在server模式</li><li>-data-dir：指定数据目录，其他的节点对于这个目录必须有读的权限</li><li>-node：指定节点的名称</li><li>-bind：为该节点绑定一个地址</li><li>-config-dir：指定配置文件，定义服务的，默认所有一.json结尾的文件都会读</li><li>-enable-script-checks=true：设置检查服务为可用</li><li>-datacenter： 数据中心没名称，</li><li>-join：加入到已有的集群中</li></ul></blockquote><p><strong>Client</strong></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#consul agent   -data-dir /data/consul0 -node=cn4 -bind=192.168.1.199 -config-dir /etc/consul.d -enable-script-checks=true  -datacenter=dc1  -join 192.168.1.202</span></span><br></pre></td></tr></table></figure><p></p><p>client节点可以有多个，自己根据服务指定即可。</p><p><strong>UI</strong></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#consul agent  -ui  -data-dir /data/consul0 -node=cn4 -bind=192.168.1.198  -client 192.168.1.198   -config-dir /etc/consul.d -enable-script-checks=true  -datacenter=dc1  -join 192.168.1.202</span></span><br></pre></td></tr></table></figure><p></p><blockquote><ul><li>-ui：使用自带的ui，</li><li>-ui-dir：指定ui的目录，使用自己定义的ui</li><li>-client：指定web ui、的监听地址，默认127.0.0.1只能本机访问。</li></ul></blockquote><p>集群创建完成后，可以使用一些常用的命令检查集群的状态：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#consul  info</span></span><br></pre></td></tr></table></figure><p></p><p>可以在raft：stat看到此节点的状态是fllower或者leader</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#consul members</span></span><br><span class=\"line\"></span><br><span class=\"line\">Node Address Status Type Build Protocol DC Segment</span><br><span class=\"line\">cn1 192.168.1.202:8301 alive server 1.0.2 2 dc1 &lt;all&gt;</span><br><span class=\"line\">cn2 192.168.1.201:8301 alive server 1.0.2 2 dc1 &lt;all&gt;</span><br><span class=\"line\">cn3 192.168.1.200:8301 alive client 1.0.2 2 dc1 &lt;default&gt;</span><br></pre></td></tr></table></figure><p></p><p>新加入一个节点有几种方式:</p><ol><li><p>这种方式，重启后不会自动加入集群</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#consul  join  192.168.1.202</span></span><br></pre></td></tr></table></figure></li><li><p>在启动的时候使用-join指定一个集群</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#consul agent  -ui  -data-dir /data/consul0 -node=cn4 -bind=192.168.1.198 -config-dir /etc/consul.d -enable-script-checks=true  -datacenter=dc1  -join 192.168.1.202</span></span><br></pre></td></tr></table></figure></li><li><p>使用-startjoin或-rejoin</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#consul agent  -ui  -data-dir /data/consul0 -node=cn4 -bind=192.168.1.198 -config-dir /etc/consul.d -enable-script-checks=true  -datacenter=dc1  -rejoin</span></span><br></pre></td></tr></table></figure></li></ol><p>访问ui: <a href=\"http://192.168.1.198:8500/ui\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">http://192.168.1.198:8500/ui</a></p><blockquote><p>端口： 8300：consul agent服务relplaction、rpc（client-server） 8301：lan gossip 8302：wan gossip 8500：http api端口 8600：DNS服务端口</p></blockquote><h2 id=\"3-服务注册\"><a href=\"#3-服务注册\" class=\"headerlink\" title=\"3. 服务注册\"></a>3. 服务注册</h2><p>采用的是配置文件的方式，（官方推荐）首先创建一个目录用于存放定义服务的配置文件</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#mkdir /etc/consul.d/</span></span><br></pre></td></tr></table></figure><p></p><p>启动服务的时候要使用-config-dir 参数指定。</p><p>下面给出一个服务定义：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#cat web.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"service\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"web\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"tags\"</span>: [<span class=\"string\">\"rails\"</span>],</span><br><span class=\"line\">    <span class=\"string\">\"port\"</span>: 80,</span><br><span class=\"line\">    <span class=\"string\">\"check\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"name\"</span>: <span class=\"string\">\"ping\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"script\"</span>: <span class=\"string\">\"curl -s localhost:80\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"interval\"</span>: <span class=\"string\">\"3s\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>启动后就可以在没有运行web服务的机器上面执行DNS查询：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># dig @127.0.0.1 -p 8600 web.service.consul SRV</span></span><br><span class=\"line\"></span><br><span class=\"line\">;; ANSWER SECTION:</span><br><span class=\"line\">web.service.consul.\t0\tIN\tSRV\t1 1 80 cn2.node.dc1.consul.</span><br><span class=\"line\">web.service.consul.\t0\tIN\tSRV\t1 1 80 cn3.node.dc1.consul.</span><br><span class=\"line\"></span><br><span class=\"line\">;; ADDITIONAL SECTION:</span><br><span class=\"line\">cn2.node.dc1.consul.\t0\tIN\tA\t192.168.1.201</span><br><span class=\"line\">cn2.node.dc1.consul.\t0\tIN\tTXT\t<span class=\"string\">\"consul-network-segment=\"</span></span><br><span class=\"line\">cn3.node.dc1.consul.\t0\tIN\tA\t192.168.1.200</span><br><span class=\"line\">cn3.node.dc1.consul.\t0\tIN\tTXT\t<span class=\"string\">\"consul-network-segment=\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">;; Query time: 17 msec</span><br><span class=\"line\">;; SERVER: 127.0.0.1<span class=\"comment\">#8600(127.0.0.1)</span></span><br><span class=\"line\">;; WHEN: 四 1月 04 14:39:32 CST 2018</span><br><span class=\"line\">;; MSG SIZE rcvd: 229</span><br></pre></td></tr></table></figure><p></p><p>可以看到服务已经注册到集群里面了。 使用dns查询，默认域名格式NAME.service.consul，NAME就是web.json里面定义的service的name。可以自己指定域和端口：-domain、-dns-port 53</p><h2 id=\"4-健康检查\"><a href=\"#4-健康检查\" class=\"headerlink\" title=\"4. 健康检查\"></a>4. 健康检查</h2><p>check使用来做服务的健康检查的，可以拥有多个，也可以不使用支持多种方式检查。check必须是script或者TTL类型的，如果是script类型则script和interval变量必须被提供，如果是TTL类型则ttl变量必须被提供。script是consul主动去检查服务的健康状况，ttl是服务主动向consul报告自己的状况。</p><ul><li><p>script check</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"check\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"id\"</span>: mutil - memory,</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"memory utilization\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"tags\"</span>: [<span class=\"string\">\"system\"</span>],</span><br><span class=\"line\">    <span class=\"string\">\"script\"</span>: <span class=\"string\">\"/etc/init.d/check_memory.py\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"interval\"</span>: <span class=\"string\">\"10s\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"timeout\"</span>: <span class=\"string\">\"1s\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>http check</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"check\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"id\"</span>: <span class=\"string\">\"api\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"HTTP API  500\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"http\"</span>: <span class=\"string\">\"http://loclhost:500/health\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"interval\"</span>: <span class=\"string\">\"10s\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"timeout\"</span>: <span class=\"string\">\"1s\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>tcp check</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"check\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"id\"</span>: <span class=\"string\">\"ssh\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"ssh TCP 26622\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"tcp\"</span>: <span class=\"string\">\"localhost:26622\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"interval\"</span>: <span class=\"string\">\"10s\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"timeout\"</span>: <span class=\"string\">\"1s\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ttl check</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"check\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"id\"</span>: <span class=\"string\">\"web-app\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"Web APP status\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"notes\"</span>: <span class=\"string\">\"Web APP does a curl  internally every 10 seconds\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"ttl\"</span>: <span class=\"string\">\"30s\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>全文完</p>","site":{"data":{}},"excerpt":"<p><img src=\"/images/consul.jpg\" alt=\"consul\"></p><p>Consul是google开源的一个使用go语言开发的服务发现、配置管理中心服务。内置了服务注册与发现框架、分布一致性协议实现、健康检查、Key/Value存储、多数据中心方案，不再需要依赖其他工具（如ZooKeeper等）。服务部署简单，只有一个可运行的二进制的包。每个节点都需要运行agent，他有两种运行模式server和client。每个数据中心官方建议需要3或5个server节点以保证数据安全，同时保证server-leader的选举能够正确的进行。","more":"</p><ul><li><p>client</p><p>client表示Consul的client模式，就是客户端模式。是Consul节点的一种模式，这种模式下，所有注册到当前节点的服务会被转发到server，本身是不持久化这些信息。</p></li><li><p>server</p><p>server表示Consul的server模式，表明这个Consul是个server，这种模式下，功能和client都一样，唯一不同的是，它会把所有的信息持久化的本地，这样遇到故障，信息是可以被保留的。</p></li><li><p>server-leader</p><p>中间那个server下面有leader的字眼，表明这个server是它们的老大，它和其它server不一样的一点是，它需要负责同步注册的信息给其它的server，同时也要负责各个节点的健康监测。</p></li><li><p>raft</p><p>server节点之间的数据一致性保证，一致性协议使用的是raft，而zookeeper用的paxos，etcd采用的也是taft。</p></li><li><p>服务发现协议</p><p>Consul采用http和dns协议，etcd只支持http</p></li><li><p>服务注册</p><p>Consul支持两种方式实现服务注册，一种是通过Consul的服务注册http API，由服务自己调用API实现注册，另一种方式是通过json个是的配置文件实现注册，将需要注册的服务以json格式的配置文件给出。Consul官方建议使用第二种方式。</p></li><li><p>服务发现</p><p>Consul支持两种方式实现服务发现，一种是通过http API来查询有哪些服务，另外一种是通过Consul agent 自带的DNS（8600端口），域名是以NAME.service.consul的形式给出，NAME即在定义的服务配置文件中，服务的名称。DNS方式可以通过check的方式检查服务。</p></li><li><p>服务间的通信协议</p><p>Consul使用gossip协议管理成员关系、广播消息到整个集群，他有两个gossip pool（LAN pool和WAN pool），LAN pool是同一个数据中心内部通信的，WAN pool是多个数据中心通信的，LAN pool有多个，WAN pool只有一个。</p></li></ul><h2 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a>1. 安装</h2><p>首先去官网现在合适的consul包：<a href=\"https://www.consul.io/downloads.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">https://www.consul.io/downloads.html</a> 安装直接下载zip包，解压后只有一个可执行的文件consul，将consul添加到系统的环境变量里面。</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#unzip consul_1.0.2_linux_amd64.zip</span></span><br><span class=\"line\"><span class=\"comment\">#cp -a consul  /usr/bin</span></span><br><span class=\"line\"><span class=\"comment\">#consul</span></span><br></pre></td></tr></table></figure><p></p><p><img src=\"/images/consul_1.png\" alt=\"1200972-20180104111330034-1408661682\"></p><p>出现上面的内容证明安装成功。</p><h2 id=\"2-启动\"><a href=\"#2-启动\" class=\"headerlink\" title=\"2. 启动\"></a>2. 启动</h2><p>consul必须启动agent才能使用，有两种启动模式server和client，还有一个官方自带的ui。server用与持久化服务信息，集群官方建议3或5个节点。client只用与于server交互。ui可以查看集群情况的。</p><p><strong>Server</strong></p><p>cn1：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#consul agent -bootstrap-expect 2 -server -data-dir /data/consul0 -node=cn1 -bind=192.168.1.202 -config-dir /etc/consul.d -enable-script-checks=true -datacenter=dc1</span></span><br></pre></td></tr></table></figure><p></p><p>cn2:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#consul agent -server  -data-dir /data/consul0 -node=cn2 -bind=192.168.1.201 -config-dir /etc/consul.d -enable-script-checks=true -datacenter=dc1 -join 192.168.1.202</span></span><br></pre></td></tr></table></figure><p></p><p>cn3:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#consul agent -server -data-dir /data/consul0 -node=cn3 -bind=192.168.1.200 -config-dir /etc/consul.d -enable-script-checks=true -datacenter=dc1 -join 192.168.1.202</span></span><br></pre></td></tr></table></figure><p></p><blockquote><p>参数解释：</p><ul><li>-bootstrap-expect： 集群期望的节点数，只有节点数量达到这个值才会选举leader。</li><li>-server： 运行在server模式</li><li>-data-dir：指定数据目录，其他的节点对于这个目录必须有读的权限</li><li>-node：指定节点的名称</li><li>-bind：为该节点绑定一个地址</li><li>-config-dir：指定配置文件，定义服务的，默认所有一.json结尾的文件都会读</li><li>-enable-script-checks=true：设置检查服务为可用</li><li>-datacenter： 数据中心没名称，</li><li>-join：加入到已有的集群中</li></ul></blockquote><p><strong>Client</strong></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#consul agent   -data-dir /data/consul0 -node=cn4 -bind=192.168.1.199 -config-dir /etc/consul.d -enable-script-checks=true  -datacenter=dc1  -join 192.168.1.202</span></span><br></pre></td></tr></table></figure><p></p><p>client节点可以有多个，自己根据服务指定即可。</p><p><strong>UI</strong></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#consul agent  -ui  -data-dir /data/consul0 -node=cn4 -bind=192.168.1.198  -client 192.168.1.198   -config-dir /etc/consul.d -enable-script-checks=true  -datacenter=dc1  -join 192.168.1.202</span></span><br></pre></td></tr></table></figure><p></p><blockquote><ul><li>-ui：使用自带的ui，</li><li>-ui-dir：指定ui的目录，使用自己定义的ui</li><li>-client：指定web ui、的监听地址，默认127.0.0.1只能本机访问。</li></ul></blockquote><p>集群创建完成后，可以使用一些常用的命令检查集群的状态：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#consul  info</span></span><br></pre></td></tr></table></figure><p></p><p>可以在raft：stat看到此节点的状态是fllower或者leader</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#consul members</span></span><br><span class=\"line\"></span><br><span class=\"line\">Node Address Status Type Build Protocol DC Segment</span><br><span class=\"line\">cn1 192.168.1.202:8301 alive server 1.0.2 2 dc1 &lt;all&gt;</span><br><span class=\"line\">cn2 192.168.1.201:8301 alive server 1.0.2 2 dc1 &lt;all&gt;</span><br><span class=\"line\">cn3 192.168.1.200:8301 alive client 1.0.2 2 dc1 &lt;default&gt;</span><br></pre></td></tr></table></figure><p></p><p>新加入一个节点有几种方式:</p><ol><li><p>这种方式，重启后不会自动加入集群</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#consul  join  192.168.1.202</span></span><br></pre></td></tr></table></figure></li><li><p>在启动的时候使用-join指定一个集群</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#consul agent  -ui  -data-dir /data/consul0 -node=cn4 -bind=192.168.1.198 -config-dir /etc/consul.d -enable-script-checks=true  -datacenter=dc1  -join 192.168.1.202</span></span><br></pre></td></tr></table></figure></li><li><p>使用-startjoin或-rejoin</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#consul agent  -ui  -data-dir /data/consul0 -node=cn4 -bind=192.168.1.198 -config-dir /etc/consul.d -enable-script-checks=true  -datacenter=dc1  -rejoin</span></span><br></pre></td></tr></table></figure></li></ol><p>访问ui: <a href=\"http://192.168.1.198:8500/ui\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">http://192.168.1.198:8500/ui</a></p><blockquote><p>端口： 8300：consul agent服务relplaction、rpc（client-server） 8301：lan gossip 8302：wan gossip 8500：http api端口 8600：DNS服务端口</p></blockquote><h2 id=\"3-服务注册\"><a href=\"#3-服务注册\" class=\"headerlink\" title=\"3. 服务注册\"></a>3. 服务注册</h2><p>采用的是配置文件的方式，（官方推荐）首先创建一个目录用于存放定义服务的配置文件</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#mkdir /etc/consul.d/</span></span><br></pre></td></tr></table></figure><p></p><p>启动服务的时候要使用-config-dir 参数指定。</p><p>下面给出一个服务定义：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#cat web.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"service\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"web\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"tags\"</span>: [<span class=\"string\">\"rails\"</span>],</span><br><span class=\"line\">    <span class=\"string\">\"port\"</span>: 80,</span><br><span class=\"line\">    <span class=\"string\">\"check\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"name\"</span>: <span class=\"string\">\"ping\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"script\"</span>: <span class=\"string\">\"curl -s localhost:80\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"interval\"</span>: <span class=\"string\">\"3s\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>启动后就可以在没有运行web服务的机器上面执行DNS查询：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># dig @127.0.0.1 -p 8600 web.service.consul SRV</span></span><br><span class=\"line\"></span><br><span class=\"line\">;; ANSWER SECTION:</span><br><span class=\"line\">web.service.consul.\t0\tIN\tSRV\t1 1 80 cn2.node.dc1.consul.</span><br><span class=\"line\">web.service.consul.\t0\tIN\tSRV\t1 1 80 cn3.node.dc1.consul.</span><br><span class=\"line\"></span><br><span class=\"line\">;; ADDITIONAL SECTION:</span><br><span class=\"line\">cn2.node.dc1.consul.\t0\tIN\tA\t192.168.1.201</span><br><span class=\"line\">cn2.node.dc1.consul.\t0\tIN\tTXT\t<span class=\"string\">\"consul-network-segment=\"</span></span><br><span class=\"line\">cn3.node.dc1.consul.\t0\tIN\tA\t192.168.1.200</span><br><span class=\"line\">cn3.node.dc1.consul.\t0\tIN\tTXT\t<span class=\"string\">\"consul-network-segment=\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">;; Query time: 17 msec</span><br><span class=\"line\">;; SERVER: 127.0.0.1<span class=\"comment\">#8600(127.0.0.1)</span></span><br><span class=\"line\">;; WHEN: 四 1月 04 14:39:32 CST 2018</span><br><span class=\"line\">;; MSG SIZE rcvd: 229</span><br></pre></td></tr></table></figure><p></p><p>可以看到服务已经注册到集群里面了。 使用dns查询，默认域名格式NAME.service.consul，NAME就是web.json里面定义的service的name。可以自己指定域和端口：-domain、-dns-port 53</p><h2 id=\"4-健康检查\"><a href=\"#4-健康检查\" class=\"headerlink\" title=\"4. 健康检查\"></a>4. 健康检查</h2><p>check使用来做服务的健康检查的，可以拥有多个，也可以不使用支持多种方式检查。check必须是script或者TTL类型的，如果是script类型则script和interval变量必须被提供，如果是TTL类型则ttl变量必须被提供。script是consul主动去检查服务的健康状况，ttl是服务主动向consul报告自己的状况。</p><ul><li><p>script check</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"check\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"id\"</span>: mutil - memory,</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"memory utilization\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"tags\"</span>: [<span class=\"string\">\"system\"</span>],</span><br><span class=\"line\">    <span class=\"string\">\"script\"</span>: <span class=\"string\">\"/etc/init.d/check_memory.py\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"interval\"</span>: <span class=\"string\">\"10s\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"timeout\"</span>: <span class=\"string\">\"1s\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>http check</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"check\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"id\"</span>: <span class=\"string\">\"api\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"HTTP API  500\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"http\"</span>: <span class=\"string\">\"http://loclhost:500/health\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"interval\"</span>: <span class=\"string\">\"10s\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"timeout\"</span>: <span class=\"string\">\"1s\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>tcp check</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"check\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"id\"</span>: <span class=\"string\">\"ssh\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"ssh TCP 26622\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"tcp\"</span>: <span class=\"string\">\"localhost:26622\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"interval\"</span>: <span class=\"string\">\"10s\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"timeout\"</span>: <span class=\"string\">\"1s\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ttl check</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"check\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"id\"</span>: <span class=\"string\">\"web-app\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"Web APP status\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"notes\"</span>: <span class=\"string\">\"Web APP does a curl  internally every 10 seconds\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"ttl\"</span>: <span class=\"string\">\"30s\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>全文完</p>"},{"title":"什么是H.265","author":"SnailDev","date":"2018-07-16T02:26:00.000Z","featured_image":"/images/h.265_1.jpg","_content":"![xh265-vid-top jpg pagespeed gp jp jw pj ws js rj rp rw ri cp md ic saoisp96-x](/images/h.265_1.jpg)\n\n最近偶然读了一篇文章[一位女运维的自述：3年为公司节省10亿元！](https://mp.weixin.qq.com/s/z5y4NUr_lE_cY6FMSaIRUw)，大意是腾讯运维如何运用图像影音压缩技术为公司和用户节省了大量流量，节约了成本并提高了用户体验。其中关键技术 **_H.265_** 吸引了我的注意，于是百谷歌度了一番，做了一个大致的了解。\n\n<!-- more -->\n\n[4K is the next big thing in TVs](https://www.howtogeek.com/206662/should-you-get-an-ultra-hd-4k-tv/), 和 [4K videos are starting to pop up everywhere](https://www.howtogeek.com/300847/where-can-you-find-4k-video-for-your-4k-tv/). 但由于4K视频占用了大量的空间，很难以最佳质量进行下载和流式传输，而值得庆幸的是，一种被称为高效视频编码技术（High Efficiency Video Coding (HEVC), or H.265）正在改变这种情况。\n\n这项新技术还需要很长一段时间才能得到大范围的应用，目前它正出现在—4K UHD Blu-rays 使用  HEVC, [VLC 3.0](https://www.videolan.org/vlc/releases/3.0.0.html)使得你PC机上的HEVC 和 4K 视频更加清晰，iPhone 设备甚至可以用HEVC技术记录视频以节约存储空间。但它是如何工作的，为什么对4K视频如此重要？\n\n## 1. 当前标准：AVC / H.264\n当你观看蓝光光盘，YouTube视频或者来自ITunes的电影时，它与来自编辑室的原始视频不是完全相同的。为了是该电影或者视频更适合蓝光光盘——或者使其足够小以便在网上轻松下载——必须对电影压缩。\n高级视频编码也被称为AVC或H.264,是广泛使用的视频压缩的最佳标准，并且有几种不同的方法可用于减小视频文件的大小。\n例如，在任何给定的帧中，它可以查找大多数颜色相同的区域。在我和我儿子的这幅禁止帧中——大部分的天空都是相同的蓝色，因此压缩算法可以将图像分割成块——称之为“macroblocks”——并表明“我们仅仅假设沿着顶部的所有这些块都是相同的蓝色以替代记录每个像素的颜色”。这比存储每个单独像素的颜色效率更高，降低最终图像的文件大小。在视频中， 该技术被称之为帧内压缩——压缩单个帧的数据。\n\n![img_1617-1](/images/h.265_2.jpg)\n\n\nAVC还使用帧间压缩，它可以查看多个帧并记录帧的哪些部分正在改变 - 哪些不是。从“美国队长：内战”中获得这一镜头。 背景并没有太大的变化 - 帧之间的差异大部分来自钢铁侠的脸部和身体。 所以，压缩算法可以将帧分成相同的宏块，并表明“你知道什么？ 这些块不会改变100帧，所以让我们再次显示它们，而不是将整个图像存储100次。“这可以显著减小文件大小。\n\n![5af0120085a6c_5af012009aeab](/images/h.265_3.gif)\n\n\n这些只是AVC / H.264使用方法的两个过度简化的例子，但您清楚了其中的原理。 这完全是为了在不影响质量的情况下提高视频文件的效率。 （当然，如果压缩太多，任何视频都会失去质量，但这些技术越聪明，在您进入该点之前就可以压缩越多。）\n\n## 2. HEVC / H.265更高效地压缩视频，非常适合4K视频\n高效视频编码技术也称为HEVC或H.265，是视频编码技术演进的下一步。 它的构建使用了AVC / H.264中的许多技术，使视频压缩效率更高。\n\n举个例子，当AVC查看多个帧变更时（例如上面的美国队长例子），这些宏块“块”可以是几个不同的形状和大小，最多可达16个像素乘16个像素。 而使用HEVC，这些块可以达到64×64的尺寸 - 远远大于16×16，这意味着该算法可以记忆更少的块，从而减小整体视频的尺寸。\n\n您可以在[HandyAndy Tech Tips](https://www.youtube.com/channel/UCD80RKxQODrPv-PdM3Js8IQ)的这个精彩视频中看到对这项技术的更多技术性解释.\n\n当然，HEVC还有其他一些技术正在运用，但这是最大的改进之一 - 当所有事情说到做到之后，HEVC可以在相同的质量水平下将视频压缩两倍于AVC。 对于用AVC技术编码而占用大量空间的4K视频而尤其重要。 HEVC使4K视频更容易流式传输，下载或翻录到硬盘。\n\n\n## 3. 缺陷：HEVC在没有硬件加速解码的情况下很慢\n自2013年以来，HEVC一直是获批准的标准，那么为什么我们不能将它用于所有视频？\n相关： [如何通过启用硬件加速使VLC使用更少的电量](https://www.howtogeek.com/260784/how-to-make-vlc-use-less-battery-life-by-enabling-hardware-acceleration/)\n这些压缩算法非常复杂 - 在视频播放之前，需要花费大量的数学计算才能实现解码。 计算机有两种主要的方式可以解码在这种视频：一软件解码，它会使用你的计算机的CPU来完成这个数学运算，或者二[硬件解码](https://www.howtogeek.com/260784/how-to-make-vlc-use-less-battery-life-by-enabling-hardware-acceleration/) ，在这个解码过程中，它将负载交给你的图形卡（或者你的集成图形芯片中央处理器）。 只要显卡支持所尝试播放的视频的编解码器，则效率更高。\n\n因此，尽管许多PC和程序都可以尝试播放HEVC视频，但是如果没有硬件解码，它可能会卡顿或者非常慢。 所以，除非你有一个支持HEVC硬件解码的图形卡和视频播放器，否则HEVC对你来说并不是很好。\n\n这对于独立播放设备来说不是问题 - 包括Xbox One在内的4K蓝光播放机都是以HEVC为基础构建的。 但是当谈到在PC上播放HEVC视频时，事情变得更加困难。 您的计算机将需要以下硬件之一才能硬解码HEVC视频：\n\n- 英特尔第六代“Skylake”或更新的CPU\n- AMD第六代“Carizzo”或更新的APU\n- NVIDIA GeForce GTX 950,960或更新的显卡\n- AMD Radeon R9 Fury，R9 Fury X，R9 Nano或更新的显卡\n\n您可能还需要使用不仅能支持HEVC视频，而且还支持HEVC硬件解码的操作系统和视频播放器 - 目前这有点多余。 许多玩家仍在增加对HEVC硬件解码的支持，并且在某些情况下，它可能仅适用于上面列表中的某些芯片。 在撰写本文时， [VLC](https://www.videolan.org/) 3.0， [Kodi](https://kodi.tv/) 17和[Plex Media Server](https://www.plex.tv/) 1.10都支持某种形式的HEVC硬件解码，至少对于某些卡而言。 不过，您可能必须在选择的播放器中[启用硬件加速](https://www.howtogeek.com/260784/how-to-make-vlc-use-less-battery-life-by-enabling-hardware-acceleration/)才能正常工作。\n\n随着时间的推移，越来越多的计算机将能够处理这种视频，而更多的播放器将会更广泛地支持它 - 就像现在使用AVC / H.264一样。 它可能需要一段时间才会变得无处不在，在此之前，您必须以巨大的文件大小（或压缩它并丢失图像质量）将您的4K视频存储在AVC / H.264中。 但是，HEVC / H.265得到广泛支持越多，视频就越好。\n\n## 4.参考\n图片来源： [alphaspirit](https://www.shutterstock.com/image-photo/realism-sporting-images-broadcast-on-tv-725299213) /Shutterstock.com\n\n本文翻译自：[What Is HEVC H.265 Video, and Why Is It So Important for 4K Movies?](https://www.howtogeek.com/342416/what-is-hevc-h.265-video-and-why-is-it-so-important-for-4k-movies/)\n","source":"_posts/image-audio-what-is-H.265.md","raw":"---\ntitle: 什么是H.265\nauthor: SnailDev\ntags:\n  - 随手写写\ncategories:\n  - 图像影音\ndate: 2018-07-16 10:26:00\nfeatured_image: /images/h.265_1.jpg\n---\n![xh265-vid-top jpg pagespeed gp jp jw pj ws js rj rp rw ri cp md ic saoisp96-x](/images/h.265_1.jpg)\n\n最近偶然读了一篇文章[一位女运维的自述：3年为公司节省10亿元！](https://mp.weixin.qq.com/s/z5y4NUr_lE_cY6FMSaIRUw)，大意是腾讯运维如何运用图像影音压缩技术为公司和用户节省了大量流量，节约了成本并提高了用户体验。其中关键技术 **_H.265_** 吸引了我的注意，于是百谷歌度了一番，做了一个大致的了解。\n\n<!-- more -->\n\n[4K is the next big thing in TVs](https://www.howtogeek.com/206662/should-you-get-an-ultra-hd-4k-tv/), 和 [4K videos are starting to pop up everywhere](https://www.howtogeek.com/300847/where-can-you-find-4k-video-for-your-4k-tv/). 但由于4K视频占用了大量的空间，很难以最佳质量进行下载和流式传输，而值得庆幸的是，一种被称为高效视频编码技术（High Efficiency Video Coding (HEVC), or H.265）正在改变这种情况。\n\n这项新技术还需要很长一段时间才能得到大范围的应用，目前它正出现在—4K UHD Blu-rays 使用  HEVC, [VLC 3.0](https://www.videolan.org/vlc/releases/3.0.0.html)使得你PC机上的HEVC 和 4K 视频更加清晰，iPhone 设备甚至可以用HEVC技术记录视频以节约存储空间。但它是如何工作的，为什么对4K视频如此重要？\n\n## 1. 当前标准：AVC / H.264\n当你观看蓝光光盘，YouTube视频或者来自ITunes的电影时，它与来自编辑室的原始视频不是完全相同的。为了是该电影或者视频更适合蓝光光盘——或者使其足够小以便在网上轻松下载——必须对电影压缩。\n高级视频编码也被称为AVC或H.264,是广泛使用的视频压缩的最佳标准，并且有几种不同的方法可用于减小视频文件的大小。\n例如，在任何给定的帧中，它可以查找大多数颜色相同的区域。在我和我儿子的这幅禁止帧中——大部分的天空都是相同的蓝色，因此压缩算法可以将图像分割成块——称之为“macroblocks”——并表明“我们仅仅假设沿着顶部的所有这些块都是相同的蓝色以替代记录每个像素的颜色”。这比存储每个单独像素的颜色效率更高，降低最终图像的文件大小。在视频中， 该技术被称之为帧内压缩——压缩单个帧的数据。\n\n![img_1617-1](/images/h.265_2.jpg)\n\n\nAVC还使用帧间压缩，它可以查看多个帧并记录帧的哪些部分正在改变 - 哪些不是。从“美国队长：内战”中获得这一镜头。 背景并没有太大的变化 - 帧之间的差异大部分来自钢铁侠的脸部和身体。 所以，压缩算法可以将帧分成相同的宏块，并表明“你知道什么？ 这些块不会改变100帧，所以让我们再次显示它们，而不是将整个图像存储100次。“这可以显著减小文件大小。\n\n![5af0120085a6c_5af012009aeab](/images/h.265_3.gif)\n\n\n这些只是AVC / H.264使用方法的两个过度简化的例子，但您清楚了其中的原理。 这完全是为了在不影响质量的情况下提高视频文件的效率。 （当然，如果压缩太多，任何视频都会失去质量，但这些技术越聪明，在您进入该点之前就可以压缩越多。）\n\n## 2. HEVC / H.265更高效地压缩视频，非常适合4K视频\n高效视频编码技术也称为HEVC或H.265，是视频编码技术演进的下一步。 它的构建使用了AVC / H.264中的许多技术，使视频压缩效率更高。\n\n举个例子，当AVC查看多个帧变更时（例如上面的美国队长例子），这些宏块“块”可以是几个不同的形状和大小，最多可达16个像素乘16个像素。 而使用HEVC，这些块可以达到64×64的尺寸 - 远远大于16×16，这意味着该算法可以记忆更少的块，从而减小整体视频的尺寸。\n\n您可以在[HandyAndy Tech Tips](https://www.youtube.com/channel/UCD80RKxQODrPv-PdM3Js8IQ)的这个精彩视频中看到对这项技术的更多技术性解释.\n\n当然，HEVC还有其他一些技术正在运用，但这是最大的改进之一 - 当所有事情说到做到之后，HEVC可以在相同的质量水平下将视频压缩两倍于AVC。 对于用AVC技术编码而占用大量空间的4K视频而尤其重要。 HEVC使4K视频更容易流式传输，下载或翻录到硬盘。\n\n\n## 3. 缺陷：HEVC在没有硬件加速解码的情况下很慢\n自2013年以来，HEVC一直是获批准的标准，那么为什么我们不能将它用于所有视频？\n相关： [如何通过启用硬件加速使VLC使用更少的电量](https://www.howtogeek.com/260784/how-to-make-vlc-use-less-battery-life-by-enabling-hardware-acceleration/)\n这些压缩算法非常复杂 - 在视频播放之前，需要花费大量的数学计算才能实现解码。 计算机有两种主要的方式可以解码在这种视频：一软件解码，它会使用你的计算机的CPU来完成这个数学运算，或者二[硬件解码](https://www.howtogeek.com/260784/how-to-make-vlc-use-less-battery-life-by-enabling-hardware-acceleration/) ，在这个解码过程中，它将负载交给你的图形卡（或者你的集成图形芯片中央处理器）。 只要显卡支持所尝试播放的视频的编解码器，则效率更高。\n\n因此，尽管许多PC和程序都可以尝试播放HEVC视频，但是如果没有硬件解码，它可能会卡顿或者非常慢。 所以，除非你有一个支持HEVC硬件解码的图形卡和视频播放器，否则HEVC对你来说并不是很好。\n\n这对于独立播放设备来说不是问题 - 包括Xbox One在内的4K蓝光播放机都是以HEVC为基础构建的。 但是当谈到在PC上播放HEVC视频时，事情变得更加困难。 您的计算机将需要以下硬件之一才能硬解码HEVC视频：\n\n- 英特尔第六代“Skylake”或更新的CPU\n- AMD第六代“Carizzo”或更新的APU\n- NVIDIA GeForce GTX 950,960或更新的显卡\n- AMD Radeon R9 Fury，R9 Fury X，R9 Nano或更新的显卡\n\n您可能还需要使用不仅能支持HEVC视频，而且还支持HEVC硬件解码的操作系统和视频播放器 - 目前这有点多余。 许多玩家仍在增加对HEVC硬件解码的支持，并且在某些情况下，它可能仅适用于上面列表中的某些芯片。 在撰写本文时， [VLC](https://www.videolan.org/) 3.0， [Kodi](https://kodi.tv/) 17和[Plex Media Server](https://www.plex.tv/) 1.10都支持某种形式的HEVC硬件解码，至少对于某些卡而言。 不过，您可能必须在选择的播放器中[启用硬件加速](https://www.howtogeek.com/260784/how-to-make-vlc-use-less-battery-life-by-enabling-hardware-acceleration/)才能正常工作。\n\n随着时间的推移，越来越多的计算机将能够处理这种视频，而更多的播放器将会更广泛地支持它 - 就像现在使用AVC / H.264一样。 它可能需要一段时间才会变得无处不在，在此之前，您必须以巨大的文件大小（或压缩它并丢失图像质量）将您的4K视频存储在AVC / H.264中。 但是，HEVC / H.265得到广泛支持越多，视频就越好。\n\n## 4.参考\n图片来源： [alphaspirit](https://www.shutterstock.com/image-photo/realism-sporting-images-broadcast-on-tv-725299213) /Shutterstock.com\n\n本文翻译自：[What Is HEVC H.265 Video, and Why Is It So Important for 4K Movies?](https://www.howtogeek.com/342416/what-is-hevc-h.265-video-and-why-is-it-so-important-for-4k-movies/)\n","slug":"image-audio-what-is-H.265","published":1,"updated":"2018-10-03T01:37:49.969Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmyu0sb5000ox8uofb9qb03p","content":"<p><img src=\"/images/h.265_1.jpg\" alt=\"xh265-vid-top jpg pagespeed gp jp jw pj ws js rj rp rw ri cp md ic saoisp96-x\"></p><p>最近偶然读了一篇文章<a href=\"https://mp.weixin.qq.com/s/z5y4NUr_lE_cY6FMSaIRUw\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">一位女运维的自述：3年为公司节省10亿元！</a>，大意是腾讯运维如何运用图像影音压缩技术为公司和用户节省了大量流量，节约了成本并提高了用户体验。其中关键技术 <strong><em>H.265</em></strong> 吸引了我的注意，于是百谷歌度了一番，做了一个大致的了解。</p><a id=\"more\"></a><p><a href=\"https://www.howtogeek.com/206662/should-you-get-an-ultra-hd-4k-tv/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">4K is the next big thing in TVs</a>, 和 <a href=\"https://www.howtogeek.com/300847/where-can-you-find-4k-video-for-your-4k-tv/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">4K videos are starting to pop up everywhere</a>. 但由于4K视频占用了大量的空间，很难以最佳质量进行下载和流式传输，而值得庆幸的是，一种被称为高效视频编码技术（High Efficiency Video Coding (HEVC), or H.265）正在改变这种情况。</p><p>这项新技术还需要很长一段时间才能得到大范围的应用，目前它正出现在—4K UHD Blu-rays 使用 HEVC, <a href=\"https://www.videolan.org/vlc/releases/3.0.0.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">VLC 3.0</a>使得你PC机上的HEVC 和 4K 视频更加清晰，iPhone 设备甚至可以用HEVC技术记录视频以节约存储空间。但它是如何工作的，为什么对4K视频如此重要？</p><h2 id=\"1-当前标准：AVC-H-264\"><a href=\"#1-当前标准：AVC-H-264\" class=\"headerlink\" title=\"1. 当前标准：AVC / H.264\"></a>1. 当前标准：AVC / H.264</h2><p>当你观看蓝光光盘，YouTube视频或者来自ITunes的电影时，它与来自编辑室的原始视频不是完全相同的。为了是该电影或者视频更适合蓝光光盘——或者使其足够小以便在网上轻松下载——必须对电影压缩。 高级视频编码也被称为AVC或H.264,是广泛使用的视频压缩的最佳标准，并且有几种不同的方法可用于减小视频文件的大小。 例如，在任何给定的帧中，它可以查找大多数颜色相同的区域。在我和我儿子的这幅禁止帧中——大部分的天空都是相同的蓝色，因此压缩算法可以将图像分割成块——称之为“macroblocks”——并表明“我们仅仅假设沿着顶部的所有这些块都是相同的蓝色以替代记录每个像素的颜色”。这比存储每个单独像素的颜色效率更高，降低最终图像的文件大小。在视频中， 该技术被称之为帧内压缩——压缩单个帧的数据。</p><p><img src=\"/images/h.265_2.jpg\" alt=\"img_1617-1\"></p><p>AVC还使用帧间压缩，它可以查看多个帧并记录帧的哪些部分正在改变 - 哪些不是。从“美国队长：内战”中获得这一镜头。 背景并没有太大的变化 - 帧之间的差异大部分来自钢铁侠的脸部和身体。 所以，压缩算法可以将帧分成相同的宏块，并表明“你知道什么？ 这些块不会改变100帧，所以让我们再次显示它们，而不是将整个图像存储100次。“这可以显著减小文件大小。</p><p><img src=\"/images/h.265_3.gif\" alt=\"5af0120085a6c_5af012009aeab\"></p><p>这些只是AVC / H.264使用方法的两个过度简化的例子，但您清楚了其中的原理。 这完全是为了在不影响质量的情况下提高视频文件的效率。 （当然，如果压缩太多，任何视频都会失去质量，但这些技术越聪明，在您进入该点之前就可以压缩越多。）</p><h2 id=\"2-HEVC-H-265更高效地压缩视频，非常适合4K视频\"><a href=\"#2-HEVC-H-265更高效地压缩视频，非常适合4K视频\" class=\"headerlink\" title=\"2. HEVC / H.265更高效地压缩视频，非常适合4K视频\"></a>2. HEVC / H.265更高效地压缩视频，非常适合4K视频</h2><p>高效视频编码技术也称为HEVC或H.265，是视频编码技术演进的下一步。 它的构建使用了AVC / H.264中的许多技术，使视频压缩效率更高。</p><p>举个例子，当AVC查看多个帧变更时（例如上面的美国队长例子），这些宏块“块”可以是几个不同的形状和大小，最多可达16个像素乘16个像素。 而使用HEVC，这些块可以达到64×64的尺寸 - 远远大于16×16，这意味着该算法可以记忆更少的块，从而减小整体视频的尺寸。</p><p>您可以在<a href=\"https://www.youtube.com/channel/UCD80RKxQODrPv-PdM3Js8IQ\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">HandyAndy Tech Tips</a>的这个精彩视频中看到对这项技术的更多技术性解释.</p><p>当然，HEVC还有其他一些技术正在运用，但这是最大的改进之一 - 当所有事情说到做到之后，HEVC可以在相同的质量水平下将视频压缩两倍于AVC。 对于用AVC技术编码而占用大量空间的4K视频而尤其重要。 HEVC使4K视频更容易流式传输，下载或翻录到硬盘。</p><h2 id=\"3-缺陷：HEVC在没有硬件加速解码的情况下很慢\"><a href=\"#3-缺陷：HEVC在没有硬件加速解码的情况下很慢\" class=\"headerlink\" title=\"3. 缺陷：HEVC在没有硬件加速解码的情况下很慢\"></a>3. 缺陷：HEVC在没有硬件加速解码的情况下很慢</h2><p>自2013年以来，HEVC一直是获批准的标准，那么为什么我们不能将它用于所有视频？ 相关： <a href=\"https://www.howtogeek.com/260784/how-to-make-vlc-use-less-battery-life-by-enabling-hardware-acceleration/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">如何通过启用硬件加速使VLC使用更少的电量</a> 这些压缩算法非常复杂 - 在视频播放之前，需要花费大量的数学计算才能实现解码。 计算机有两种主要的方式可以解码在这种视频：一软件解码，它会使用你的计算机的CPU来完成这个数学运算，或者二<a href=\"https://www.howtogeek.com/260784/how-to-make-vlc-use-less-battery-life-by-enabling-hardware-acceleration/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">硬件解码</a> ，在这个解码过程中，它将负载交给你的图形卡（或者你的集成图形芯片中央处理器）。 只要显卡支持所尝试播放的视频的编解码器，则效率更高。</p><p>因此，尽管许多PC和程序都可以尝试播放HEVC视频，但是如果没有硬件解码，它可能会卡顿或者非常慢。 所以，除非你有一个支持HEVC硬件解码的图形卡和视频播放器，否则HEVC对你来说并不是很好。</p><p>这对于独立播放设备来说不是问题 - 包括Xbox One在内的4K蓝光播放机都是以HEVC为基础构建的。 但是当谈到在PC上播放HEVC视频时，事情变得更加困难。 您的计算机将需要以下硬件之一才能硬解码HEVC视频：</p><ul><li>英特尔第六代“Skylake”或更新的CPU</li><li>AMD第六代“Carizzo”或更新的APU</li><li>NVIDIA GeForce GTX 950,960或更新的显卡</li><li>AMD Radeon R9 Fury，R9 Fury X，R9 Nano或更新的显卡</li></ul><p>您可能还需要使用不仅能支持HEVC视频，而且还支持HEVC硬件解码的操作系统和视频播放器 - 目前这有点多余。 许多玩家仍在增加对HEVC硬件解码的支持，并且在某些情况下，它可能仅适用于上面列表中的某些芯片。 在撰写本文时， <a href=\"https://www.videolan.org/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">VLC</a> 3.0， <a href=\"https://kodi.tv/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">Kodi</a> 17和<a href=\"https://www.plex.tv/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">Plex Media Server</a> 1.10都支持某种形式的HEVC硬件解码，至少对于某些卡而言。 不过，您可能必须在选择的播放器中<a href=\"https://www.howtogeek.com/260784/how-to-make-vlc-use-less-battery-life-by-enabling-hardware-acceleration/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">启用硬件加速</a>才能正常工作。</p><p>随着时间的推移，越来越多的计算机将能够处理这种视频，而更多的播放器将会更广泛地支持它 - 就像现在使用AVC / H.264一样。 它可能需要一段时间才会变得无处不在，在此之前，您必须以巨大的文件大小（或压缩它并丢失图像质量）将您的4K视频存储在AVC / H.264中。 但是，HEVC / H.265得到广泛支持越多，视频就越好。</p><h2 id=\"4-参考\"><a href=\"#4-参考\" class=\"headerlink\" title=\"4.参考\"></a>4.参考</h2><p>图片来源： <a href=\"https://www.shutterstock.com/image-photo/realism-sporting-images-broadcast-on-tv-725299213\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">alphaspirit</a> /Shutterstock.com</p><p>本文翻译自：<a href=\"https://www.howtogeek.com/342416/what-is-hevc-h.265-video-and-why-is-it-so-important-for-4k-movies/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">What Is HEVC H.265 Video, and Why Is It So Important for 4K Movies?</a></p>","site":{"data":{}},"excerpt":"<p><img src=\"/images/h.265_1.jpg\" alt=\"xh265-vid-top jpg pagespeed gp jp jw pj ws js rj rp rw ri cp md ic saoisp96-x\"></p><p>最近偶然读了一篇文章<a href=\"https://mp.weixin.qq.com/s/z5y4NUr_lE_cY6FMSaIRUw\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">一位女运维的自述：3年为公司节省10亿元！</a>，大意是腾讯运维如何运用图像影音压缩技术为公司和用户节省了大量流量，节约了成本并提高了用户体验。其中关键技术 <strong><em>H.265</em></strong> 吸引了我的注意，于是百谷歌度了一番，做了一个大致的了解。</p>","more":"<p><a href=\"https://www.howtogeek.com/206662/should-you-get-an-ultra-hd-4k-tv/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">4K is the next big thing in TVs</a>, 和 <a href=\"https://www.howtogeek.com/300847/where-can-you-find-4k-video-for-your-4k-tv/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">4K videos are starting to pop up everywhere</a>. 但由于4K视频占用了大量的空间，很难以最佳质量进行下载和流式传输，而值得庆幸的是，一种被称为高效视频编码技术（High Efficiency Video Coding (HEVC), or H.265）正在改变这种情况。</p><p>这项新技术还需要很长一段时间才能得到大范围的应用，目前它正出现在—4K UHD Blu-rays 使用 HEVC, <a href=\"https://www.videolan.org/vlc/releases/3.0.0.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">VLC 3.0</a>使得你PC机上的HEVC 和 4K 视频更加清晰，iPhone 设备甚至可以用HEVC技术记录视频以节约存储空间。但它是如何工作的，为什么对4K视频如此重要？</p><h2 id=\"1-当前标准：AVC-H-264\"><a href=\"#1-当前标准：AVC-H-264\" class=\"headerlink\" title=\"1. 当前标准：AVC / H.264\"></a>1. 当前标准：AVC / H.264</h2><p>当你观看蓝光光盘，YouTube视频或者来自ITunes的电影时，它与来自编辑室的原始视频不是完全相同的。为了是该电影或者视频更适合蓝光光盘——或者使其足够小以便在网上轻松下载——必须对电影压缩。 高级视频编码也被称为AVC或H.264,是广泛使用的视频压缩的最佳标准，并且有几种不同的方法可用于减小视频文件的大小。 例如，在任何给定的帧中，它可以查找大多数颜色相同的区域。在我和我儿子的这幅禁止帧中——大部分的天空都是相同的蓝色，因此压缩算法可以将图像分割成块——称之为“macroblocks”——并表明“我们仅仅假设沿着顶部的所有这些块都是相同的蓝色以替代记录每个像素的颜色”。这比存储每个单独像素的颜色效率更高，降低最终图像的文件大小。在视频中， 该技术被称之为帧内压缩——压缩单个帧的数据。</p><p><img src=\"/images/h.265_2.jpg\" alt=\"img_1617-1\"></p><p>AVC还使用帧间压缩，它可以查看多个帧并记录帧的哪些部分正在改变 - 哪些不是。从“美国队长：内战”中获得这一镜头。 背景并没有太大的变化 - 帧之间的差异大部分来自钢铁侠的脸部和身体。 所以，压缩算法可以将帧分成相同的宏块，并表明“你知道什么？ 这些块不会改变100帧，所以让我们再次显示它们，而不是将整个图像存储100次。“这可以显著减小文件大小。</p><p><img src=\"/images/h.265_3.gif\" alt=\"5af0120085a6c_5af012009aeab\"></p><p>这些只是AVC / H.264使用方法的两个过度简化的例子，但您清楚了其中的原理。 这完全是为了在不影响质量的情况下提高视频文件的效率。 （当然，如果压缩太多，任何视频都会失去质量，但这些技术越聪明，在您进入该点之前就可以压缩越多。）</p><h2 id=\"2-HEVC-H-265更高效地压缩视频，非常适合4K视频\"><a href=\"#2-HEVC-H-265更高效地压缩视频，非常适合4K视频\" class=\"headerlink\" title=\"2. HEVC / H.265更高效地压缩视频，非常适合4K视频\"></a>2. HEVC / H.265更高效地压缩视频，非常适合4K视频</h2><p>高效视频编码技术也称为HEVC或H.265，是视频编码技术演进的下一步。 它的构建使用了AVC / H.264中的许多技术，使视频压缩效率更高。</p><p>举个例子，当AVC查看多个帧变更时（例如上面的美国队长例子），这些宏块“块”可以是几个不同的形状和大小，最多可达16个像素乘16个像素。 而使用HEVC，这些块可以达到64×64的尺寸 - 远远大于16×16，这意味着该算法可以记忆更少的块，从而减小整体视频的尺寸。</p><p>您可以在<a href=\"https://www.youtube.com/channel/UCD80RKxQODrPv-PdM3Js8IQ\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">HandyAndy Tech Tips</a>的这个精彩视频中看到对这项技术的更多技术性解释.</p><p>当然，HEVC还有其他一些技术正在运用，但这是最大的改进之一 - 当所有事情说到做到之后，HEVC可以在相同的质量水平下将视频压缩两倍于AVC。 对于用AVC技术编码而占用大量空间的4K视频而尤其重要。 HEVC使4K视频更容易流式传输，下载或翻录到硬盘。</p><h2 id=\"3-缺陷：HEVC在没有硬件加速解码的情况下很慢\"><a href=\"#3-缺陷：HEVC在没有硬件加速解码的情况下很慢\" class=\"headerlink\" title=\"3. 缺陷：HEVC在没有硬件加速解码的情况下很慢\"></a>3. 缺陷：HEVC在没有硬件加速解码的情况下很慢</h2><p>自2013年以来，HEVC一直是获批准的标准，那么为什么我们不能将它用于所有视频？ 相关： <a href=\"https://www.howtogeek.com/260784/how-to-make-vlc-use-less-battery-life-by-enabling-hardware-acceleration/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">如何通过启用硬件加速使VLC使用更少的电量</a> 这些压缩算法非常复杂 - 在视频播放之前，需要花费大量的数学计算才能实现解码。 计算机有两种主要的方式可以解码在这种视频：一软件解码，它会使用你的计算机的CPU来完成这个数学运算，或者二<a href=\"https://www.howtogeek.com/260784/how-to-make-vlc-use-less-battery-life-by-enabling-hardware-acceleration/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">硬件解码</a> ，在这个解码过程中，它将负载交给你的图形卡（或者你的集成图形芯片中央处理器）。 只要显卡支持所尝试播放的视频的编解码器，则效率更高。</p><p>因此，尽管许多PC和程序都可以尝试播放HEVC视频，但是如果没有硬件解码，它可能会卡顿或者非常慢。 所以，除非你有一个支持HEVC硬件解码的图形卡和视频播放器，否则HEVC对你来说并不是很好。</p><p>这对于独立播放设备来说不是问题 - 包括Xbox One在内的4K蓝光播放机都是以HEVC为基础构建的。 但是当谈到在PC上播放HEVC视频时，事情变得更加困难。 您的计算机将需要以下硬件之一才能硬解码HEVC视频：</p><ul><li>英特尔第六代“Skylake”或更新的CPU</li><li>AMD第六代“Carizzo”或更新的APU</li><li>NVIDIA GeForce GTX 950,960或更新的显卡</li><li>AMD Radeon R9 Fury，R9 Fury X，R9 Nano或更新的显卡</li></ul><p>您可能还需要使用不仅能支持HEVC视频，而且还支持HEVC硬件解码的操作系统和视频播放器 - 目前这有点多余。 许多玩家仍在增加对HEVC硬件解码的支持，并且在某些情况下，它可能仅适用于上面列表中的某些芯片。 在撰写本文时， <a href=\"https://www.videolan.org/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">VLC</a> 3.0， <a href=\"https://kodi.tv/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">Kodi</a> 17和<a href=\"https://www.plex.tv/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">Plex Media Server</a> 1.10都支持某种形式的HEVC硬件解码，至少对于某些卡而言。 不过，您可能必须在选择的播放器中<a href=\"https://www.howtogeek.com/260784/how-to-make-vlc-use-less-battery-life-by-enabling-hardware-acceleration/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">启用硬件加速</a>才能正常工作。</p><p>随着时间的推移，越来越多的计算机将能够处理这种视频，而更多的播放器将会更广泛地支持它 - 就像现在使用AVC / H.264一样。 它可能需要一段时间才会变得无处不在，在此之前，您必须以巨大的文件大小（或压缩它并丢失图像质量）将您的4K视频存储在AVC / H.264中。 但是，HEVC / H.265得到广泛支持越多，视频就越好。</p><h2 id=\"4-参考\"><a href=\"#4-参考\" class=\"headerlink\" title=\"4.参考\"></a>4.参考</h2><p>图片来源： <a href=\"https://www.shutterstock.com/image-photo/realism-sporting-images-broadcast-on-tv-725299213\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">alphaspirit</a> /Shutterstock.com</p><p>本文翻译自：<a href=\"https://www.howtogeek.com/342416/what-is-hevc-h.265-video-and-why-is-it-so-important-for-4k-movies/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">What Is HEVC H.265 Video, and Why Is It So Important for 4K Movies?</a></p>"},{"title":"SpringBoot实战（五）Jpa","author":"SnailDev","date":"2018-09-05T15:27:05.000Z","featured_image":"/images/spring-springboot-1.jpg","_content":"![spring-springboot-thymeleaf](/images/spring-springboot-1.jpg)\n\nJPA(Java Persistence API) 是Sun官方提出的Java持久化规范。它为Java开发人员提供了一种对象/关联映射工具来管理Java应用中的关系数据。它的出现主要是为了简化现有的持久化开发工作和整合ORM技术，结束现在Hibernate、TopLink、JDO等ORM框架各自为营的局面。值得注意的是，JPA是在充分吸收了现有Hibernate、TopLink、JDO等ORM框架的长处发展而来，具有易于使用，伸缩性强等特点。从目前的开发社区的反应上看，JPA受到了极大的支持和赞扬，其中就包括了Spring和EJB3.0的开发团队。\n\n> JPA是一套规范，不是一套产品，而Hibernate、TopLink、JDO等是一套产品。\n> 如果说这些产品实现了JPA规范，那么我们就可以叫它们为JPA的实现产品。\n\n<!--more-->\n\n## Spring Data JPA\nSpring Data JPA 是 Spring 基于ORM框架、JPA规范的基础封装的一套JPA应用框架，可使开发者用极简的代码即可实现对数据的访问和操作。它提供了包括增删改查等在内的常用功能，且易于扩展！学习并使用Spring Data JPA可以极大提高开发效率！\n\n> Spring Data JPA让我们解脱了DAO层的操作，基本上所有的CRUD都可以依赖于它来实现。\n\n## 基本查询\n基本查询也分两种，一种是spring data jpa默认实现，一种是根据查询的方法名来自动解析成SQL。\n\n### 预先生成方法\nspring data jpa 默认预先生成了一些基本的CURD的方法，例如：增、删、改等等\n\n1. 继承JpaRepository\n```java\npublic class UserRepository extends JpaRepository<User, Long> {\n\n}\n```\n\n2. 使用默认方法, 顾名思义\n```java\n@AutoWired\nprivate UserRepository userRepository;\n\n@Test\npublic void testBaseOperation() throws Exception {\n  User user = new User();\n  userRepository.findAll();\n  userRepository.findOne(11);\n  userRepository.save(user);\n  userRepository.delete(user);\n  userRepository.count();\n  userRepository.exists(11);\n  \n  //...\n}\n```\n\n### 自定义简单查询\n自定义的简单查询就是根据方法名来自动生成SQL，主要的语法是`findXXBy`,`readXXBy`,`queryXXBy`,`countXXBy`,`getXXBy`后面跟属性名称。\n```java\nUser findByUserName(String userName);\n```\n也可以使用一些关键字`And`、`Or`\n```java\nUser findByUserNameOrEmail(String userName, String email);\n```\n修改、删除、统计同样是类似语法\n```java\nvoid deleteById(Long id);\nLong countByUserName(String userName);\n```\n基本上SQL体系中的关键词都可以使用，例如：`Like`、`IgnoreCase`、`OrderBy`\n```java\nList<User> findByEmailLike(String email);\nUser findByUserNameIgnoreCase(String userName);\nList<User> findByUserNameOrderByEmailDesc(String email);\n```\n具体的关键字，使用方法和生成的SQL如下表所示\n\n| Keyword | Sample | JPQL snippet |\n|:------  |:------  |:------  |\n| And | findByLastNameAndFirstName  | ... where x.lastname = ?1 and x.firstname = ?2 |\n| Or  | findByLastNameOrFirstName | ... where x.lastname = ?1 or x.firstname = ?2 |\n| Is<br>Equals  | findByFirstNameIs<br>findByFirstNameEquals  | ... where x.firstname = ?1 |\n| Between | findByStartDateBetween  | ... where x.startdate between ?1 and ?2 |\n| LessThan  | findByAgeLessThan | ... where x.age < ?1  |\n| LessThanEqual | findByAgeLessThanEqual  | ... where x.age <= ?1 |\n| GreaterThan | findByAgeGreaterThan  | ... where x.age > ?1  |\n| GreaterThanEqual  | findByAgeGreaterThanEqual | ... where x.age >= ?1 |\n| After | findByStartDateAfter  | ... where x.startdate > ?1  |\n| Before  | findByStartDateBefore | ... where x.startdate < ?1  |\n| IsNull  | findByAgeIsNull | ... where x.age is null |\n| IsNotNull<br>NotNull | findByAge(Is)NotNull  | ... where x.age not null |\n| Like  | findByFirstNameLike | ... where x.firstname like ?1 |\n| NotLike | findByFirstNameNotLike  | ... where x.firstName not like ?1 |\n| StartingWith  | findByFirstNameStartingWith | ... where x.firstname like ?1(parameter bound with appended %)  |\n| EndingWith  | findByFirstNameEndingWith | ... where x.firstname like ?1(parameter bound with prepend %) |\n| Containing  | findByFirstNameContaining | ... where x.firstname like ?1(parameter bound wrapped in %)\n| OrderBy | findByAgeOrderByLastNameDesc  | ... where x.age = ?1 order by x.lastname desc |\n| Not | findByLastNameNot | ... where x.lastname <> ?1  |\n| In  | findAgeIn(Collection ages)  | ... where x.age in ?1 |\n| NotIn | findAgeNotIn(Collection ages) | ... where x.age not in ?1 |\n| True  | findByActiveTrue  | ... where x.active = true |\n| False | findByActiveFalse | ... where x.active = false  |\n| IgnoreCase  | findByFirstNameIgnoreCase | ... where UPPER(x.firstname) = UPPER(?1)  |\n\n## 复杂查询\n在实际开发中我们需要用到分页、删选、连表等查询的时候就需要特殊的方法或者自定义SQL\n### 分页查询\n分页查询在实际开发中已经非常普遍了，spring data jpa 已经帮我们实现了分页的功能，在查询方法中，需要传入参数`Pageable`,当查询中有多个参数时，`Pageable`建议做为最后一个参数传入\n```java\nPage<User> findAll(Pageable pageable);\nPage<User> findByUserName(String userName, Pageable pageable);\n```\n`Pageable`是spring封装的分页实现类，使用的使用需要传入页码，每页条数和排序规则\n```java\n@AutoWired\nprivate UserRepository userRepository;\n\n@Test\npublic void testPageQuery() throws Exception {\n  int pageIndex = 1, pageSize = 10;\n  Sort sort = new Sort(Direction.DESC, \"id\");\n  Pageable pageable = new PageRequest(pageIndex, pageSize, sort);\n  userRepository.findAll(pageable);\n  userRepository.findByUserName(\"test\", pageable);\n}\n```\n\n### Limit查询\n```java\nUser findFirstByOrderByLastnameAsc();\nUser findTopByOrderByAgeDesc();\nPage<User> queryFirst10ByLastname(String lastname, Pageable pageable);\nList<User> findFirst10ByLastname(String lastname, Sort sort);\nList<User> findTop10ByLastname(String lastname, Pageable pageable);\n```\n\n### 自定义SQL查询\n其实spring data jpa绝大部分的SQL都可以根据方法名定义的方式来实现，但是由于某些原因我们想使用自定义的SQL来查询，spring data jpa也是完美支持的；在SQL的查询方法上面使用`@Query`注解，如涉及到删除和修改则需要加上`@Modifying`，也可以根据需要添加 `@Transactional` 对事务的支持，查询超时的设置等\n```java\n@Modifying\n@Query(\"update User u set u.username = ?1 where u.id = ?2\")\nint modifyUserNameByUserId(String userName,Long id);\n\n@Transactional\n@Modifying\n@Query(\"delete from User where id = ?1\")\nvoid deleteByUserId(Long id);\n\n@Transactional(timeout = 10)\n@Query(\"select u from User u where u.email = ?1\")\nUser findByEmail(String email);\n```\n\n### 多表查询\n多表查询在spring data jpa中有两种实现方式，第一种是利用hibernate的级联查询来实现，第二种是创建一个结果集接口来接收查询后的结果，这里主要是第二种方式。\n\n首先需要定义一个结果集的接口类。\n```java\npublic interface HotelSummary {\n  City getCity();\n  String getName();\n  Double getAverageRating();\n\n  default Integer getAverageRatingRounded() {\n    return getAverageRating() == null ? null : (int) Math.round(getAverageRating());\n  }\n}\n```\n查询的方法返回类型设置为新创建的接口\n```java\n@Query(\"select h.city as city, h.name as name, avg(r.rating) as averageRating \"\n      - \"from Hotel h left outer join h.reviews r where h.city = ?1 group by h\")\nPage<HotelSummary> findByCity(City city, Pageable pageable);\n\n@Query(\"select h.name as name, avg(r.rating) as averageRating \"\n      - \"from Hotel h left outer join h.reviews r group by h\")\nPage<HotelSummary> findByCity(Pageable pageable);\n```\n使用\n```java\nPage<HotemlSummary> hotels = hotelRepository.findByCity(new PageRequest(0, 10, Direction.ASC, \"name\"));\nfor(HotelSummary summary : hotels){\n  System.out.println(\"Name \" + summary.getName());\n}\n```\n> 在运行中Spring会给接口（HotelSummary）自动生成一个代理类来接收返回结果，代码汇总使用`getXX()`的形式来获取\n\n## 多数据源支持\n### 同源数据库\n日常项目中因为使用的是分布式开发模式，不同的服务有不同的数据源，常常需要在一个项目中使用多个数据源，因此需要配置spring data jpa 以适合对多数据源的使用，一般分以下三步：\n1. 配置多数据源\n2. 不同源的实体类放入不同包路径\n3. 声明不同的包路径下使用不同的数据源、事务支持\n\n可参考：[Spring Boot多数据源配置与使用](https://www.jianshu.com/p/34730e595a8c)\n\n### 异构数据库\n比如我们的项目中，即需要对mysql的支持，也需要对mongodb的支持等。\n\n实体类声明`@Entity`关系型数据库支持类型、声明`@Document`为mongodb支持类型，不同的数据源使用不同的实体就可以了\n```java\ninterface PersonRepository extends JpaRepository<Person, Long> {\n  // ...\n}\n\n@Entity\npublic class Person {\n  // ...\n}\n\ninterface UserRepository extends MongoRepository<User, Long> {\n  // ...\n}\n\n@Document\npublic class User {\n  // ...\n}\n```\n但是如果Person既使用mysql也使用mongodb呢，也可以做混合使用\n```java\ninterface JpaPersonRepository extends JpaRepository<Person, Long> {\n  // ...\n}\n\ninterface MongoDBPersonRepository extends MongoRepository<Person, Long> {\n  // ...\n}\n\n@Entity\n@Document\npublic class Person {\n  // ...\n}\n```\n也可以通过对不同的包路径进行声明，比如A包路径下使用mysql，B包路径下使用mongoDB\n```java\n@EnableJpaRepository(basePackages = \"com.example.repositories.jpa\")\n@EnableMongoRepository(basePackages = \"com.example.repositories.mongo\")\ninterface Configuration { }\n```\n\n## 其他\n### 使用枚举\n使用枚举的时候，我们希望数据库中存储的是枚举对应的String类型，而不是枚举的索引值，需要在属性上面添加`@Enumerated(EnumType.STRING)`注解\n```java\n@Enumerated(EnumType.STRING)\n@Column(nullable = true)\nprivate UserType type;\n```\n\n### 不需要和数据库映射的属性\n正常情况下，我们在实体上加上注解`@Entity`，就会让实体类的属性和表的列相关联，如果其中某个属性不需要和数据库来进行关联，而只是展示的时候做计算，只需要加上`@Transient`属性即可。\n```java\n@Transient\nprivate String userName;\n```\n\n## 参考\n[Spring Data JPA 参考指南 中文版](https://ityouknow.gitbooks.io/spring-data-jpa-reference-documentation/content/)","source":"_posts/spring-springboot-jpa.md","raw":"---\ntitle: SpringBoot实战（五）Jpa\nauthor: SnailDev\ntags:\n  - SpringBoot\n  - Jpa\ncategories:\n  - SpringBoot\ndate: 2018-09-05 23:27:05\nfeatured_image: /images/spring-springboot-1.jpg\n---\n![spring-springboot-thymeleaf](/images/spring-springboot-1.jpg)\n\nJPA(Java Persistence API) 是Sun官方提出的Java持久化规范。它为Java开发人员提供了一种对象/关联映射工具来管理Java应用中的关系数据。它的出现主要是为了简化现有的持久化开发工作和整合ORM技术，结束现在Hibernate、TopLink、JDO等ORM框架各自为营的局面。值得注意的是，JPA是在充分吸收了现有Hibernate、TopLink、JDO等ORM框架的长处发展而来，具有易于使用，伸缩性强等特点。从目前的开发社区的反应上看，JPA受到了极大的支持和赞扬，其中就包括了Spring和EJB3.0的开发团队。\n\n> JPA是一套规范，不是一套产品，而Hibernate、TopLink、JDO等是一套产品。\n> 如果说这些产品实现了JPA规范，那么我们就可以叫它们为JPA的实现产品。\n\n<!--more-->\n\n## Spring Data JPA\nSpring Data JPA 是 Spring 基于ORM框架、JPA规范的基础封装的一套JPA应用框架，可使开发者用极简的代码即可实现对数据的访问和操作。它提供了包括增删改查等在内的常用功能，且易于扩展！学习并使用Spring Data JPA可以极大提高开发效率！\n\n> Spring Data JPA让我们解脱了DAO层的操作，基本上所有的CRUD都可以依赖于它来实现。\n\n## 基本查询\n基本查询也分两种，一种是spring data jpa默认实现，一种是根据查询的方法名来自动解析成SQL。\n\n### 预先生成方法\nspring data jpa 默认预先生成了一些基本的CURD的方法，例如：增、删、改等等\n\n1. 继承JpaRepository\n```java\npublic class UserRepository extends JpaRepository<User, Long> {\n\n}\n```\n\n2. 使用默认方法, 顾名思义\n```java\n@AutoWired\nprivate UserRepository userRepository;\n\n@Test\npublic void testBaseOperation() throws Exception {\n  User user = new User();\n  userRepository.findAll();\n  userRepository.findOne(11);\n  userRepository.save(user);\n  userRepository.delete(user);\n  userRepository.count();\n  userRepository.exists(11);\n  \n  //...\n}\n```\n\n### 自定义简单查询\n自定义的简单查询就是根据方法名来自动生成SQL，主要的语法是`findXXBy`,`readXXBy`,`queryXXBy`,`countXXBy`,`getXXBy`后面跟属性名称。\n```java\nUser findByUserName(String userName);\n```\n也可以使用一些关键字`And`、`Or`\n```java\nUser findByUserNameOrEmail(String userName, String email);\n```\n修改、删除、统计同样是类似语法\n```java\nvoid deleteById(Long id);\nLong countByUserName(String userName);\n```\n基本上SQL体系中的关键词都可以使用，例如：`Like`、`IgnoreCase`、`OrderBy`\n```java\nList<User> findByEmailLike(String email);\nUser findByUserNameIgnoreCase(String userName);\nList<User> findByUserNameOrderByEmailDesc(String email);\n```\n具体的关键字，使用方法和生成的SQL如下表所示\n\n| Keyword | Sample | JPQL snippet |\n|:------  |:------  |:------  |\n| And | findByLastNameAndFirstName  | ... where x.lastname = ?1 and x.firstname = ?2 |\n| Or  | findByLastNameOrFirstName | ... where x.lastname = ?1 or x.firstname = ?2 |\n| Is<br>Equals  | findByFirstNameIs<br>findByFirstNameEquals  | ... where x.firstname = ?1 |\n| Between | findByStartDateBetween  | ... where x.startdate between ?1 and ?2 |\n| LessThan  | findByAgeLessThan | ... where x.age < ?1  |\n| LessThanEqual | findByAgeLessThanEqual  | ... where x.age <= ?1 |\n| GreaterThan | findByAgeGreaterThan  | ... where x.age > ?1  |\n| GreaterThanEqual  | findByAgeGreaterThanEqual | ... where x.age >= ?1 |\n| After | findByStartDateAfter  | ... where x.startdate > ?1  |\n| Before  | findByStartDateBefore | ... where x.startdate < ?1  |\n| IsNull  | findByAgeIsNull | ... where x.age is null |\n| IsNotNull<br>NotNull | findByAge(Is)NotNull  | ... where x.age not null |\n| Like  | findByFirstNameLike | ... where x.firstname like ?1 |\n| NotLike | findByFirstNameNotLike  | ... where x.firstName not like ?1 |\n| StartingWith  | findByFirstNameStartingWith | ... where x.firstname like ?1(parameter bound with appended %)  |\n| EndingWith  | findByFirstNameEndingWith | ... where x.firstname like ?1(parameter bound with prepend %) |\n| Containing  | findByFirstNameContaining | ... where x.firstname like ?1(parameter bound wrapped in %)\n| OrderBy | findByAgeOrderByLastNameDesc  | ... where x.age = ?1 order by x.lastname desc |\n| Not | findByLastNameNot | ... where x.lastname <> ?1  |\n| In  | findAgeIn(Collection ages)  | ... where x.age in ?1 |\n| NotIn | findAgeNotIn(Collection ages) | ... where x.age not in ?1 |\n| True  | findByActiveTrue  | ... where x.active = true |\n| False | findByActiveFalse | ... where x.active = false  |\n| IgnoreCase  | findByFirstNameIgnoreCase | ... where UPPER(x.firstname) = UPPER(?1)  |\n\n## 复杂查询\n在实际开发中我们需要用到分页、删选、连表等查询的时候就需要特殊的方法或者自定义SQL\n### 分页查询\n分页查询在实际开发中已经非常普遍了，spring data jpa 已经帮我们实现了分页的功能，在查询方法中，需要传入参数`Pageable`,当查询中有多个参数时，`Pageable`建议做为最后一个参数传入\n```java\nPage<User> findAll(Pageable pageable);\nPage<User> findByUserName(String userName, Pageable pageable);\n```\n`Pageable`是spring封装的分页实现类，使用的使用需要传入页码，每页条数和排序规则\n```java\n@AutoWired\nprivate UserRepository userRepository;\n\n@Test\npublic void testPageQuery() throws Exception {\n  int pageIndex = 1, pageSize = 10;\n  Sort sort = new Sort(Direction.DESC, \"id\");\n  Pageable pageable = new PageRequest(pageIndex, pageSize, sort);\n  userRepository.findAll(pageable);\n  userRepository.findByUserName(\"test\", pageable);\n}\n```\n\n### Limit查询\n```java\nUser findFirstByOrderByLastnameAsc();\nUser findTopByOrderByAgeDesc();\nPage<User> queryFirst10ByLastname(String lastname, Pageable pageable);\nList<User> findFirst10ByLastname(String lastname, Sort sort);\nList<User> findTop10ByLastname(String lastname, Pageable pageable);\n```\n\n### 自定义SQL查询\n其实spring data jpa绝大部分的SQL都可以根据方法名定义的方式来实现，但是由于某些原因我们想使用自定义的SQL来查询，spring data jpa也是完美支持的；在SQL的查询方法上面使用`@Query`注解，如涉及到删除和修改则需要加上`@Modifying`，也可以根据需要添加 `@Transactional` 对事务的支持，查询超时的设置等\n```java\n@Modifying\n@Query(\"update User u set u.username = ?1 where u.id = ?2\")\nint modifyUserNameByUserId(String userName,Long id);\n\n@Transactional\n@Modifying\n@Query(\"delete from User where id = ?1\")\nvoid deleteByUserId(Long id);\n\n@Transactional(timeout = 10)\n@Query(\"select u from User u where u.email = ?1\")\nUser findByEmail(String email);\n```\n\n### 多表查询\n多表查询在spring data jpa中有两种实现方式，第一种是利用hibernate的级联查询来实现，第二种是创建一个结果集接口来接收查询后的结果，这里主要是第二种方式。\n\n首先需要定义一个结果集的接口类。\n```java\npublic interface HotelSummary {\n  City getCity();\n  String getName();\n  Double getAverageRating();\n\n  default Integer getAverageRatingRounded() {\n    return getAverageRating() == null ? null : (int) Math.round(getAverageRating());\n  }\n}\n```\n查询的方法返回类型设置为新创建的接口\n```java\n@Query(\"select h.city as city, h.name as name, avg(r.rating) as averageRating \"\n      - \"from Hotel h left outer join h.reviews r where h.city = ?1 group by h\")\nPage<HotelSummary> findByCity(City city, Pageable pageable);\n\n@Query(\"select h.name as name, avg(r.rating) as averageRating \"\n      - \"from Hotel h left outer join h.reviews r group by h\")\nPage<HotelSummary> findByCity(Pageable pageable);\n```\n使用\n```java\nPage<HotemlSummary> hotels = hotelRepository.findByCity(new PageRequest(0, 10, Direction.ASC, \"name\"));\nfor(HotelSummary summary : hotels){\n  System.out.println(\"Name \" + summary.getName());\n}\n```\n> 在运行中Spring会给接口（HotelSummary）自动生成一个代理类来接收返回结果，代码汇总使用`getXX()`的形式来获取\n\n## 多数据源支持\n### 同源数据库\n日常项目中因为使用的是分布式开发模式，不同的服务有不同的数据源，常常需要在一个项目中使用多个数据源，因此需要配置spring data jpa 以适合对多数据源的使用，一般分以下三步：\n1. 配置多数据源\n2. 不同源的实体类放入不同包路径\n3. 声明不同的包路径下使用不同的数据源、事务支持\n\n可参考：[Spring Boot多数据源配置与使用](https://www.jianshu.com/p/34730e595a8c)\n\n### 异构数据库\n比如我们的项目中，即需要对mysql的支持，也需要对mongodb的支持等。\n\n实体类声明`@Entity`关系型数据库支持类型、声明`@Document`为mongodb支持类型，不同的数据源使用不同的实体就可以了\n```java\ninterface PersonRepository extends JpaRepository<Person, Long> {\n  // ...\n}\n\n@Entity\npublic class Person {\n  // ...\n}\n\ninterface UserRepository extends MongoRepository<User, Long> {\n  // ...\n}\n\n@Document\npublic class User {\n  // ...\n}\n```\n但是如果Person既使用mysql也使用mongodb呢，也可以做混合使用\n```java\ninterface JpaPersonRepository extends JpaRepository<Person, Long> {\n  // ...\n}\n\ninterface MongoDBPersonRepository extends MongoRepository<Person, Long> {\n  // ...\n}\n\n@Entity\n@Document\npublic class Person {\n  // ...\n}\n```\n也可以通过对不同的包路径进行声明，比如A包路径下使用mysql，B包路径下使用mongoDB\n```java\n@EnableJpaRepository(basePackages = \"com.example.repositories.jpa\")\n@EnableMongoRepository(basePackages = \"com.example.repositories.mongo\")\ninterface Configuration { }\n```\n\n## 其他\n### 使用枚举\n使用枚举的时候，我们希望数据库中存储的是枚举对应的String类型，而不是枚举的索引值，需要在属性上面添加`@Enumerated(EnumType.STRING)`注解\n```java\n@Enumerated(EnumType.STRING)\n@Column(nullable = true)\nprivate UserType type;\n```\n\n### 不需要和数据库映射的属性\n正常情况下，我们在实体上加上注解`@Entity`，就会让实体类的属性和表的列相关联，如果其中某个属性不需要和数据库来进行关联，而只是展示的时候做计算，只需要加上`@Transient`属性即可。\n```java\n@Transient\nprivate String userName;\n```\n\n## 参考\n[Spring Data JPA 参考指南 中文版](https://ityouknow.gitbooks.io/spring-data-jpa-reference-documentation/content/)","slug":"spring-springboot-jpa","published":1,"updated":"2018-10-07T12:35:33.713Z","_id":"cjmyu0sbb000qx8uo1femuffq","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/images/spring-springboot-1.jpg\" alt=\"spring-springboot-thymeleaf\"></p><p>JPA(Java Persistence API) 是Sun官方提出的Java持久化规范。它为Java开发人员提供了一种对象/关联映射工具来管理Java应用中的关系数据。它的出现主要是为了简化现有的持久化开发工作和整合ORM技术，结束现在Hibernate、TopLink、JDO等ORM框架各自为营的局面。值得注意的是，JPA是在充分吸收了现有Hibernate、TopLink、JDO等ORM框架的长处发展而来，具有易于使用，伸缩性强等特点。从目前的开发社区的反应上看，JPA受到了极大的支持和赞扬，其中就包括了Spring和EJB3.0的开发团队。</p><blockquote><p>JPA是一套规范，不是一套产品，而Hibernate、TopLink、JDO等是一套产品。 如果说这些产品实现了JPA规范，那么我们就可以叫它们为JPA的实现产品。</p></blockquote><a id=\"more\"></a><h2 id=\"Spring-Data-JPA\"><a href=\"#Spring-Data-JPA\" class=\"headerlink\" title=\"Spring Data JPA\"></a>Spring Data JPA</h2><p>Spring Data JPA 是 Spring 基于ORM框架、JPA规范的基础封装的一套JPA应用框架，可使开发者用极简的代码即可实现对数据的访问和操作。它提供了包括增删改查等在内的常用功能，且易于扩展！学习并使用Spring Data JPA可以极大提高开发效率！</p><blockquote><p>Spring Data JPA让我们解脱了DAO层的操作，基本上所有的CRUD都可以依赖于它来实现。</p></blockquote><h2 id=\"基本查询\"><a href=\"#基本查询\" class=\"headerlink\" title=\"基本查询\"></a>基本查询</h2><p>基本查询也分两种，一种是spring data jpa默认实现，一种是根据查询的方法名来自动解析成SQL。</p><h3 id=\"预先生成方法\"><a href=\"#预先生成方法\" class=\"headerlink\" title=\"预先生成方法\"></a>预先生成方法</h3><p>spring data jpa 默认预先生成了一些基本的CURD的方法，例如：增、删、改等等</p><ol><li><p>继承JpaRepository</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserRepository</span> <span class=\"keyword\">extends</span> <span class=\"title\">JpaRepository</span>&lt;<span class=\"title\">User</span>, <span class=\"title\">Long</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用默认方法, 顾名思义</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AutoWired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> UserRepository userRepository;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testBaseOperation</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">  User user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">  userRepository.findAll();</span><br><span class=\"line\">  userRepository.findOne(<span class=\"number\">11</span>);</span><br><span class=\"line\">  userRepository.save(user);</span><br><span class=\"line\">  userRepository.delete(user);</span><br><span class=\"line\">  userRepository.count();</span><br><span class=\"line\">  userRepository.exists(<span class=\"number\">11</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id=\"自定义简单查询\"><a href=\"#自定义简单查询\" class=\"headerlink\" title=\"自定义简单查询\"></a>自定义简单查询</h3><p>自定义的简单查询就是根据方法名来自动生成SQL，主要的语法是<code>findXXBy</code>,<code>readXXBy</code>,<code>queryXXBy</code>,<code>countXXBy</code>,<code>getXXBy</code>后面跟属性名称。</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">User <span class=\"title\">findByUserName</span><span class=\"params\">(String userName)</span></span>;</span><br></pre></td></tr></table></figure><p></p><p>也可以使用一些关键字<code>And</code>、<code>Or</code></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">User <span class=\"title\">findByUserNameOrEmail</span><span class=\"params\">(String userName, String email)</span></span>;</span><br></pre></td></tr></table></figure><p></p><p>修改、删除、统计同样是类似语法</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteById</span><span class=\"params\">(Long id)</span></span>;</span><br><span class=\"line\"><span class=\"function\">Long <span class=\"title\">countByUserName</span><span class=\"params\">(String userName)</span></span>;</span><br></pre></td></tr></table></figure><p></p><p>基本上SQL体系中的关键词都可以使用，例如：<code>Like</code>、<code>IgnoreCase</code>、<code>OrderBy</code></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">List&lt;User&gt; <span class=\"title\">findByEmailLike</span><span class=\"params\">(String email)</span></span>;</span><br><span class=\"line\"><span class=\"function\">User <span class=\"title\">findByUserNameIgnoreCase</span><span class=\"params\">(String userName)</span></span>;</span><br><span class=\"line\"><span class=\"function\">List&lt;User&gt; <span class=\"title\">findByUserNameOrderByEmailDesc</span><span class=\"params\">(String email)</span></span>;</span><br></pre></td></tr></table></figure><p></p><p>具体的关键字，使用方法和生成的SQL如下表所示</p><table><thead><tr><th style=\"text-align:left\">Keyword</th><th style=\"text-align:left\">Sample</th><th style=\"text-align:left\">JPQL snippet</th></tr></thead><tbody><tr><td style=\"text-align:left\">And</td><td style=\"text-align:left\">findByLastNameAndFirstName</td><td style=\"text-align:left\">… where x.lastname = ?1 and x.firstname = ?2</td></tr><tr><td style=\"text-align:left\">Or</td><td style=\"text-align:left\">findByLastNameOrFirstName</td><td style=\"text-align:left\">… where x.lastname = ?1 or x.firstname = ?2</td></tr><tr><td style=\"text-align:left\">Is<br>Equals</td><td style=\"text-align:left\">findByFirstNameIs<br>findByFirstNameEquals</td><td style=\"text-align:left\">… where x.firstname = ?1</td></tr><tr><td style=\"text-align:left\">Between</td><td style=\"text-align:left\">findByStartDateBetween</td><td style=\"text-align:left\">… where x.startdate between ?1 and ?2</td></tr><tr><td style=\"text-align:left\">LessThan</td><td style=\"text-align:left\">findByAgeLessThan</td><td style=\"text-align:left\">… where x.age &lt; ?1</td></tr><tr><td style=\"text-align:left\">LessThanEqual</td><td style=\"text-align:left\">findByAgeLessThanEqual</td><td style=\"text-align:left\">… where x.age &lt;= ?1</td></tr><tr><td style=\"text-align:left\">GreaterThan</td><td style=\"text-align:left\">findByAgeGreaterThan</td><td style=\"text-align:left\">… where x.age &gt; ?1</td></tr><tr><td style=\"text-align:left\">GreaterThanEqual</td><td style=\"text-align:left\">findByAgeGreaterThanEqual</td><td style=\"text-align:left\">… where x.age &gt;= ?1</td></tr><tr><td style=\"text-align:left\">After</td><td style=\"text-align:left\">findByStartDateAfter</td><td style=\"text-align:left\">… where x.startdate &gt; ?1</td></tr><tr><td style=\"text-align:left\">Before</td><td style=\"text-align:left\">findByStartDateBefore</td><td style=\"text-align:left\">… where x.startdate &lt; ?1</td></tr><tr><td style=\"text-align:left\">IsNull</td><td style=\"text-align:left\">findByAgeIsNull</td><td style=\"text-align:left\">… where x.age is null</td></tr><tr><td style=\"text-align:left\">IsNotNull<br>NotNull</td><td style=\"text-align:left\">findByAge(Is)NotNull</td><td style=\"text-align:left\">… where x.age not null</td></tr><tr><td style=\"text-align:left\">Like</td><td style=\"text-align:left\">findByFirstNameLike</td><td style=\"text-align:left\">… where x.firstname like ?1</td></tr><tr><td style=\"text-align:left\">NotLike</td><td style=\"text-align:left\">findByFirstNameNotLike</td><td style=\"text-align:left\">… where x.firstName not like ?1</td></tr><tr><td style=\"text-align:left\">StartingWith</td><td style=\"text-align:left\">findByFirstNameStartingWith</td><td style=\"text-align:left\">… where x.firstname like ?1(parameter bound with appended %)</td></tr><tr><td style=\"text-align:left\">EndingWith</td><td style=\"text-align:left\">findByFirstNameEndingWith</td><td style=\"text-align:left\">… where x.firstname like ?1(parameter bound with prepend %)</td></tr><tr><td style=\"text-align:left\">Containing</td><td style=\"text-align:left\">findByFirstNameContaining</td><td style=\"text-align:left\">… where x.firstname like ?1(parameter bound wrapped in %)</td></tr><tr><td style=\"text-align:left\">OrderBy</td><td style=\"text-align:left\">findByAgeOrderByLastNameDesc</td><td style=\"text-align:left\">… where x.age = ?1 order by x.lastname desc</td></tr><tr><td style=\"text-align:left\">Not</td><td style=\"text-align:left\">findByLastNameNot</td><td style=\"text-align:left\">… where x.lastname &lt;&gt; ?1</td></tr><tr><td style=\"text-align:left\">In</td><td style=\"text-align:left\">findAgeIn(Collection ages)</td><td style=\"text-align:left\">… where x.age in ?1</td></tr><tr><td style=\"text-align:left\">NotIn</td><td style=\"text-align:left\">findAgeNotIn(Collection ages)</td><td style=\"text-align:left\">… where x.age not in ?1</td></tr><tr><td style=\"text-align:left\">True</td><td style=\"text-align:left\">findByActiveTrue</td><td style=\"text-align:left\">… where x.active = true</td></tr><tr><td style=\"text-align:left\">False</td><td style=\"text-align:left\">findByActiveFalse</td><td style=\"text-align:left\">… where x.active = false</td></tr><tr><td style=\"text-align:left\">IgnoreCase</td><td style=\"text-align:left\">findByFirstNameIgnoreCase</td><td style=\"text-align:left\">… where UPPER(x.firstname) = UPPER(?1)</td></tr></tbody></table><h2 id=\"复杂查询\"><a href=\"#复杂查询\" class=\"headerlink\" title=\"复杂查询\"></a>复杂查询</h2><p>在实际开发中我们需要用到分页、删选、连表等查询的时候就需要特殊的方法或者自定义SQL</p><h3 id=\"分页查询\"><a href=\"#分页查询\" class=\"headerlink\" title=\"分页查询\"></a>分页查询</h3><p>分页查询在实际开发中已经非常普遍了，spring data jpa 已经帮我们实现了分页的功能，在查询方法中，需要传入参数<code>Pageable</code>,当查询中有多个参数时，<code>Pageable</code>建议做为最后一个参数传入</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Page&lt;User&gt; <span class=\"title\">findAll</span><span class=\"params\">(Pageable pageable)</span></span>;</span><br><span class=\"line\"><span class=\"function\">Page&lt;User&gt; <span class=\"title\">findByUserName</span><span class=\"params\">(String userName, Pageable pageable)</span></span>;</span><br></pre></td></tr></table></figure><p></p><p><code>Pageable</code>是spring封装的分页实现类，使用的使用需要传入页码，每页条数和排序规则</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AutoWired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> UserRepository userRepository;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testPageQuery</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> pageIndex = <span class=\"number\">1</span>, pageSize = <span class=\"number\">10</span>;</span><br><span class=\"line\">  Sort sort = <span class=\"keyword\">new</span> Sort(Direction.DESC, <span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">  Pageable pageable = <span class=\"keyword\">new</span> PageRequest(pageIndex, pageSize, sort);</span><br><span class=\"line\">  userRepository.findAll(pageable);</span><br><span class=\"line\">  userRepository.findByUserName(<span class=\"string\">\"test\"</span>, pageable);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id=\"Limit查询\"><a href=\"#Limit查询\" class=\"headerlink\" title=\"Limit查询\"></a>Limit查询</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">User <span class=\"title\">findFirstByOrderByLastnameAsc</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\">User <span class=\"title\">findTopByOrderByAgeDesc</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\">Page&lt;User&gt; <span class=\"title\">queryFirst10ByLastname</span><span class=\"params\">(String lastname, Pageable pageable)</span></span>;</span><br><span class=\"line\"><span class=\"function\">List&lt;User&gt; <span class=\"title\">findFirst10ByLastname</span><span class=\"params\">(String lastname, Sort sort)</span></span>;</span><br><span class=\"line\"><span class=\"function\">List&lt;User&gt; <span class=\"title\">findTop10ByLastname</span><span class=\"params\">(String lastname, Pageable pageable)</span></span>;</span><br></pre></td></tr></table></figure><h3 id=\"自定义SQL查询\"><a href=\"#自定义SQL查询\" class=\"headerlink\" title=\"自定义SQL查询\"></a>自定义SQL查询</h3><p>其实spring data jpa绝大部分的SQL都可以根据方法名定义的方式来实现，但是由于某些原因我们想使用自定义的SQL来查询，spring data jpa也是完美支持的；在SQL的查询方法上面使用<code>@Query</code>注解，如涉及到删除和修改则需要加上<code>@Modifying</code>，也可以根据需要添加 <code>@Transactional</code> 对事务的支持，查询超时的设置等</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Modifying</span></span><br><span class=\"line\"><span class=\"meta\">@Query</span>(<span class=\"string\">\"update User u set u.username = ?1 where u.id = ?2\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">modifyUserNameByUserId</span><span class=\"params\">(String userName,Long id)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Transactional</span></span><br><span class=\"line\"><span class=\"meta\">@Modifying</span></span><br><span class=\"line\"><span class=\"meta\">@Query</span>(<span class=\"string\">\"delete from User where id = ?1\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteByUserId</span><span class=\"params\">(Long id)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Transactional</span>(timeout = <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"meta\">@Query</span>(<span class=\"string\">\"select u from User u where u.email = ?1\"</span>)</span><br><span class=\"line\"><span class=\"function\">User <span class=\"title\">findByEmail</span><span class=\"params\">(String email)</span></span>;</span><br></pre></td></tr></table></figure><p></p><h3 id=\"多表查询\"><a href=\"#多表查询\" class=\"headerlink\" title=\"多表查询\"></a>多表查询</h3><p>多表查询在spring data jpa中有两种实现方式，第一种是利用hibernate的级联查询来实现，第二种是创建一个结果集接口来接收查询后的结果，这里主要是第二种方式。</p><p>首先需要定义一个结果集的接口类。</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">HotelSummary</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">City <span class=\"title\">getCity</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"function\">String <span class=\"title\">getName</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"function\">Double <span class=\"title\">getAverageRating</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">default</span> Integer <span class=\"title\">getAverageRatingRounded</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getAverageRating() == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : (<span class=\"keyword\">int</span>) Math.round(getAverageRating());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>查询的方法返回类型设置为新创建的接口</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Query</span>(<span class=\"string\">\"select h.city as city, h.name as name, avg(r.rating) as averageRating \"</span></span><br><span class=\"line\">      - <span class=\"string\">\"from Hotel h left outer join h.reviews r where h.city = ?1 group by h\"</span>)</span><br><span class=\"line\"><span class=\"function\">Page&lt;HotelSummary&gt; <span class=\"title\">findByCity</span><span class=\"params\">(City city, Pageable pageable)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Query</span>(<span class=\"string\">\"select h.name as name, avg(r.rating) as averageRating \"</span></span><br><span class=\"line\">      - <span class=\"string\">\"from Hotel h left outer join h.reviews r group by h\"</span>)</span><br><span class=\"line\"><span class=\"function\">Page&lt;HotelSummary&gt; <span class=\"title\">findByCity</span><span class=\"params\">(Pageable pageable)</span></span>;</span><br></pre></td></tr></table></figure><p></p><p>使用</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Page&lt;HotemlSummary&gt; hotels = hotelRepository.findByCity(<span class=\"keyword\">new</span> PageRequest(<span class=\"number\">0</span>, <span class=\"number\">10</span>, Direction.ASC, <span class=\"string\">\"name\"</span>));</span><br><span class=\"line\"><span class=\"keyword\">for</span>(HotelSummary summary : hotels)&#123;</span><br><span class=\"line\">  System.out.println(<span class=\"string\">\"Name \"</span> + summary.getName());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><blockquote><p>在运行中Spring会给接口（HotelSummary）自动生成一个代理类来接收返回结果，代码汇总使用<code>getXX()</code>的形式来获取</p></blockquote><h2 id=\"多数据源支持\"><a href=\"#多数据源支持\" class=\"headerlink\" title=\"多数据源支持\"></a>多数据源支持</h2><h3 id=\"同源数据库\"><a href=\"#同源数据库\" class=\"headerlink\" title=\"同源数据库\"></a>同源数据库</h3><p>日常项目中因为使用的是分布式开发模式，不同的服务有不同的数据源，常常需要在一个项目中使用多个数据源，因此需要配置spring data jpa 以适合对多数据源的使用，一般分以下三步：</p><ol><li>配置多数据源</li><li>不同源的实体类放入不同包路径</li><li>声明不同的包路径下使用不同的数据源、事务支持</li></ol><p>可参考：<a href=\"https://www.jianshu.com/p/34730e595a8c\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">Spring Boot多数据源配置与使用</a></p><h3 id=\"异构数据库\"><a href=\"#异构数据库\" class=\"headerlink\" title=\"异构数据库\"></a>异构数据库</h3><p>比如我们的项目中，即需要对mysql的支持，也需要对mongodb的支持等。</p><p>实体类声明<code>@Entity</code>关系型数据库支持类型、声明<code>@Document</code>为mongodb支持类型，不同的数据源使用不同的实体就可以了</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PersonRepository</span> <span class=\"keyword\">extends</span> <span class=\"title\">JpaRepository</span>&lt;<span class=\"title\">Person</span>, <span class=\"title\">Long</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserRepository</span> <span class=\"keyword\">extends</span> <span class=\"title\">MongoRepository</span>&lt;<span class=\"title\">User</span>, <span class=\"title\">Long</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Document</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>但是如果Person既使用mysql也使用mongodb呢，也可以做混合使用</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">JpaPersonRepository</span> <span class=\"keyword\">extends</span> <span class=\"title\">JpaRepository</span>&lt;<span class=\"title\">Person</span>, <span class=\"title\">Long</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MongoDBPersonRepository</span> <span class=\"keyword\">extends</span> <span class=\"title\">MongoRepository</span>&lt;<span class=\"title\">Person</span>, <span class=\"title\">Long</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"meta\">@Document</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>也可以通过对不同的包路径进行声明，比如A包路径下使用mysql，B包路径下使用mongoDB</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableJpaRepository</span>(basePackages = <span class=\"string\">\"com.example.repositories.jpa\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@EnableMongoRepository</span>(basePackages = <span class=\"string\">\"com.example.repositories.mongo\"</span>)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Configuration</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><p></p><h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"使用枚举\"><a href=\"#使用枚举\" class=\"headerlink\" title=\"使用枚举\"></a>使用枚举</h3><p>使用枚举的时候，我们希望数据库中存储的是枚举对应的String类型，而不是枚举的索引值，需要在属性上面添加<code>@Enumerated(EnumType.STRING)</code>注解</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Enumerated</span>(EnumType.STRING)</span><br><span class=\"line\"><span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">true</span>)</span><br><span class=\"line\"><span class=\"keyword\">private</span> UserType type;</span><br></pre></td></tr></table></figure><p></p><h3 id=\"不需要和数据库映射的属性\"><a href=\"#不需要和数据库映射的属性\" class=\"headerlink\" title=\"不需要和数据库映射的属性\"></a>不需要和数据库映射的属性</h3><p>正常情况下，我们在实体上加上注解<code>@Entity</code>，就会让实体类的属性和表的列相关联，如果其中某个属性不需要和数据库来进行关联，而只是展示的时候做计算，只需要加上<code>@Transient</code>属性即可。</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Transient</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String userName;</span><br></pre></td></tr></table></figure><p></p><h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://ityouknow.gitbooks.io/spring-data-jpa-reference-documentation/content/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">Spring Data JPA 参考指南 中文版</a></p>","site":{"data":{}},"excerpt":"<p><img src=\"/images/spring-springboot-1.jpg\" alt=\"spring-springboot-thymeleaf\"></p><p>JPA(Java Persistence API) 是Sun官方提出的Java持久化规范。它为Java开发人员提供了一种对象/关联映射工具来管理Java应用中的关系数据。它的出现主要是为了简化现有的持久化开发工作和整合ORM技术，结束现在Hibernate、TopLink、JDO等ORM框架各自为营的局面。值得注意的是，JPA是在充分吸收了现有Hibernate、TopLink、JDO等ORM框架的长处发展而来，具有易于使用，伸缩性强等特点。从目前的开发社区的反应上看，JPA受到了极大的支持和赞扬，其中就包括了Spring和EJB3.0的开发团队。</p><blockquote><p>JPA是一套规范，不是一套产品，而Hibernate、TopLink、JDO等是一套产品。 如果说这些产品实现了JPA规范，那么我们就可以叫它们为JPA的实现产品。</p></blockquote>","more":"<h2 id=\"Spring-Data-JPA\"><a href=\"#Spring-Data-JPA\" class=\"headerlink\" title=\"Spring Data JPA\"></a>Spring Data JPA</h2><p>Spring Data JPA 是 Spring 基于ORM框架、JPA规范的基础封装的一套JPA应用框架，可使开发者用极简的代码即可实现对数据的访问和操作。它提供了包括增删改查等在内的常用功能，且易于扩展！学习并使用Spring Data JPA可以极大提高开发效率！</p><blockquote><p>Spring Data JPA让我们解脱了DAO层的操作，基本上所有的CRUD都可以依赖于它来实现。</p></blockquote><h2 id=\"基本查询\"><a href=\"#基本查询\" class=\"headerlink\" title=\"基本查询\"></a>基本查询</h2><p>基本查询也分两种，一种是spring data jpa默认实现，一种是根据查询的方法名来自动解析成SQL。</p><h3 id=\"预先生成方法\"><a href=\"#预先生成方法\" class=\"headerlink\" title=\"预先生成方法\"></a>预先生成方法</h3><p>spring data jpa 默认预先生成了一些基本的CURD的方法，例如：增、删、改等等</p><ol><li><p>继承JpaRepository</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserRepository</span> <span class=\"keyword\">extends</span> <span class=\"title\">JpaRepository</span>&lt;<span class=\"title\">User</span>, <span class=\"title\">Long</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用默认方法, 顾名思义</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AutoWired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> UserRepository userRepository;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testBaseOperation</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">  User user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">  userRepository.findAll();</span><br><span class=\"line\">  userRepository.findOne(<span class=\"number\">11</span>);</span><br><span class=\"line\">  userRepository.save(user);</span><br><span class=\"line\">  userRepository.delete(user);</span><br><span class=\"line\">  userRepository.count();</span><br><span class=\"line\">  userRepository.exists(<span class=\"number\">11</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id=\"自定义简单查询\"><a href=\"#自定义简单查询\" class=\"headerlink\" title=\"自定义简单查询\"></a>自定义简单查询</h3><p>自定义的简单查询就是根据方法名来自动生成SQL，主要的语法是<code>findXXBy</code>,<code>readXXBy</code>,<code>queryXXBy</code>,<code>countXXBy</code>,<code>getXXBy</code>后面跟属性名称。</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">User <span class=\"title\">findByUserName</span><span class=\"params\">(String userName)</span></span>;</span><br></pre></td></tr></table></figure><p></p><p>也可以使用一些关键字<code>And</code>、<code>Or</code></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">User <span class=\"title\">findByUserNameOrEmail</span><span class=\"params\">(String userName, String email)</span></span>;</span><br></pre></td></tr></table></figure><p></p><p>修改、删除、统计同样是类似语法</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteById</span><span class=\"params\">(Long id)</span></span>;</span><br><span class=\"line\"><span class=\"function\">Long <span class=\"title\">countByUserName</span><span class=\"params\">(String userName)</span></span>;</span><br></pre></td></tr></table></figure><p></p><p>基本上SQL体系中的关键词都可以使用，例如：<code>Like</code>、<code>IgnoreCase</code>、<code>OrderBy</code></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">List&lt;User&gt; <span class=\"title\">findByEmailLike</span><span class=\"params\">(String email)</span></span>;</span><br><span class=\"line\"><span class=\"function\">User <span class=\"title\">findByUserNameIgnoreCase</span><span class=\"params\">(String userName)</span></span>;</span><br><span class=\"line\"><span class=\"function\">List&lt;User&gt; <span class=\"title\">findByUserNameOrderByEmailDesc</span><span class=\"params\">(String email)</span></span>;</span><br></pre></td></tr></table></figure><p></p><p>具体的关键字，使用方法和生成的SQL如下表所示</p><table><thead><tr><th style=\"text-align:left\">Keyword</th><th style=\"text-align:left\">Sample</th><th style=\"text-align:left\">JPQL snippet</th></tr></thead><tbody><tr><td style=\"text-align:left\">And</td><td style=\"text-align:left\">findByLastNameAndFirstName</td><td style=\"text-align:left\">… where x.lastname = ?1 and x.firstname = ?2</td></tr><tr><td style=\"text-align:left\">Or</td><td style=\"text-align:left\">findByLastNameOrFirstName</td><td style=\"text-align:left\">… where x.lastname = ?1 or x.firstname = ?2</td></tr><tr><td style=\"text-align:left\">Is<br>Equals</td><td style=\"text-align:left\">findByFirstNameIs<br>findByFirstNameEquals</td><td style=\"text-align:left\">… where x.firstname = ?1</td></tr><tr><td style=\"text-align:left\">Between</td><td style=\"text-align:left\">findByStartDateBetween</td><td style=\"text-align:left\">… where x.startdate between ?1 and ?2</td></tr><tr><td style=\"text-align:left\">LessThan</td><td style=\"text-align:left\">findByAgeLessThan</td><td style=\"text-align:left\">… where x.age &lt; ?1</td></tr><tr><td style=\"text-align:left\">LessThanEqual</td><td style=\"text-align:left\">findByAgeLessThanEqual</td><td style=\"text-align:left\">… where x.age &lt;= ?1</td></tr><tr><td style=\"text-align:left\">GreaterThan</td><td style=\"text-align:left\">findByAgeGreaterThan</td><td style=\"text-align:left\">… where x.age &gt; ?1</td></tr><tr><td style=\"text-align:left\">GreaterThanEqual</td><td style=\"text-align:left\">findByAgeGreaterThanEqual</td><td style=\"text-align:left\">… where x.age &gt;= ?1</td></tr><tr><td style=\"text-align:left\">After</td><td style=\"text-align:left\">findByStartDateAfter</td><td style=\"text-align:left\">… where x.startdate &gt; ?1</td></tr><tr><td style=\"text-align:left\">Before</td><td style=\"text-align:left\">findByStartDateBefore</td><td style=\"text-align:left\">… where x.startdate &lt; ?1</td></tr><tr><td style=\"text-align:left\">IsNull</td><td style=\"text-align:left\">findByAgeIsNull</td><td style=\"text-align:left\">… where x.age is null</td></tr><tr><td style=\"text-align:left\">IsNotNull<br>NotNull</td><td style=\"text-align:left\">findByAge(Is)NotNull</td><td style=\"text-align:left\">… where x.age not null</td></tr><tr><td style=\"text-align:left\">Like</td><td style=\"text-align:left\">findByFirstNameLike</td><td style=\"text-align:left\">… where x.firstname like ?1</td></tr><tr><td style=\"text-align:left\">NotLike</td><td style=\"text-align:left\">findByFirstNameNotLike</td><td style=\"text-align:left\">… where x.firstName not like ?1</td></tr><tr><td style=\"text-align:left\">StartingWith</td><td style=\"text-align:left\">findByFirstNameStartingWith</td><td style=\"text-align:left\">… where x.firstname like ?1(parameter bound with appended %)</td></tr><tr><td style=\"text-align:left\">EndingWith</td><td style=\"text-align:left\">findByFirstNameEndingWith</td><td style=\"text-align:left\">… where x.firstname like ?1(parameter bound with prepend %)</td></tr><tr><td style=\"text-align:left\">Containing</td><td style=\"text-align:left\">findByFirstNameContaining</td><td style=\"text-align:left\">… where x.firstname like ?1(parameter bound wrapped in %)</td></tr><tr><td style=\"text-align:left\">OrderBy</td><td style=\"text-align:left\">findByAgeOrderByLastNameDesc</td><td style=\"text-align:left\">… where x.age = ?1 order by x.lastname desc</td></tr><tr><td style=\"text-align:left\">Not</td><td style=\"text-align:left\">findByLastNameNot</td><td style=\"text-align:left\">… where x.lastname &lt;&gt; ?1</td></tr><tr><td style=\"text-align:left\">In</td><td style=\"text-align:left\">findAgeIn(Collection ages)</td><td style=\"text-align:left\">… where x.age in ?1</td></tr><tr><td style=\"text-align:left\">NotIn</td><td style=\"text-align:left\">findAgeNotIn(Collection ages)</td><td style=\"text-align:left\">… where x.age not in ?1</td></tr><tr><td style=\"text-align:left\">True</td><td style=\"text-align:left\">findByActiveTrue</td><td style=\"text-align:left\">… where x.active = true</td></tr><tr><td style=\"text-align:left\">False</td><td style=\"text-align:left\">findByActiveFalse</td><td style=\"text-align:left\">… where x.active = false</td></tr><tr><td style=\"text-align:left\">IgnoreCase</td><td style=\"text-align:left\">findByFirstNameIgnoreCase</td><td style=\"text-align:left\">… where UPPER(x.firstname) = UPPER(?1)</td></tr></tbody></table><h2 id=\"复杂查询\"><a href=\"#复杂查询\" class=\"headerlink\" title=\"复杂查询\"></a>复杂查询</h2><p>在实际开发中我们需要用到分页、删选、连表等查询的时候就需要特殊的方法或者自定义SQL</p><h3 id=\"分页查询\"><a href=\"#分页查询\" class=\"headerlink\" title=\"分页查询\"></a>分页查询</h3><p>分页查询在实际开发中已经非常普遍了，spring data jpa 已经帮我们实现了分页的功能，在查询方法中，需要传入参数<code>Pageable</code>,当查询中有多个参数时，<code>Pageable</code>建议做为最后一个参数传入</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Page&lt;User&gt; <span class=\"title\">findAll</span><span class=\"params\">(Pageable pageable)</span></span>;</span><br><span class=\"line\"><span class=\"function\">Page&lt;User&gt; <span class=\"title\">findByUserName</span><span class=\"params\">(String userName, Pageable pageable)</span></span>;</span><br></pre></td></tr></table></figure><p></p><p><code>Pageable</code>是spring封装的分页实现类，使用的使用需要传入页码，每页条数和排序规则</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AutoWired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> UserRepository userRepository;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testPageQuery</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> pageIndex = <span class=\"number\">1</span>, pageSize = <span class=\"number\">10</span>;</span><br><span class=\"line\">  Sort sort = <span class=\"keyword\">new</span> Sort(Direction.DESC, <span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">  Pageable pageable = <span class=\"keyword\">new</span> PageRequest(pageIndex, pageSize, sort);</span><br><span class=\"line\">  userRepository.findAll(pageable);</span><br><span class=\"line\">  userRepository.findByUserName(<span class=\"string\">\"test\"</span>, pageable);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id=\"Limit查询\"><a href=\"#Limit查询\" class=\"headerlink\" title=\"Limit查询\"></a>Limit查询</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">User <span class=\"title\">findFirstByOrderByLastnameAsc</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\">User <span class=\"title\">findTopByOrderByAgeDesc</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\">Page&lt;User&gt; <span class=\"title\">queryFirst10ByLastname</span><span class=\"params\">(String lastname, Pageable pageable)</span></span>;</span><br><span class=\"line\"><span class=\"function\">List&lt;User&gt; <span class=\"title\">findFirst10ByLastname</span><span class=\"params\">(String lastname, Sort sort)</span></span>;</span><br><span class=\"line\"><span class=\"function\">List&lt;User&gt; <span class=\"title\">findTop10ByLastname</span><span class=\"params\">(String lastname, Pageable pageable)</span></span>;</span><br></pre></td></tr></table></figure><h3 id=\"自定义SQL查询\"><a href=\"#自定义SQL查询\" class=\"headerlink\" title=\"自定义SQL查询\"></a>自定义SQL查询</h3><p>其实spring data jpa绝大部分的SQL都可以根据方法名定义的方式来实现，但是由于某些原因我们想使用自定义的SQL来查询，spring data jpa也是完美支持的；在SQL的查询方法上面使用<code>@Query</code>注解，如涉及到删除和修改则需要加上<code>@Modifying</code>，也可以根据需要添加 <code>@Transactional</code> 对事务的支持，查询超时的设置等</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Modifying</span></span><br><span class=\"line\"><span class=\"meta\">@Query</span>(<span class=\"string\">\"update User u set u.username = ?1 where u.id = ?2\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">modifyUserNameByUserId</span><span class=\"params\">(String userName,Long id)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Transactional</span></span><br><span class=\"line\"><span class=\"meta\">@Modifying</span></span><br><span class=\"line\"><span class=\"meta\">@Query</span>(<span class=\"string\">\"delete from User where id = ?1\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteByUserId</span><span class=\"params\">(Long id)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Transactional</span>(timeout = <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"meta\">@Query</span>(<span class=\"string\">\"select u from User u where u.email = ?1\"</span>)</span><br><span class=\"line\"><span class=\"function\">User <span class=\"title\">findByEmail</span><span class=\"params\">(String email)</span></span>;</span><br></pre></td></tr></table></figure><p></p><h3 id=\"多表查询\"><a href=\"#多表查询\" class=\"headerlink\" title=\"多表查询\"></a>多表查询</h3><p>多表查询在spring data jpa中有两种实现方式，第一种是利用hibernate的级联查询来实现，第二种是创建一个结果集接口来接收查询后的结果，这里主要是第二种方式。</p><p>首先需要定义一个结果集的接口类。</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">HotelSummary</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">City <span class=\"title\">getCity</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"function\">String <span class=\"title\">getName</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"function\">Double <span class=\"title\">getAverageRating</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">default</span> Integer <span class=\"title\">getAverageRatingRounded</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getAverageRating() == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : (<span class=\"keyword\">int</span>) Math.round(getAverageRating());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>查询的方法返回类型设置为新创建的接口</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Query</span>(<span class=\"string\">\"select h.city as city, h.name as name, avg(r.rating) as averageRating \"</span></span><br><span class=\"line\">      - <span class=\"string\">\"from Hotel h left outer join h.reviews r where h.city = ?1 group by h\"</span>)</span><br><span class=\"line\"><span class=\"function\">Page&lt;HotelSummary&gt; <span class=\"title\">findByCity</span><span class=\"params\">(City city, Pageable pageable)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Query</span>(<span class=\"string\">\"select h.name as name, avg(r.rating) as averageRating \"</span></span><br><span class=\"line\">      - <span class=\"string\">\"from Hotel h left outer join h.reviews r group by h\"</span>)</span><br><span class=\"line\"><span class=\"function\">Page&lt;HotelSummary&gt; <span class=\"title\">findByCity</span><span class=\"params\">(Pageable pageable)</span></span>;</span><br></pre></td></tr></table></figure><p></p><p>使用</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Page&lt;HotemlSummary&gt; hotels = hotelRepository.findByCity(<span class=\"keyword\">new</span> PageRequest(<span class=\"number\">0</span>, <span class=\"number\">10</span>, Direction.ASC, <span class=\"string\">\"name\"</span>));</span><br><span class=\"line\"><span class=\"keyword\">for</span>(HotelSummary summary : hotels)&#123;</span><br><span class=\"line\">  System.out.println(<span class=\"string\">\"Name \"</span> + summary.getName());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><blockquote><p>在运行中Spring会给接口（HotelSummary）自动生成一个代理类来接收返回结果，代码汇总使用<code>getXX()</code>的形式来获取</p></blockquote><h2 id=\"多数据源支持\"><a href=\"#多数据源支持\" class=\"headerlink\" title=\"多数据源支持\"></a>多数据源支持</h2><h3 id=\"同源数据库\"><a href=\"#同源数据库\" class=\"headerlink\" title=\"同源数据库\"></a>同源数据库</h3><p>日常项目中因为使用的是分布式开发模式，不同的服务有不同的数据源，常常需要在一个项目中使用多个数据源，因此需要配置spring data jpa 以适合对多数据源的使用，一般分以下三步：</p><ol><li>配置多数据源</li><li>不同源的实体类放入不同包路径</li><li>声明不同的包路径下使用不同的数据源、事务支持</li></ol><p>可参考：<a href=\"https://www.jianshu.com/p/34730e595a8c\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">Spring Boot多数据源配置与使用</a></p><h3 id=\"异构数据库\"><a href=\"#异构数据库\" class=\"headerlink\" title=\"异构数据库\"></a>异构数据库</h3><p>比如我们的项目中，即需要对mysql的支持，也需要对mongodb的支持等。</p><p>实体类声明<code>@Entity</code>关系型数据库支持类型、声明<code>@Document</code>为mongodb支持类型，不同的数据源使用不同的实体就可以了</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PersonRepository</span> <span class=\"keyword\">extends</span> <span class=\"title\">JpaRepository</span>&lt;<span class=\"title\">Person</span>, <span class=\"title\">Long</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserRepository</span> <span class=\"keyword\">extends</span> <span class=\"title\">MongoRepository</span>&lt;<span class=\"title\">User</span>, <span class=\"title\">Long</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Document</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>但是如果Person既使用mysql也使用mongodb呢，也可以做混合使用</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">JpaPersonRepository</span> <span class=\"keyword\">extends</span> <span class=\"title\">JpaRepository</span>&lt;<span class=\"title\">Person</span>, <span class=\"title\">Long</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MongoDBPersonRepository</span> <span class=\"keyword\">extends</span> <span class=\"title\">MongoRepository</span>&lt;<span class=\"title\">Person</span>, <span class=\"title\">Long</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"meta\">@Document</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>也可以通过对不同的包路径进行声明，比如A包路径下使用mysql，B包路径下使用mongoDB</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableJpaRepository</span>(basePackages = <span class=\"string\">\"com.example.repositories.jpa\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@EnableMongoRepository</span>(basePackages = <span class=\"string\">\"com.example.repositories.mongo\"</span>)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Configuration</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><p></p><h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"使用枚举\"><a href=\"#使用枚举\" class=\"headerlink\" title=\"使用枚举\"></a>使用枚举</h3><p>使用枚举的时候，我们希望数据库中存储的是枚举对应的String类型，而不是枚举的索引值，需要在属性上面添加<code>@Enumerated(EnumType.STRING)</code>注解</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Enumerated</span>(EnumType.STRING)</span><br><span class=\"line\"><span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">true</span>)</span><br><span class=\"line\"><span class=\"keyword\">private</span> UserType type;</span><br></pre></td></tr></table></figure><p></p><h3 id=\"不需要和数据库映射的属性\"><a href=\"#不需要和数据库映射的属性\" class=\"headerlink\" title=\"不需要和数据库映射的属性\"></a>不需要和数据库映射的属性</h3><p>正常情况下，我们在实体上加上注解<code>@Entity</code>，就会让实体类的属性和表的列相关联，如果其中某个属性不需要和数据库来进行关联，而只是展示的时候做计算，只需要加上<code>@Transient</code>属性即可。</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Transient</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String userName;</span><br></pre></td></tr></table></figure><p></p><h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://ityouknow.gitbooks.io/spring-data-jpa-reference-documentation/content/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">Spring Data JPA 参考指南 中文版</a></p>"},{"title":"我的简历","author":"SnailDev","date":"2018-03-08T13:09:00.000Z","featured_image":"/images/avatar_resume.jpg","_content":"\n![avatar](/images/avatar_resume.jpg)\n\n<!--more-->\n[打印入口](/files/java高级研发-赵明-黄山学院-猫酷科技-4年.pdf)\n\n# 联系方式\n\n* 手机：15821753692（微信同号）\n* Email：\n    * snailtem@gmail.com （主）\n    * snaildev@outlook.com （备）\n* QQ：1397407698\n\n\n# 个人信息\n\n* 赵明/男/1990\n* 本科/黄山学院 计算机科学与技术（2010/9--2014/7）\n* 工作年限：**4年**\n* 技术博客：\n    *   https://snaildev.github.io\n    *   http://www.cnblogs.com/snaildev\n* Github：https://github.com/snaildev\n* 期望职位：Java高级程序员，应用架构师\n* 期望薪资：税前月薪28k+\n* 期望城市：上海\n\n# 工作经历\n\n## 猫酷科技 （ 2015年5月 ~ 至今 ）\n\n### 猫酷车场\n\n实现功能：实现用户线上寻车，停车缴费等功能。\n\n演进过程：\n1. 接手：主导了猫酷车场2.0项目的研发，在1.0的基础上，对车场业务进行梳理，对上层业务代码进行封装，对底层接口对接进行开放，实现新车场接入不动上层业务代码。\n2. 改进：对接口对接层进行改进，实现配置化。第三方车场接口除了是http协议之外，也有不少是webservice/wcf这种soap协议的， 解决方式是通过抓包形式，实现报文配置的统一化。\n3. 持续改进：各个第三方接口的签名方式尽不相同，对接难免需要写代码实现，对于这种，解决方案是按照车场接口的厂商进行分类封装，重复对接同种厂商接口，仅需配置即可。\n4. 无感停车：接入支付宝车场，并开放车场相应功能（进出场通知，离场代扣）给到线下车场，使得车辆离场时不仅可以在使用会员权益、优惠券、积分后，还可以继续使用支付宝免密支付车费，无感出场。\n\n实现效果：系统更加稳定，用户体验更佳，对接成本从2人天降到0.5人天，目前车场平均月流水（多个商场合计）为800W左右\n\n欢迎查阅：微信关注上海静安大悦城、近铁城市广场、上海环球港等可查看停车场功能。\n\n猫酷车场简介：\n![park](/images/park.jpg)\n\n### 发布系统\n\n实现功能：实现代码发布、备份管理以及服务器管理等功能。\n\n演进过程：\n1. 接手分析：对发布各个流程进行分析，代码获取、代码编译、代码发布、生产环境备份、代码同步到目的服务器、 发布异常可回滚修复以及发布完成后进行接口测试等。\n    * 代码获取（源代码管理器Git）\n    * 代码编译及发布（Java-->Maven, .Net-->MSBuild, .NetCore-->dotnet，静态文件发布跳过编译过程）\n    * 服务器数据同步（rsync）\n    * 进行接口测试（Jmeter脚本）\n    * 发布结果推送给项目组成员（邮件通知）\n2. 实践进行：服务器应该分环境，测试、仿真和正式。\n    * 测试（研发发布，测试验证）\n    * 仿真（研发组长发布，研发和测试验证）\n    * 正式（就是生产环境，研发组长发布，仿真通过验证后，将仿真环境作为一个复制集同步到正式环境）\n\n实现效果：规范了发布流程，解放了运维，使得公司约210个项目可使用发布系统稳定发布。\n\n发布系统流程图：\n![deploy](/images/deploy.jpg)\n\n### 其他项目\n* 长益预付卡系统对接\n* 微信小程序发布系统\n* Mongo2Es实时同步工具（https://github.com/SnailDev/SnailDev.Mongo2Es）\n* MongoDB Web端查询系统（https://github.com/SnailDev/SnailDev.MongoStudio）\n* 票据打印机ESC/POS指令解析（https://github.com/SnailDev/SnailDev.EscPosParser）\n* NestRepository查询Es SDK封装（https://github.com/SnailDev/SnailDev.Mongo2Es/blob/master/README_NESTRepo.md）\n\n\n## 博彦科技 （ 2013年10月 ~ 2015年5月 含8个月实习）\n\n### 美国房贷系统\n\n工作内容： 参与美国房贷系统Elliemae中WebCenter功能模块的开发和维护；即组长分配JIRA,然后根据JIRA上测试或者客户反馈的bug，进行复现，阅读源代码进行审查，修复bug，提交给组长Code Review。\n\n开发模式： 敏捷开发，晚日报，晨站会\n\n\n### 内部日报系统\n\n工作内容：基于Asp.net MVC + Entity Framework + Bootstrap内部日报和请假系统的研发。 \n\n工作说明：由于项目组采用的是敏捷开发模式，每日站会和日报都是必须的，为了满足日报和请假的需求，定制了一套适合项目组内部的日报系统和请假系统。并结合了AlertSystem实现了成员日报邮件提醒。\n\n### 其他项目\n* 培训考试系统\n* 内部小工具（HostsHelper、FileFilter、IIsHelper等） \n* AlertSystem（基于WindowsService后台定时Email提醒服务）\n\n# 技能清单\n\n以下均为我熟练使用的技能\n\n* Web开发：Java/C#.Net/Node\n* Web框架：Spring/Asp.Net MVC/Express\n* 前端框架：Bootstrap/Jquery/EasyUI/LigerUI/Vue\n* 数据库相关：MySQL/MongoDB/Redis/ElasticSearch\n* 版本管理：Svn/Git\n* 单元测试：JUnit\n* 云和开放平台：SAE/阿里云/腾讯云/微信应用开发\n\n- - -\n# 致谢\n\n感谢您花时间阅读我的简历，期待能有机会和您共事。","source":"_posts/about-me-my-resume.md","raw":"---\ntitle: 我的简历\nauthor: SnailDev\ntags:\n  - 随手写写\ncategories:\n  - 自我认知\ndate: 2018-03-08 21:09:00\nfeatured_image: /images/avatar_resume.jpg\n---\n\n![avatar](/images/avatar_resume.jpg)\n\n<!--more-->\n[打印入口](/files/java高级研发-赵明-黄山学院-猫酷科技-4年.pdf)\n\n# 联系方式\n\n* 手机：15821753692（微信同号）\n* Email：\n    * snailtem@gmail.com （主）\n    * snaildev@outlook.com （备）\n* QQ：1397407698\n\n\n# 个人信息\n\n* 赵明/男/1990\n* 本科/黄山学院 计算机科学与技术（2010/9--2014/7）\n* 工作年限：**4年**\n* 技术博客：\n    *   https://snaildev.github.io\n    *   http://www.cnblogs.com/snaildev\n* Github：https://github.com/snaildev\n* 期望职位：Java高级程序员，应用架构师\n* 期望薪资：税前月薪28k+\n* 期望城市：上海\n\n# 工作经历\n\n## 猫酷科技 （ 2015年5月 ~ 至今 ）\n\n### 猫酷车场\n\n实现功能：实现用户线上寻车，停车缴费等功能。\n\n演进过程：\n1. 接手：主导了猫酷车场2.0项目的研发，在1.0的基础上，对车场业务进行梳理，对上层业务代码进行封装，对底层接口对接进行开放，实现新车场接入不动上层业务代码。\n2. 改进：对接口对接层进行改进，实现配置化。第三方车场接口除了是http协议之外，也有不少是webservice/wcf这种soap协议的， 解决方式是通过抓包形式，实现报文配置的统一化。\n3. 持续改进：各个第三方接口的签名方式尽不相同，对接难免需要写代码实现，对于这种，解决方案是按照车场接口的厂商进行分类封装，重复对接同种厂商接口，仅需配置即可。\n4. 无感停车：接入支付宝车场，并开放车场相应功能（进出场通知，离场代扣）给到线下车场，使得车辆离场时不仅可以在使用会员权益、优惠券、积分后，还可以继续使用支付宝免密支付车费，无感出场。\n\n实现效果：系统更加稳定，用户体验更佳，对接成本从2人天降到0.5人天，目前车场平均月流水（多个商场合计）为800W左右\n\n欢迎查阅：微信关注上海静安大悦城、近铁城市广场、上海环球港等可查看停车场功能。\n\n猫酷车场简介：\n![park](/images/park.jpg)\n\n### 发布系统\n\n实现功能：实现代码发布、备份管理以及服务器管理等功能。\n\n演进过程：\n1. 接手分析：对发布各个流程进行分析，代码获取、代码编译、代码发布、生产环境备份、代码同步到目的服务器、 发布异常可回滚修复以及发布完成后进行接口测试等。\n    * 代码获取（源代码管理器Git）\n    * 代码编译及发布（Java-->Maven, .Net-->MSBuild, .NetCore-->dotnet，静态文件发布跳过编译过程）\n    * 服务器数据同步（rsync）\n    * 进行接口测试（Jmeter脚本）\n    * 发布结果推送给项目组成员（邮件通知）\n2. 实践进行：服务器应该分环境，测试、仿真和正式。\n    * 测试（研发发布，测试验证）\n    * 仿真（研发组长发布，研发和测试验证）\n    * 正式（就是生产环境，研发组长发布，仿真通过验证后，将仿真环境作为一个复制集同步到正式环境）\n\n实现效果：规范了发布流程，解放了运维，使得公司约210个项目可使用发布系统稳定发布。\n\n发布系统流程图：\n![deploy](/images/deploy.jpg)\n\n### 其他项目\n* 长益预付卡系统对接\n* 微信小程序发布系统\n* Mongo2Es实时同步工具（https://github.com/SnailDev/SnailDev.Mongo2Es）\n* MongoDB Web端查询系统（https://github.com/SnailDev/SnailDev.MongoStudio）\n* 票据打印机ESC/POS指令解析（https://github.com/SnailDev/SnailDev.EscPosParser）\n* NestRepository查询Es SDK封装（https://github.com/SnailDev/SnailDev.Mongo2Es/blob/master/README_NESTRepo.md）\n\n\n## 博彦科技 （ 2013年10月 ~ 2015年5月 含8个月实习）\n\n### 美国房贷系统\n\n工作内容： 参与美国房贷系统Elliemae中WebCenter功能模块的开发和维护；即组长分配JIRA,然后根据JIRA上测试或者客户反馈的bug，进行复现，阅读源代码进行审查，修复bug，提交给组长Code Review。\n\n开发模式： 敏捷开发，晚日报，晨站会\n\n\n### 内部日报系统\n\n工作内容：基于Asp.net MVC + Entity Framework + Bootstrap内部日报和请假系统的研发。 \n\n工作说明：由于项目组采用的是敏捷开发模式，每日站会和日报都是必须的，为了满足日报和请假的需求，定制了一套适合项目组内部的日报系统和请假系统。并结合了AlertSystem实现了成员日报邮件提醒。\n\n### 其他项目\n* 培训考试系统\n* 内部小工具（HostsHelper、FileFilter、IIsHelper等） \n* AlertSystem（基于WindowsService后台定时Email提醒服务）\n\n# 技能清单\n\n以下均为我熟练使用的技能\n\n* Web开发：Java/C#.Net/Node\n* Web框架：Spring/Asp.Net MVC/Express\n* 前端框架：Bootstrap/Jquery/EasyUI/LigerUI/Vue\n* 数据库相关：MySQL/MongoDB/Redis/ElasticSearch\n* 版本管理：Svn/Git\n* 单元测试：JUnit\n* 云和开放平台：SAE/阿里云/腾讯云/微信应用开发\n\n- - -\n# 致谢\n\n感谢您花时间阅读我的简历，期待能有机会和您共事。","slug":"about-me-my-resume","published":1,"updated":"2018-10-06T08:11:18.073Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmyu0sbi000tx8uossdcher8","content":"<p><img src=\"/images/avatar_resume.jpg\" alt=\"avatar\"></p><a id=\"more\"></a><p><a href=\"/files/java高级研发-赵明-黄山学院-猫酷科技-4年.pdf\">打印入口</a></p><h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul><li>手机：15821753692（微信同号）</li><li>Email：<ul><li><a href=\"mailto:snailtem@gmail.com\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">snailtem@gmail.com</a> （主）</li><li><a href=\"mailto:snaildev@outlook.com\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">snaildev@outlook.com</a> （备）</li></ul></li><li>QQ：1397407698</li></ul><h1 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h1><ul><li>赵明/男/1990</li><li>本科/黄山学院 计算机科学与技术（2010/9–2014/7）</li><li>工作年限：<strong>4年</strong></li><li>技术博客：<ul><li><a href=\"https://snaildev.github.io\">https://snaildev.github.io</a></li><li><a href=\"http://www.cnblogs.com/snaildev\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/snaildev</a></li></ul></li><li>Github：<a href=\"https://github.com/snaildev\" target=\"_blank\" rel=\"noopener\">https://github.com/snaildev</a></li><li>期望职位：Java高级程序员，应用架构师</li><li>期望薪资：税前月薪28k+</li><li>期望城市：上海</li></ul><h1 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h1><h2 id=\"猫酷科技-（-2015年5月-至今-）\"><a href=\"#猫酷科技-（-2015年5月-至今-）\" class=\"headerlink\" title=\"猫酷科技 （ 2015年5月 ~ 至今 ）\"></a>猫酷科技 （ 2015年5月 ~ 至今 ）</h2><h3 id=\"猫酷车场\"><a href=\"#猫酷车场\" class=\"headerlink\" title=\"猫酷车场\"></a>猫酷车场</h3><p>实现功能：实现用户线上寻车，停车缴费等功能。</p><p>演进过程：</p><ol><li>接手：主导了猫酷车场2.0项目的研发，在1.0的基础上，对车场业务进行梳理，对上层业务代码进行封装，对底层接口对接进行开放，实现新车场接入不动上层业务代码。</li><li>改进：对接口对接层进行改进，实现配置化。第三方车场接口除了是http协议之外，也有不少是webservice/wcf这种soap协议的， 解决方式是通过抓包形式，实现报文配置的统一化。</li><li>持续改进：各个第三方接口的签名方式尽不相同，对接难免需要写代码实现，对于这种，解决方案是按照车场接口的厂商进行分类封装，重复对接同种厂商接口，仅需配置即可。</li><li>无感停车：接入支付宝车场，并开放车场相应功能（进出场通知，离场代扣）给到线下车场，使得车辆离场时不仅可以在使用会员权益、优惠券、积分后，还可以继续使用支付宝免密支付车费，无感出场。</li></ol><p>实现效果：系统更加稳定，用户体验更佳，对接成本从2人天降到0.5人天，目前车场平均月流水（多个商场合计）为800W左右</p><p>欢迎查阅：微信关注上海静安大悦城、近铁城市广场、上海环球港等可查看停车场功能。</p><p>猫酷车场简介： <img src=\"/images/park.jpg\" alt=\"park\"></p><h3 id=\"发布系统\"><a href=\"#发布系统\" class=\"headerlink\" title=\"发布系统\"></a>发布系统</h3><p>实现功能：实现代码发布、备份管理以及服务器管理等功能。</p><p>演进过程：</p><ol><li>接手分析：对发布各个流程进行分析，代码获取、代码编译、代码发布、生产环境备份、代码同步到目的服务器、 发布异常可回滚修复以及发布完成后进行接口测试等。<ul><li>代码获取（源代码管理器Git）</li><li>代码编译及发布（Java–&gt;Maven, .Net–&gt;MSBuild, .NetCore–&gt;dotnet，静态文件发布跳过编译过程）</li><li>服务器数据同步（rsync）</li><li>进行接口测试（Jmeter脚本）</li><li>发布结果推送给项目组成员（邮件通知）</li></ul></li><li>实践进行：服务器应该分环境，测试、仿真和正式。<ul><li>测试（研发发布，测试验证）</li><li>仿真（研发组长发布，研发和测试验证）</li><li>正式（就是生产环境，研发组长发布，仿真通过验证后，将仿真环境作为一个复制集同步到正式环境）</li></ul></li></ol><p>实现效果：规范了发布流程，解放了运维，使得公司约210个项目可使用发布系统稳定发布。</p><p>发布系统流程图： <img src=\"/images/deploy.jpg\" alt=\"deploy\"></p><h3 id=\"其他项目\"><a href=\"#其他项目\" class=\"headerlink\" title=\"其他项目\"></a>其他项目</h3><ul><li>长益预付卡系统对接</li><li>微信小程序发布系统</li><li>Mongo2Es实时同步工具（<a href=\"https://github.com/SnailDev/SnailDev.Mongo2Es）\" target=\"_blank\" rel=\"noopener\">https://github.com/SnailDev/SnailDev.Mongo2Es）</a></li><li>MongoDB Web端查询系统（<a href=\"https://github.com/SnailDev/SnailDev.MongoStudio）\" target=\"_blank\" rel=\"noopener\">https://github.com/SnailDev/SnailDev.MongoStudio）</a></li><li>票据打印机ESC/POS指令解析（<a href=\"https://github.com/SnailDev/SnailDev.EscPosParser）\" target=\"_blank\" rel=\"noopener\">https://github.com/SnailDev/SnailDev.EscPosParser）</a></li><li>NestRepository查询Es SDK封装（<a href=\"https://github.com/SnailDev/SnailDev.Mongo2Es/blob/master/README_NESTRepo.md）\" target=\"_blank\" rel=\"noopener\">https://github.com/SnailDev/SnailDev.Mongo2Es/blob/master/README_NESTRepo.md）</a></li></ul><h2 id=\"博彦科技-（-2013年10月-2015年5月-含8个月实习）\"><a href=\"#博彦科技-（-2013年10月-2015年5月-含8个月实习）\" class=\"headerlink\" title=\"博彦科技 （ 2013年10月 ~ 2015年5月 含8个月实习）\"></a>博彦科技 （ 2013年10月 ~ 2015年5月 含8个月实习）</h2><h3 id=\"美国房贷系统\"><a href=\"#美国房贷系统\" class=\"headerlink\" title=\"美国房贷系统\"></a>美国房贷系统</h3><p>工作内容： 参与美国房贷系统Elliemae中WebCenter功能模块的开发和维护；即组长分配JIRA,然后根据JIRA上测试或者客户反馈的bug，进行复现，阅读源代码进行审查，修复bug，提交给组长Code Review。</p><p>开发模式： 敏捷开发，晚日报，晨站会</p><h3 id=\"内部日报系统\"><a href=\"#内部日报系统\" class=\"headerlink\" title=\"内部日报系统\"></a>内部日报系统</h3><p>工作内容：基于Asp.net MVC + Entity Framework + Bootstrap内部日报和请假系统的研发。</p><p>工作说明：由于项目组采用的是敏捷开发模式，每日站会和日报都是必须的，为了满足日报和请假的需求，定制了一套适合项目组内部的日报系统和请假系统。并结合了AlertSystem实现了成员日报邮件提醒。</p><h3 id=\"其他项目-1\"><a href=\"#其他项目-1\" class=\"headerlink\" title=\"其他项目\"></a>其他项目</h3><ul><li>培训考试系统</li><li>内部小工具（HostsHelper、FileFilter、IIsHelper等）</li><li>AlertSystem（基于WindowsService后台定时Email提醒服务）</li></ul><h1 id=\"技能清单\"><a href=\"#技能清单\" class=\"headerlink\" title=\"技能清单\"></a>技能清单</h1><p>以下均为我熟练使用的技能</p><ul><li>Web开发：Java/C#.Net/Node</li><li>Web框架：Spring/Asp.Net MVC/Express</li><li>前端框架：Bootstrap/Jquery/EasyUI/LigerUI/Vue</li><li>数据库相关：MySQL/MongoDB/Redis/ElasticSearch</li><li>版本管理：Svn/Git</li><li>单元测试：JUnit</li><li>云和开放平台：SAE/阿里云/腾讯云/微信应用开发</li></ul><hr><h1 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h1><p>感谢您花时间阅读我的简历，期待能有机会和您共事。</p>","site":{"data":{}},"excerpt":"<p><img src=\"/images/avatar_resume.jpg\" alt=\"avatar\"></p>","more":"<p><a href=\"/files/java高级研发-赵明-黄山学院-猫酷科技-4年.pdf\">打印入口</a></p><h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul><li>手机：15821753692（微信同号）</li><li>Email：<ul><li><a href=\"mailto:snailtem@gmail.com\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">snailtem@gmail.com</a> （主）</li><li><a href=\"mailto:snaildev@outlook.com\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">snaildev@outlook.com</a> （备）</li></ul></li><li>QQ：1397407698</li></ul><h1 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h1><ul><li>赵明/男/1990</li><li>本科/黄山学院 计算机科学与技术（2010/9–2014/7）</li><li>工作年限：<strong>4年</strong></li><li>技术博客：<ul><li><a href=\"https://snaildev.github.io\">https://snaildev.github.io</a></li><li><a href=\"http://www.cnblogs.com/snaildev\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/snaildev</a></li></ul></li><li>Github：<a href=\"https://github.com/snaildev\" target=\"_blank\" rel=\"noopener\">https://github.com/snaildev</a></li><li>期望职位：Java高级程序员，应用架构师</li><li>期望薪资：税前月薪28k+</li><li>期望城市：上海</li></ul><h1 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h1><h2 id=\"猫酷科技-（-2015年5月-至今-）\"><a href=\"#猫酷科技-（-2015年5月-至今-）\" class=\"headerlink\" title=\"猫酷科技 （ 2015年5月 ~ 至今 ）\"></a>猫酷科技 （ 2015年5月 ~ 至今 ）</h2><h3 id=\"猫酷车场\"><a href=\"#猫酷车场\" class=\"headerlink\" title=\"猫酷车场\"></a>猫酷车场</h3><p>实现功能：实现用户线上寻车，停车缴费等功能。</p><p>演进过程：</p><ol><li>接手：主导了猫酷车场2.0项目的研发，在1.0的基础上，对车场业务进行梳理，对上层业务代码进行封装，对底层接口对接进行开放，实现新车场接入不动上层业务代码。</li><li>改进：对接口对接层进行改进，实现配置化。第三方车场接口除了是http协议之外，也有不少是webservice/wcf这种soap协议的， 解决方式是通过抓包形式，实现报文配置的统一化。</li><li>持续改进：各个第三方接口的签名方式尽不相同，对接难免需要写代码实现，对于这种，解决方案是按照车场接口的厂商进行分类封装，重复对接同种厂商接口，仅需配置即可。</li><li>无感停车：接入支付宝车场，并开放车场相应功能（进出场通知，离场代扣）给到线下车场，使得车辆离场时不仅可以在使用会员权益、优惠券、积分后，还可以继续使用支付宝免密支付车费，无感出场。</li></ol><p>实现效果：系统更加稳定，用户体验更佳，对接成本从2人天降到0.5人天，目前车场平均月流水（多个商场合计）为800W左右</p><p>欢迎查阅：微信关注上海静安大悦城、近铁城市广场、上海环球港等可查看停车场功能。</p><p>猫酷车场简介： <img src=\"/images/park.jpg\" alt=\"park\"></p><h3 id=\"发布系统\"><a href=\"#发布系统\" class=\"headerlink\" title=\"发布系统\"></a>发布系统</h3><p>实现功能：实现代码发布、备份管理以及服务器管理等功能。</p><p>演进过程：</p><ol><li>接手分析：对发布各个流程进行分析，代码获取、代码编译、代码发布、生产环境备份、代码同步到目的服务器、 发布异常可回滚修复以及发布完成后进行接口测试等。<ul><li>代码获取（源代码管理器Git）</li><li>代码编译及发布（Java–&gt;Maven, .Net–&gt;MSBuild, .NetCore–&gt;dotnet，静态文件发布跳过编译过程）</li><li>服务器数据同步（rsync）</li><li>进行接口测试（Jmeter脚本）</li><li>发布结果推送给项目组成员（邮件通知）</li></ul></li><li>实践进行：服务器应该分环境，测试、仿真和正式。<ul><li>测试（研发发布，测试验证）</li><li>仿真（研发组长发布，研发和测试验证）</li><li>正式（就是生产环境，研发组长发布，仿真通过验证后，将仿真环境作为一个复制集同步到正式环境）</li></ul></li></ol><p>实现效果：规范了发布流程，解放了运维，使得公司约210个项目可使用发布系统稳定发布。</p><p>发布系统流程图： <img src=\"/images/deploy.jpg\" alt=\"deploy\"></p><h3 id=\"其他项目\"><a href=\"#其他项目\" class=\"headerlink\" title=\"其他项目\"></a>其他项目</h3><ul><li>长益预付卡系统对接</li><li>微信小程序发布系统</li><li>Mongo2Es实时同步工具（<a href=\"https://github.com/SnailDev/SnailDev.Mongo2Es）\" target=\"_blank\" rel=\"noopener\">https://github.com/SnailDev/SnailDev.Mongo2Es）</a></li><li>MongoDB Web端查询系统（<a href=\"https://github.com/SnailDev/SnailDev.MongoStudio）\" target=\"_blank\" rel=\"noopener\">https://github.com/SnailDev/SnailDev.MongoStudio）</a></li><li>票据打印机ESC/POS指令解析（<a href=\"https://github.com/SnailDev/SnailDev.EscPosParser）\" target=\"_blank\" rel=\"noopener\">https://github.com/SnailDev/SnailDev.EscPosParser）</a></li><li>NestRepository查询Es SDK封装（<a href=\"https://github.com/SnailDev/SnailDev.Mongo2Es/blob/master/README_NESTRepo.md）\" target=\"_blank\" rel=\"noopener\">https://github.com/SnailDev/SnailDev.Mongo2Es/blob/master/README_NESTRepo.md）</a></li></ul><h2 id=\"博彦科技-（-2013年10月-2015年5月-含8个月实习）\"><a href=\"#博彦科技-（-2013年10月-2015年5月-含8个月实习）\" class=\"headerlink\" title=\"博彦科技 （ 2013年10月 ~ 2015年5月 含8个月实习）\"></a>博彦科技 （ 2013年10月 ~ 2015年5月 含8个月实习）</h2><h3 id=\"美国房贷系统\"><a href=\"#美国房贷系统\" class=\"headerlink\" title=\"美国房贷系统\"></a>美国房贷系统</h3><p>工作内容： 参与美国房贷系统Elliemae中WebCenter功能模块的开发和维护；即组长分配JIRA,然后根据JIRA上测试或者客户反馈的bug，进行复现，阅读源代码进行审查，修复bug，提交给组长Code Review。</p><p>开发模式： 敏捷开发，晚日报，晨站会</p><h3 id=\"内部日报系统\"><a href=\"#内部日报系统\" class=\"headerlink\" title=\"内部日报系统\"></a>内部日报系统</h3><p>工作内容：基于Asp.net MVC + Entity Framework + Bootstrap内部日报和请假系统的研发。</p><p>工作说明：由于项目组采用的是敏捷开发模式，每日站会和日报都是必须的，为了满足日报和请假的需求，定制了一套适合项目组内部的日报系统和请假系统。并结合了AlertSystem实现了成员日报邮件提醒。</p><h3 id=\"其他项目-1\"><a href=\"#其他项目-1\" class=\"headerlink\" title=\"其他项目\"></a>其他项目</h3><ul><li>培训考试系统</li><li>内部小工具（HostsHelper、FileFilter、IIsHelper等）</li><li>AlertSystem（基于WindowsService后台定时Email提醒服务）</li></ul><h1 id=\"技能清单\"><a href=\"#技能清单\" class=\"headerlink\" title=\"技能清单\"></a>技能清单</h1><p>以下均为我熟练使用的技能</p><ul><li>Web开发：Java/C#.Net/Node</li><li>Web框架：Spring/Asp.Net MVC/Express</li><li>前端框架：Bootstrap/Jquery/EasyUI/LigerUI/Vue</li><li>数据库相关：MySQL/MongoDB/Redis/ElasticSearch</li><li>版本管理：Svn/Git</li><li>单元测试：JUnit</li><li>云和开放平台：SAE/阿里云/腾讯云/微信应用开发</li></ul><hr><h1 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h1><p>感谢您花时间阅读我的简历，期待能有机会和您共事。</p>"},{"title":"SpringBoot实战（四）Thymeleaf","author":"SnailDev","date":"2018-09-04T14:27:08.000Z","featured_image":"/images/spring-springboot-1.jpg","_content":"![spring-springboot-thymeleaf](/images/spring-springboot-1.jpg)\n\nThymeleaf是新一代的模板引擎，在Spring 4.0中推荐使用Thymeleaf来做前端模板引擎。\n<!--more-->\n之前在[springBoot实战（二）Web](https://snaildev.github.io/article/spring-springboot-web.html)中简单介绍了下thymeleaf，本篇将更加全面详细的介绍thymeleaf的使用。\n\n## 介绍\n简单说，Thymeleaf是一个跟Velocity、FreeMarker类似的模板引擎，它可以完全替代JSP。相比较其他模板引擎，它有如下三个极其吸引人的特点：\n1. Thymeleaf 在有网络和无网络的环境下皆可运行，即它可以让前端在浏览器查看页面的静态效果，也可以让开发人员在服务器查看带数据的动态页面效果。这是由于它支持html原型，然后在html标签里增加额外的属性来达到模板+数据的展示方式。浏览器解释html时会忽略未定义的标签属性，所以thymeleaf的模板可以静态的运行；当有数据返回到页面时，thymeleaf标签会动态地替换掉静态内容，使页面动态显示。\n2. Thymeleaf 开箱即用的特性。它提供标准和spring标准两种方言，可以直接套用模板实现JSTL、OGNL表达式效果，避免每天套模板，改JSTL、改标签的困扰，同时开发人员也可以扩展和创建自定义的方言。\n3. Thymeleaf 提供spring标准方言和一个与Spring MVC完美继承的可选模块，可以快速实现表单绑定、属性编辑器和国际化等功能。\n\n## 表达式\n它们分为四类：\n1. 变量表达式\n2. 选择或星号表达式\n3. 文字国际化表达式\n4. URL表达式\n\n### 变量表达式\n变量表达式即OGNL表达式或Spring EL表达式（在Spring 术语中也叫做model attributes）。如下所示：\n```\n${session.user.name}\n```\n它们将以HTML标签的一个属性来表示：\n```html\n<li th:each=\"book : ${books}\">\n  <span th:text=\"${book.author.name}\">author's name</span>\n</li>\n```\n\n### 选择（星号）表达式\n选择表达式很像变量表达式，不过它们用一个预先选择的对象来代替上下文变量容器（map）来执行，如下：\n```\n*{customer.name}\n```\n被指定的object由`th:object`属性定义：\n```html\n<div th:object=\"${book}\">\n  <span th:text=\"*{title}\">book's title<span>\n</div>\n```\n\n### 文字国际化表达式\n文字国际化表达式允许我们从一个外部文件获取区域文字信息（.properties），用Key索引Value，还可以提供一组参数（可选）。\n```\n#{main.title}\n#{message.entrycreated(${entryId})}\n```\n可以在模板文件中找到这样的表达式代码：\n```html\n<table>\n  <th th:text=\"#{header.address.city}\">city</th>\n  <th th:text=\"#{header.address.country}\">country</th>\n</table>\n```\n\n### URL表达式\nURL表达式值指的是把一个有用的上下文或会话信息添加到URL，这个过程经常被叫做URL重写。\n```\n@{/order/list}\n```\nURL还可以设置参数\n```\n@{/order/details(id=${orderId})}\n```\n相对路径\n```\n@{../documents/report}\n```\n让我们来看这些表达式：\n```html\n<form th:action=\"@{/createOrder}\">...</form>\n<a href=\"main.html\" th:href=\"@{/main}\">...</a>\n```\n\n### 变量表达式VS选择表达式\n如果不考虑上下文的情况下，两者没有区别；星号语法在选定对象上表达，而不是整个上下文。\n什么是选定对象？就是父标签的值，如下：\n```html\n<div th:object=\"${session.user}\">\n  <p>FirstName: <span th:text=\"*{firstName}\">Sebastian</span>.</p>\n  <p>LastName: <span th:text=\"*{lastName}\">Pepper</span>.</p>\n  <p>Nationnality: <span th:text=\"*{nationnality}\">Saturn</span>.</p>\n</div>\n```\n这完全等价于：\n```html\n<div>\n  <p>FirstName: <span th:text=\"${session.user.firstName}\">Sebastian</span>.</p>\n  <p>LastName: <span th:text=\"${session.user.lastName}\">Pepper</span>.</p>\n  <p>Nationnality: <span th:text=\"${session.user.nationnality}\">Saturn</span>.</p>\n</div>\n```\n当然，美元符号和星号语法可以混合使用\n```html\n<div th:object=\"${session.user}\">\n  <p>FirstName: <span th:text=\"*{firstName}\">Sebastian</span>.</p>\n  <p>LastName: <span th:text=\"${session.user.lastName}\">Pepper</span>.</p>\n  <p>Nationnality: <span th:text=\"*{nationnality}\">Saturn</span>.</p>\n</div>\n```\n\n## 表达式支持的语法\n### 字面（Literals）\n- 文本文字（Text literals）: `'one text', 'Another one!',…`\n- 数字文本（Number literals）: `0, 34, 3.0, 12.3,…`\n- 布尔文本（Boolean literals）: `true, false`\n- 空（Null literal）: `null`\n- 文字标记（Literal tokens）: `one, sometext, main,…`\n\n### 文本操作（Text operations）\n- 字符串连接(String concatenation): `+`\n- 文本替换（Literal substitutions）: `|The name is ${name}|`\n\n### 算术运算（Arithmetic operations）\n- 二元运算符（Binary operators）: `+, -, *, /, %`\n- 减号（单目运算符）Minus sign (unary operator): `-`\n\n### 布尔操作（Boolean operations）\n- 二元运算符（Binary operators）:`and, or`\n- 布尔否定（一元运算符）Boolean negation (unary operator):`!, not`\n\n### 比较和等价(Comparisons and equality)\n- 比较（Comparators）: `>, <, >=, <= (gt, lt, ge, le)`\n- 等值运算符（Equality operators）:`==, != (eq, ne)`\n\n### 条件运算符（Conditional operators）\n- If-then: `(if) ? (then)`\n- If-then-else: `(if) ? (then) : (else)`\n- Default: `(value) ?: (defaultvalue)`\n\n所有这些特征可以被组合并嵌套：\n```\n'User is of type ' + (${user.isAdmin()} ? 'Administrator' : (${user.type} ?: 'Unknown'))\n```\n\n## 常用的th标签\n\n| 关键字 | 功能介绍 | 案例 |\n|:------  |:------ |:------ |\n| th:id | 替换id | `<input th:id=\"'xxx' + ${collect.id}\"/>` |\n| th:text | 文本替换  | `<p th:text=\"${collect.description}\">description</p>` |\n| th:utext  |\t支持html的文本替换  |\t`<p th:utext=\"${htmlcontent}\">conten</p>` |\n| th:object |\t替换对象  |\t`<div th:object=\"${session.user}\">` |\n| th:value  |\t属性赋值  |\t`<input th:value=\"${user.name}\" />` |\n| th:with |\t变量赋值运算  |\t`<div th:with=\"isEven=${prodStat.count}%2==0\"></div>` |\n| th:style  |\t设置样式  |\t`th:style=\"'display:' + @{(${sitrue} ? 'none' : 'inline-block')} + ''\"` |\n| th:onclick  |\t点击事件  |\t`th:onclick=\"'getCollect()'\"` |\n| th:each |\t属性赋值  |\t`<tr th:each=\"user,userStat:${users}\">` |\n| th:if |\t判断条件  |\t`<a th:if=\"${userId == collect.userId}\" >`  |\n| th:unless |\t和th:if判断相反 |\t`<a th:href=\"@{/login}\" th:unless=${session.user != null}>Login</a>`  |\n| th:href |\t链接地址  |\t`<a th:href=\"@{/login}\" th:unless=${session.user != null}>Login</a> />` |\n| th:switch |\t多路选择 配合th:case 使用 |\t`<div th:switch=\"${user.role}\">`  |\n| th:case |\tth:switch的一个分支 |\t`<p th:case=\"'admin'\">User is an administrator</p>` |\n| th:fragment |\t布局标签，定义一个代码片段，方便其它地方引用  |\t`<div th:fragment=\"alert\">` |\n| th:include  |\t布局标签，替换内容到引入的文件\t  | `<head th:include=\"layout :: htmlhead\" th:with=\"title='xx'\"></head> />` |\n| th:replace  |\t布局标签，替换整个标签到引入的文件  |\t`<div th:replace=\"fragments/header :: title\"></div>`  |\n| th:selected |\tselected选择框 选中 |\t`th:selected=\"(${xxx.id} == ${configObj.dd})\"`  |\n| th:src  |\t图片类地址引入  |\t`<img class=\"img-responsive\" alt=\"App Logo\" th:src=\"@{/img/logo.png}\" />` |\n| th:inline |\t定义js脚本可以使用变量  |\t`<script type=\"text/javascript\" th:inline=\"javascript\">`  |\n| th:action |\t表单提交的地址  |\t`<form action=\"subscribe.html\" th:action=\"@{/subscribe}\">`  |\n| th:remove |\t删除某个属性  |\t`<tr th:remove=\"all\"> 1.all:删除包含标签和所有的孩子。2.body:不包含标记删除,但删除其所有的孩子。3.tag:包含标记的删除,但不删除它的孩子。4.all-but-first:删除所有包含标签的孩子,除了第一个。5.none:什么也不做。这个值是有用的动态评估。`  |\n| th:attr |\t设置标签属性，多个属性可以用逗号分隔  |\t比如 `th:attr=\"src=@{/image/aa.jpg},title=#{logo}\"`，此标签不太优雅，一般用的比较少。 |\n\n还有非常多的标签，这里只列出最常用的几个,由于一个标签内可以包含多个th:x属性，其生效的优先级顺序为:\n```\ninclude,each,if/unless/switch/case,with,attr/attrprepend/attrappend,value/href,src ,etc,text/utext,fragment,remove\n```\n\n## 几种常用的使用方式\n### 1. 赋值、字符串拼接\n```html\n <p  th:text=\"${collect.description}\">description</p>\n <span th:text=\"'Welcome to our application, ' + ${user.name} + '!'\">\n```\n字符串拼接还有另外一种简洁的写法\n```html\n<span th:text=\"|Welcome to our application, ${user.name}!|\">\n```\n\n### 2. 条件判断If/Unless\nThymeleaf中使用`th:if`和`th:unless`属性进行条件判断，下面的例子中，`<a>`标签只有在`th:if`中条件成立时才显示：\n```html\n<a th:if=\"${myself=='yes'}\" >test</a>\n<a th:unless=${session.user != null} th:href=\"@{/login}\" >Login</a>\n```\n`th:unless`与`th:if`恰好相反，只有表达式中的条件不成立，才会显示其内容。\n也可以使用 `(if) ? (then) : (else)` 这种语法来判断显示的内容\n\n### 3. for循环\n```html\n<tr  th:each=\"collect,iterStat : ${collects}\"> \n    <th scope=\"row\" th:text=\"${collect.id}\">1</th>\n    <td >\n      <img th:src=\"${collect.webLogo}\"/>\n    </td>\n    <td th:text=\"${collect.url}\">Mark</td>\n    <td th:text=\"${collect.title}\">Otto</td>\n    <td th:text=\"${collect.description}\">@mdo</td>\n    <td th:text=\"${iterStat.index}\">index</td>\n </tr>\n```\niterStat称作状态变量，属性有：\n- index:当前迭代对象的index（从0开始计算）\n- count: 当前迭代对象的index(从1开始计算)\n- size:被迭代对象的大小\n- current:当前迭代变量\n- even/odd:布尔值，当前循环是否是偶数/奇数（从0开始计算）\n- first:布尔值，当前循环是否是第一个\n- last:布尔值，当前循环是否是最后一个\n\n### 4. URL\nURL在Web应用模板中占据着十分重要的地位，需要特别注意的是Thymeleaf对于URL的处理是通过语法**@{...}**来处理的。\n如果需要Thymeleaf对URL进行渲染，那么务必使用`th:href`，`th:src`等属性，下面是一个例子\n```html\n<!-- Will produce 'http://localhost:8080/standard/unread' (plus rewriting) -->\n <a  th:href=\"@{/standard/{type}(type=${type})}\">view</a>\n\n<!-- Will produce '/gtvg/order/3/details' (plus rewriting) -->\n<a href=\"details.html\" th:href=\"@{/order/{orderId}/details(orderId=${o.id})}\">view</a>\n```\n设置背景\n```html\n<div th:style=\"'background:url(' + @{/<path-to-image>} + ');'\"></div>\n```\n根据属性值改变背景\n```html\n<div class=\"media-object resource-card-image\"  \n    th:style=\"'background:url(' + @{(${collect.webLogo}=='' ? 'img/favicon.png' : ${collect.webLogo})} + ')'\" >\n</div>\n```\n几点说明：\n\n- 上例中URL最后的`(orderId=${o.id})` 表示将括号内的内容作为URL参数处理，该语法避免使用字符串拼接，大大提高了可读性\n- `@{...}`表达式中可以通过`{orderId}`访问Context中的orderId变量\n- `@{/order}`是Context相关的相对路径，在渲染时会自动添加上当前Web应用的Context名字，假设context名字为app，那么结果应该是/app/order\n\n### 5. 内联js\n内联文本：`[[...]]`内联文本的表示方式，使用时，必须先用`th:inline=\"text/javascript/none\"`激活，`th:inline`可以在父级标签内使用，甚至作为body的标签。内联文本尽管比`th:text`的代码少，不利于原型显示。\n```html\n<script th:inline=\"javascript\">\n/*<![CDATA[*/\n...\nvar username = /*[[${sesion.user.name}]]*/ 'Sebastian';\nvar size = /*[[${size}]]*/ 0;\n...\n/*]]>*/\n</script>\n```\njs附加代码：\n```html\n/*[+\nvar msg = 'This is a working application';\n+]*/\n```\njs移除代码：\n```html\n/*[- */\nvar msg = 'This is a non-working template';\n/* -]*/\n```\n\n### 6. 内嵌变量\n为了模板更加易用，Thymeleaf还提供了一系列Utility对象（内置于Context中），可以通过#直接访问：\n- dates ： java.util.Date的功能方法类。\n- calendars : 类似#dates，面向java.util.Calendar\n- numbers : 格式化数字的功能方法类\n- strings : 字符串对象的功能类，contains,startWiths,prepending/appending等等。\n- objects: 对objects的功能类操作。\n- bools: 对布尔值求值的功能方法。\n- arrays：对数组的功能类方法。\n- lists: 对lists功能类方法\n- sets\n- maps\n- ...\n下面用一段代码来举例一些常用的方法：\n\n**dates**\n```\n/*\n * Format date with the specified pattern\n * Also works with arrays, lists or sets\n */\n${#dates.format(date, 'dd/MMM/yyyy HH:mm')}\n${#dates.arrayFormat(datesArray, 'dd/MMM/yyyy HH:mm')}\n${#dates.listFormat(datesList, 'dd/MMM/yyyy HH:mm')}\n${#dates.setFormat(datesSet, 'dd/MMM/yyyy HH:mm')}\n\n/*\n * Create a date (java.util.Date) object for the current date and time\n */\n${#dates.createNow()}\n\n/*\n * Create a date (java.util.Date) object for the current date (time set to 00:00)\n */\n${#dates.createToday()}\n```\n\n**strings**\n```\n/*\n * Check whether a String is empty (or null). Performs a trim() operation before check\n * Also works with arrays, lists or sets\n */\n${#strings.isEmpty(name)}\n${#strings.arrayIsEmpty(nameArr)}\n${#strings.listIsEmpty(nameList)}\n${#strings.setIsEmpty(nameSet)}\n\n/*\n * Check whether a String starts or ends with a fragment\n * Also works with arrays, lists or sets\n */\n${#strings.startsWith(name,'Don')}                  // also array*, list* and set*\n${#strings.endsWith(name,endingFragment)}           // also array*, list* and set*\n\n/*\n * Compute length\n * Also works with arrays, lists or sets\n */\n${#strings.length(str)}\n\n/*\n * Null-safe comparison and concatenation\n */\n${#strings.equals(str)}\n${#strings.equalsIgnoreCase(str)}\n${#strings.concat(str)}\n${#strings.concatReplaceNulls(str)}\n\n/*\n * Random\n */\n${#strings.randomAlphanumeric(count)}\n```\n\n## 布局\n使用thymeleaf布局非常的方便\n\n定义代码片段\n```html\n<footer th:fragment=\"copy\"> \n  &copy; 2016\n</footer>\n```\n在页面任何地方引入：\n```html\n<body> \n  <div th:include=\"footer :: copy\"></div>\n  <div th:replace=\"footer :: copy\"></div>\n</body>\n```\n`th:include` 和 `th:replace`区别，include只是加载，replace是替换\n\n返回的HTML如下：\n```html\n<body> \n  <div> &copy; 2016 </div> \n  <footer> &copy; 2016 </footer> \n</body>\n```\n下面是一个常用的后台页面布局，将整个页面分为头部，尾部、菜单栏、隐藏栏，点击菜单只改变content区域的页面\n```html\n<body class=\"layout-fixed\">\n  <div th:fragment=\"navbar\"  class=\"wrapper\"  role=\"navigation\">\n    <div th:replace=\"fragments/header :: header\">Header</div>\n    <div th:replace=\"fragments/left :: left\">left</div>\n    <div th:replace=\"fragments/sidebar :: sidebar\">sidebar</div>\n    <div layout:fragment=\"content\" id=\"content\" ></div>\n    <div th:replace=\"fragments/footer :: footer\">footer</div>\n  </div>\n</body>\n```\n任何页面想使用这样的布局值只需要替换中间的 content模块即可\n```html\n <html xmlns:th=\"http://www.thymeleaf.org\" layout:decorator=\"layout\">\n   <body>\n      <section layout:fragment=\"content\">\n    ...\n```\n也可以在引用模版的时候传参\n```html\n<head th:include=\"layout :: htmlhead\" th:with=\"title='Hello'\"></head>\n```\nlayout 是文件地址，如果有文件夹可以这样写 `fileName/layout:htmlhead`\n\nhtmlhead 是指定义的代码片段 如 `th:fragment=\"copy\"`\n\n## 参考\n- [Thymeleaf使用详解](https://www.cnblogs.com/ityouknow/p/5833560.html)\n- [Thymeleaf学习总结](https://blog.csdn.net/column/details/16513.html)\n\n\n","source":"_posts/spring-springboot-thymeleaf.md","raw":"---\ntitle: SpringBoot实战（四）Thymeleaf\nauthor: SnailDev\ntags:\n  - SpringBoot\n  - Thymeleaf\ncategories:\n  - SpringBoot\ndate: 2018-09-04 22:27:08\nfeatured_image: /images/spring-springboot-1.jpg\n---\n![spring-springboot-thymeleaf](/images/spring-springboot-1.jpg)\n\nThymeleaf是新一代的模板引擎，在Spring 4.0中推荐使用Thymeleaf来做前端模板引擎。\n<!--more-->\n之前在[springBoot实战（二）Web](https://snaildev.github.io/article/spring-springboot-web.html)中简单介绍了下thymeleaf，本篇将更加全面详细的介绍thymeleaf的使用。\n\n## 介绍\n简单说，Thymeleaf是一个跟Velocity、FreeMarker类似的模板引擎，它可以完全替代JSP。相比较其他模板引擎，它有如下三个极其吸引人的特点：\n1. Thymeleaf 在有网络和无网络的环境下皆可运行，即它可以让前端在浏览器查看页面的静态效果，也可以让开发人员在服务器查看带数据的动态页面效果。这是由于它支持html原型，然后在html标签里增加额外的属性来达到模板+数据的展示方式。浏览器解释html时会忽略未定义的标签属性，所以thymeleaf的模板可以静态的运行；当有数据返回到页面时，thymeleaf标签会动态地替换掉静态内容，使页面动态显示。\n2. Thymeleaf 开箱即用的特性。它提供标准和spring标准两种方言，可以直接套用模板实现JSTL、OGNL表达式效果，避免每天套模板，改JSTL、改标签的困扰，同时开发人员也可以扩展和创建自定义的方言。\n3. Thymeleaf 提供spring标准方言和一个与Spring MVC完美继承的可选模块，可以快速实现表单绑定、属性编辑器和国际化等功能。\n\n## 表达式\n它们分为四类：\n1. 变量表达式\n2. 选择或星号表达式\n3. 文字国际化表达式\n4. URL表达式\n\n### 变量表达式\n变量表达式即OGNL表达式或Spring EL表达式（在Spring 术语中也叫做model attributes）。如下所示：\n```\n${session.user.name}\n```\n它们将以HTML标签的一个属性来表示：\n```html\n<li th:each=\"book : ${books}\">\n  <span th:text=\"${book.author.name}\">author's name</span>\n</li>\n```\n\n### 选择（星号）表达式\n选择表达式很像变量表达式，不过它们用一个预先选择的对象来代替上下文变量容器（map）来执行，如下：\n```\n*{customer.name}\n```\n被指定的object由`th:object`属性定义：\n```html\n<div th:object=\"${book}\">\n  <span th:text=\"*{title}\">book's title<span>\n</div>\n```\n\n### 文字国际化表达式\n文字国际化表达式允许我们从一个外部文件获取区域文字信息（.properties），用Key索引Value，还可以提供一组参数（可选）。\n```\n#{main.title}\n#{message.entrycreated(${entryId})}\n```\n可以在模板文件中找到这样的表达式代码：\n```html\n<table>\n  <th th:text=\"#{header.address.city}\">city</th>\n  <th th:text=\"#{header.address.country}\">country</th>\n</table>\n```\n\n### URL表达式\nURL表达式值指的是把一个有用的上下文或会话信息添加到URL，这个过程经常被叫做URL重写。\n```\n@{/order/list}\n```\nURL还可以设置参数\n```\n@{/order/details(id=${orderId})}\n```\n相对路径\n```\n@{../documents/report}\n```\n让我们来看这些表达式：\n```html\n<form th:action=\"@{/createOrder}\">...</form>\n<a href=\"main.html\" th:href=\"@{/main}\">...</a>\n```\n\n### 变量表达式VS选择表达式\n如果不考虑上下文的情况下，两者没有区别；星号语法在选定对象上表达，而不是整个上下文。\n什么是选定对象？就是父标签的值，如下：\n```html\n<div th:object=\"${session.user}\">\n  <p>FirstName: <span th:text=\"*{firstName}\">Sebastian</span>.</p>\n  <p>LastName: <span th:text=\"*{lastName}\">Pepper</span>.</p>\n  <p>Nationnality: <span th:text=\"*{nationnality}\">Saturn</span>.</p>\n</div>\n```\n这完全等价于：\n```html\n<div>\n  <p>FirstName: <span th:text=\"${session.user.firstName}\">Sebastian</span>.</p>\n  <p>LastName: <span th:text=\"${session.user.lastName}\">Pepper</span>.</p>\n  <p>Nationnality: <span th:text=\"${session.user.nationnality}\">Saturn</span>.</p>\n</div>\n```\n当然，美元符号和星号语法可以混合使用\n```html\n<div th:object=\"${session.user}\">\n  <p>FirstName: <span th:text=\"*{firstName}\">Sebastian</span>.</p>\n  <p>LastName: <span th:text=\"${session.user.lastName}\">Pepper</span>.</p>\n  <p>Nationnality: <span th:text=\"*{nationnality}\">Saturn</span>.</p>\n</div>\n```\n\n## 表达式支持的语法\n### 字面（Literals）\n- 文本文字（Text literals）: `'one text', 'Another one!',…`\n- 数字文本（Number literals）: `0, 34, 3.0, 12.3,…`\n- 布尔文本（Boolean literals）: `true, false`\n- 空（Null literal）: `null`\n- 文字标记（Literal tokens）: `one, sometext, main,…`\n\n### 文本操作（Text operations）\n- 字符串连接(String concatenation): `+`\n- 文本替换（Literal substitutions）: `|The name is ${name}|`\n\n### 算术运算（Arithmetic operations）\n- 二元运算符（Binary operators）: `+, -, *, /, %`\n- 减号（单目运算符）Minus sign (unary operator): `-`\n\n### 布尔操作（Boolean operations）\n- 二元运算符（Binary operators）:`and, or`\n- 布尔否定（一元运算符）Boolean negation (unary operator):`!, not`\n\n### 比较和等价(Comparisons and equality)\n- 比较（Comparators）: `>, <, >=, <= (gt, lt, ge, le)`\n- 等值运算符（Equality operators）:`==, != (eq, ne)`\n\n### 条件运算符（Conditional operators）\n- If-then: `(if) ? (then)`\n- If-then-else: `(if) ? (then) : (else)`\n- Default: `(value) ?: (defaultvalue)`\n\n所有这些特征可以被组合并嵌套：\n```\n'User is of type ' + (${user.isAdmin()} ? 'Administrator' : (${user.type} ?: 'Unknown'))\n```\n\n## 常用的th标签\n\n| 关键字 | 功能介绍 | 案例 |\n|:------  |:------ |:------ |\n| th:id | 替换id | `<input th:id=\"'xxx' + ${collect.id}\"/>` |\n| th:text | 文本替换  | `<p th:text=\"${collect.description}\">description</p>` |\n| th:utext  |\t支持html的文本替换  |\t`<p th:utext=\"${htmlcontent}\">conten</p>` |\n| th:object |\t替换对象  |\t`<div th:object=\"${session.user}\">` |\n| th:value  |\t属性赋值  |\t`<input th:value=\"${user.name}\" />` |\n| th:with |\t变量赋值运算  |\t`<div th:with=\"isEven=${prodStat.count}%2==0\"></div>` |\n| th:style  |\t设置样式  |\t`th:style=\"'display:' + @{(${sitrue} ? 'none' : 'inline-block')} + ''\"` |\n| th:onclick  |\t点击事件  |\t`th:onclick=\"'getCollect()'\"` |\n| th:each |\t属性赋值  |\t`<tr th:each=\"user,userStat:${users}\">` |\n| th:if |\t判断条件  |\t`<a th:if=\"${userId == collect.userId}\" >`  |\n| th:unless |\t和th:if判断相反 |\t`<a th:href=\"@{/login}\" th:unless=${session.user != null}>Login</a>`  |\n| th:href |\t链接地址  |\t`<a th:href=\"@{/login}\" th:unless=${session.user != null}>Login</a> />` |\n| th:switch |\t多路选择 配合th:case 使用 |\t`<div th:switch=\"${user.role}\">`  |\n| th:case |\tth:switch的一个分支 |\t`<p th:case=\"'admin'\">User is an administrator</p>` |\n| th:fragment |\t布局标签，定义一个代码片段，方便其它地方引用  |\t`<div th:fragment=\"alert\">` |\n| th:include  |\t布局标签，替换内容到引入的文件\t  | `<head th:include=\"layout :: htmlhead\" th:with=\"title='xx'\"></head> />` |\n| th:replace  |\t布局标签，替换整个标签到引入的文件  |\t`<div th:replace=\"fragments/header :: title\"></div>`  |\n| th:selected |\tselected选择框 选中 |\t`th:selected=\"(${xxx.id} == ${configObj.dd})\"`  |\n| th:src  |\t图片类地址引入  |\t`<img class=\"img-responsive\" alt=\"App Logo\" th:src=\"@{/img/logo.png}\" />` |\n| th:inline |\t定义js脚本可以使用变量  |\t`<script type=\"text/javascript\" th:inline=\"javascript\">`  |\n| th:action |\t表单提交的地址  |\t`<form action=\"subscribe.html\" th:action=\"@{/subscribe}\">`  |\n| th:remove |\t删除某个属性  |\t`<tr th:remove=\"all\"> 1.all:删除包含标签和所有的孩子。2.body:不包含标记删除,但删除其所有的孩子。3.tag:包含标记的删除,但不删除它的孩子。4.all-but-first:删除所有包含标签的孩子,除了第一个。5.none:什么也不做。这个值是有用的动态评估。`  |\n| th:attr |\t设置标签属性，多个属性可以用逗号分隔  |\t比如 `th:attr=\"src=@{/image/aa.jpg},title=#{logo}\"`，此标签不太优雅，一般用的比较少。 |\n\n还有非常多的标签，这里只列出最常用的几个,由于一个标签内可以包含多个th:x属性，其生效的优先级顺序为:\n```\ninclude,each,if/unless/switch/case,with,attr/attrprepend/attrappend,value/href,src ,etc,text/utext,fragment,remove\n```\n\n## 几种常用的使用方式\n### 1. 赋值、字符串拼接\n```html\n <p  th:text=\"${collect.description}\">description</p>\n <span th:text=\"'Welcome to our application, ' + ${user.name} + '!'\">\n```\n字符串拼接还有另外一种简洁的写法\n```html\n<span th:text=\"|Welcome to our application, ${user.name}!|\">\n```\n\n### 2. 条件判断If/Unless\nThymeleaf中使用`th:if`和`th:unless`属性进行条件判断，下面的例子中，`<a>`标签只有在`th:if`中条件成立时才显示：\n```html\n<a th:if=\"${myself=='yes'}\" >test</a>\n<a th:unless=${session.user != null} th:href=\"@{/login}\" >Login</a>\n```\n`th:unless`与`th:if`恰好相反，只有表达式中的条件不成立，才会显示其内容。\n也可以使用 `(if) ? (then) : (else)` 这种语法来判断显示的内容\n\n### 3. for循环\n```html\n<tr  th:each=\"collect,iterStat : ${collects}\"> \n    <th scope=\"row\" th:text=\"${collect.id}\">1</th>\n    <td >\n      <img th:src=\"${collect.webLogo}\"/>\n    </td>\n    <td th:text=\"${collect.url}\">Mark</td>\n    <td th:text=\"${collect.title}\">Otto</td>\n    <td th:text=\"${collect.description}\">@mdo</td>\n    <td th:text=\"${iterStat.index}\">index</td>\n </tr>\n```\niterStat称作状态变量，属性有：\n- index:当前迭代对象的index（从0开始计算）\n- count: 当前迭代对象的index(从1开始计算)\n- size:被迭代对象的大小\n- current:当前迭代变量\n- even/odd:布尔值，当前循环是否是偶数/奇数（从0开始计算）\n- first:布尔值，当前循环是否是第一个\n- last:布尔值，当前循环是否是最后一个\n\n### 4. URL\nURL在Web应用模板中占据着十分重要的地位，需要特别注意的是Thymeleaf对于URL的处理是通过语法**@{...}**来处理的。\n如果需要Thymeleaf对URL进行渲染，那么务必使用`th:href`，`th:src`等属性，下面是一个例子\n```html\n<!-- Will produce 'http://localhost:8080/standard/unread' (plus rewriting) -->\n <a  th:href=\"@{/standard/{type}(type=${type})}\">view</a>\n\n<!-- Will produce '/gtvg/order/3/details' (plus rewriting) -->\n<a href=\"details.html\" th:href=\"@{/order/{orderId}/details(orderId=${o.id})}\">view</a>\n```\n设置背景\n```html\n<div th:style=\"'background:url(' + @{/<path-to-image>} + ');'\"></div>\n```\n根据属性值改变背景\n```html\n<div class=\"media-object resource-card-image\"  \n    th:style=\"'background:url(' + @{(${collect.webLogo}=='' ? 'img/favicon.png' : ${collect.webLogo})} + ')'\" >\n</div>\n```\n几点说明：\n\n- 上例中URL最后的`(orderId=${o.id})` 表示将括号内的内容作为URL参数处理，该语法避免使用字符串拼接，大大提高了可读性\n- `@{...}`表达式中可以通过`{orderId}`访问Context中的orderId变量\n- `@{/order}`是Context相关的相对路径，在渲染时会自动添加上当前Web应用的Context名字，假设context名字为app，那么结果应该是/app/order\n\n### 5. 内联js\n内联文本：`[[...]]`内联文本的表示方式，使用时，必须先用`th:inline=\"text/javascript/none\"`激活，`th:inline`可以在父级标签内使用，甚至作为body的标签。内联文本尽管比`th:text`的代码少，不利于原型显示。\n```html\n<script th:inline=\"javascript\">\n/*<![CDATA[*/\n...\nvar username = /*[[${sesion.user.name}]]*/ 'Sebastian';\nvar size = /*[[${size}]]*/ 0;\n...\n/*]]>*/\n</script>\n```\njs附加代码：\n```html\n/*[+\nvar msg = 'This is a working application';\n+]*/\n```\njs移除代码：\n```html\n/*[- */\nvar msg = 'This is a non-working template';\n/* -]*/\n```\n\n### 6. 内嵌变量\n为了模板更加易用，Thymeleaf还提供了一系列Utility对象（内置于Context中），可以通过#直接访问：\n- dates ： java.util.Date的功能方法类。\n- calendars : 类似#dates，面向java.util.Calendar\n- numbers : 格式化数字的功能方法类\n- strings : 字符串对象的功能类，contains,startWiths,prepending/appending等等。\n- objects: 对objects的功能类操作。\n- bools: 对布尔值求值的功能方法。\n- arrays：对数组的功能类方法。\n- lists: 对lists功能类方法\n- sets\n- maps\n- ...\n下面用一段代码来举例一些常用的方法：\n\n**dates**\n```\n/*\n * Format date with the specified pattern\n * Also works with arrays, lists or sets\n */\n${#dates.format(date, 'dd/MMM/yyyy HH:mm')}\n${#dates.arrayFormat(datesArray, 'dd/MMM/yyyy HH:mm')}\n${#dates.listFormat(datesList, 'dd/MMM/yyyy HH:mm')}\n${#dates.setFormat(datesSet, 'dd/MMM/yyyy HH:mm')}\n\n/*\n * Create a date (java.util.Date) object for the current date and time\n */\n${#dates.createNow()}\n\n/*\n * Create a date (java.util.Date) object for the current date (time set to 00:00)\n */\n${#dates.createToday()}\n```\n\n**strings**\n```\n/*\n * Check whether a String is empty (or null). Performs a trim() operation before check\n * Also works with arrays, lists or sets\n */\n${#strings.isEmpty(name)}\n${#strings.arrayIsEmpty(nameArr)}\n${#strings.listIsEmpty(nameList)}\n${#strings.setIsEmpty(nameSet)}\n\n/*\n * Check whether a String starts or ends with a fragment\n * Also works with arrays, lists or sets\n */\n${#strings.startsWith(name,'Don')}                  // also array*, list* and set*\n${#strings.endsWith(name,endingFragment)}           // also array*, list* and set*\n\n/*\n * Compute length\n * Also works with arrays, lists or sets\n */\n${#strings.length(str)}\n\n/*\n * Null-safe comparison and concatenation\n */\n${#strings.equals(str)}\n${#strings.equalsIgnoreCase(str)}\n${#strings.concat(str)}\n${#strings.concatReplaceNulls(str)}\n\n/*\n * Random\n */\n${#strings.randomAlphanumeric(count)}\n```\n\n## 布局\n使用thymeleaf布局非常的方便\n\n定义代码片段\n```html\n<footer th:fragment=\"copy\"> \n  &copy; 2016\n</footer>\n```\n在页面任何地方引入：\n```html\n<body> \n  <div th:include=\"footer :: copy\"></div>\n  <div th:replace=\"footer :: copy\"></div>\n</body>\n```\n`th:include` 和 `th:replace`区别，include只是加载，replace是替换\n\n返回的HTML如下：\n```html\n<body> \n  <div> &copy; 2016 </div> \n  <footer> &copy; 2016 </footer> \n</body>\n```\n下面是一个常用的后台页面布局，将整个页面分为头部，尾部、菜单栏、隐藏栏，点击菜单只改变content区域的页面\n```html\n<body class=\"layout-fixed\">\n  <div th:fragment=\"navbar\"  class=\"wrapper\"  role=\"navigation\">\n    <div th:replace=\"fragments/header :: header\">Header</div>\n    <div th:replace=\"fragments/left :: left\">left</div>\n    <div th:replace=\"fragments/sidebar :: sidebar\">sidebar</div>\n    <div layout:fragment=\"content\" id=\"content\" ></div>\n    <div th:replace=\"fragments/footer :: footer\">footer</div>\n  </div>\n</body>\n```\n任何页面想使用这样的布局值只需要替换中间的 content模块即可\n```html\n <html xmlns:th=\"http://www.thymeleaf.org\" layout:decorator=\"layout\">\n   <body>\n      <section layout:fragment=\"content\">\n    ...\n```\n也可以在引用模版的时候传参\n```html\n<head th:include=\"layout :: htmlhead\" th:with=\"title='Hello'\"></head>\n```\nlayout 是文件地址，如果有文件夹可以这样写 `fileName/layout:htmlhead`\n\nhtmlhead 是指定义的代码片段 如 `th:fragment=\"copy\"`\n\n## 参考\n- [Thymeleaf使用详解](https://www.cnblogs.com/ityouknow/p/5833560.html)\n- [Thymeleaf学习总结](https://blog.csdn.net/column/details/16513.html)\n\n\n","slug":"spring-springboot-thymeleaf","published":1,"updated":"2018-10-07T06:56:07.839Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmyu0sbs000xx8uolpmds5nj","content":"<p><img src=\"/images/spring-springboot-1.jpg\" alt=\"spring-springboot-thymeleaf\"></p><p>Thymeleaf是新一代的模板引擎，在Spring 4.0中推荐使用Thymeleaf来做前端模板引擎。<a id=\"more\"></a> 之前在<a href=\"https://snaildev.github.io/article/spring-springboot-web.html\">springBoot实战（二）Web</a>中简单介绍了下thymeleaf，本篇将更加全面详细的介绍thymeleaf的使用。</p><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>简单说，Thymeleaf是一个跟Velocity、FreeMarker类似的模板引擎，它可以完全替代JSP。相比较其他模板引擎，它有如下三个极其吸引人的特点：</p><ol><li>Thymeleaf 在有网络和无网络的环境下皆可运行，即它可以让前端在浏览器查看页面的静态效果，也可以让开发人员在服务器查看带数据的动态页面效果。这是由于它支持html原型，然后在html标签里增加额外的属性来达到模板+数据的展示方式。浏览器解释html时会忽略未定义的标签属性，所以thymeleaf的模板可以静态的运行；当有数据返回到页面时，thymeleaf标签会动态地替换掉静态内容，使页面动态显示。</li><li>Thymeleaf 开箱即用的特性。它提供标准和spring标准两种方言，可以直接套用模板实现JSTL、OGNL表达式效果，避免每天套模板，改JSTL、改标签的困扰，同时开发人员也可以扩展和创建自定义的方言。</li><li>Thymeleaf 提供spring标准方言和一个与Spring MVC完美继承的可选模块，可以快速实现表单绑定、属性编辑器和国际化等功能。</li></ol><h2 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h2><p>它们分为四类：</p><ol><li>变量表达式</li><li>选择或星号表达式</li><li>文字国际化表达式</li><li>URL表达式</li></ol><h3 id=\"变量表达式\"><a href=\"#变量表达式\" class=\"headerlink\" title=\"变量表达式\"></a>变量表达式</h3><p>变量表达式即OGNL表达式或Spring EL表达式（在Spring 术语中也叫做model attributes）。如下所示：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;session.user.name&#125;</span><br></pre></td></tr></table></figure><p></p><p>它们将以HTML标签的一个属性来表示：</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">th:each</span>=<span class=\"string\">\"book : $&#123;books&#125;\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;book.author.name&#125;\"</span>&gt;</span>author's name<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h3 id=\"选择（星号）表达式\"><a href=\"#选择（星号）表达式\" class=\"headerlink\" title=\"选择（星号）表达式\"></a>选择（星号）表达式</h3><p>选择表达式很像变量表达式，不过它们用一个预先选择的对象来代替上下文变量容器（map）来执行，如下：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*&#123;customer.name&#125;</span><br></pre></td></tr></table></figure><p></p><p>被指定的object由<code>th:object</code>属性定义：</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:object</span>=<span class=\"string\">\"$&#123;book&#125;\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"*&#123;title&#125;\"</span>&gt;</span>book's title<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h3 id=\"文字国际化表达式\"><a href=\"#文字国际化表达式\" class=\"headerlink\" title=\"文字国际化表达式\"></a>文字国际化表达式</h3><p>文字国际化表达式允许我们从一个外部文件获取区域文字信息（.properties），用Key索引Value，还可以提供一组参数（可选）。</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#&#123;main.title&#125;</span><br><span class=\"line\">#&#123;message.entrycreated($&#123;entryId&#125;)&#125;</span><br></pre></td></tr></table></figure><p></p><p>可以在模板文件中找到这样的表达式代码：</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"#&#123;header.address.city&#125;\"</span>&gt;</span>city<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"#&#123;header.address.country&#125;\"</span>&gt;</span>country<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h3 id=\"URL表达式\"><a href=\"#URL表达式\" class=\"headerlink\" title=\"URL表达式\"></a>URL表达式</h3><p>URL表达式值指的是把一个有用的上下文或会话信息添加到URL，这个过程经常被叫做URL重写。</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@&#123;/order/list&#125;</span><br></pre></td></tr></table></figure><p></p><p>URL还可以设置参数</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@&#123;/order/details(id=$&#123;orderId&#125;)&#125;</span><br></pre></td></tr></table></figure><p></p><p>相对路径</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@&#123;../documents/report&#125;</span><br></pre></td></tr></table></figure><p></p><p>让我们来看这些表达式：</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">th:action</span>=<span class=\"string\">\"@&#123;/createOrder&#125;\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.html\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/main&#125;\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h3 id=\"变量表达式VS选择表达式\"><a href=\"#变量表达式VS选择表达式\" class=\"headerlink\" title=\"变量表达式VS选择表达式\"></a>变量表达式VS选择表达式</h3><p>如果不考虑上下文的情况下，两者没有区别；星号语法在选定对象上表达，而不是整个上下文。 什么是选定对象？就是父标签的值，如下：</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:object</span>=<span class=\"string\">\"$&#123;session.user&#125;\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>FirstName: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"*&#123;firstName&#125;\"</span>&gt;</span>Sebastian<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>LastName: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"*&#123;lastName&#125;\"</span>&gt;</span>Pepper<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Nationnality: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"*&#123;nationnality&#125;\"</span>&gt;</span>Saturn<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>这完全等价于：</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>FirstName: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;session.user.firstName&#125;\"</span>&gt;</span>Sebastian<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>LastName: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;session.user.lastName&#125;\"</span>&gt;</span>Pepper<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Nationnality: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;session.user.nationnality&#125;\"</span>&gt;</span>Saturn<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>当然，美元符号和星号语法可以混合使用</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:object</span>=<span class=\"string\">\"$&#123;session.user&#125;\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>FirstName: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"*&#123;firstName&#125;\"</span>&gt;</span>Sebastian<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>LastName: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;session.user.lastName&#125;\"</span>&gt;</span>Pepper<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Nationnality: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"*&#123;nationnality&#125;\"</span>&gt;</span>Saturn<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h2 id=\"表达式支持的语法\"><a href=\"#表达式支持的语法\" class=\"headerlink\" title=\"表达式支持的语法\"></a>表达式支持的语法</h2><h3 id=\"字面（Literals）\"><a href=\"#字面（Literals）\" class=\"headerlink\" title=\"字面（Literals）\"></a>字面（Literals）</h3><ul><li>文本文字（Text literals）: <code>&#39;one text&#39;, &#39;Another one!&#39;,…</code></li><li>数字文本（Number literals）: <code>0, 34, 3.0, 12.3,…</code></li><li>布尔文本（Boolean literals）: <code>true, false</code></li><li>空（Null literal）: <code>null</code></li><li>文字标记（Literal tokens）: <code>one, sometext, main,…</code></li></ul><h3 id=\"文本操作（Text-operations）\"><a href=\"#文本操作（Text-operations）\" class=\"headerlink\" title=\"文本操作（Text operations）\"></a>文本操作（Text operations）</h3><ul><li>字符串连接(String concatenation): <code>+</code></li><li>文本替换（Literal substitutions）: <code>|The name is ${name}|</code></li></ul><h3 id=\"算术运算（Arithmetic-operations）\"><a href=\"#算术运算（Arithmetic-operations）\" class=\"headerlink\" title=\"算术运算（Arithmetic operations）\"></a>算术运算（Arithmetic operations）</h3><ul><li>二元运算符（Binary operators）: <code>+, -, *, /, %</code></li><li>减号（单目运算符）Minus sign (unary operator): <code>-</code></li></ul><h3 id=\"布尔操作（Boolean-operations）\"><a href=\"#布尔操作（Boolean-operations）\" class=\"headerlink\" title=\"布尔操作（Boolean operations）\"></a>布尔操作（Boolean operations）</h3><ul><li>二元运算符（Binary operators）:<code>and, or</code></li><li>布尔否定（一元运算符）Boolean negation (unary operator):<code>!, not</code></li></ul><h3 id=\"比较和等价-Comparisons-and-equality\"><a href=\"#比较和等价-Comparisons-and-equality\" class=\"headerlink\" title=\"比较和等价(Comparisons and equality)\"></a>比较和等价(Comparisons and equality)</h3><ul><li>比较（Comparators）: <code>&gt;, &lt;, &gt;=, &lt;= (gt, lt, ge, le)</code></li><li>等值运算符（Equality operators）:<code>==, != (eq, ne)</code></li></ul><h3 id=\"条件运算符（Conditional-operators）\"><a href=\"#条件运算符（Conditional-operators）\" class=\"headerlink\" title=\"条件运算符（Conditional operators）\"></a>条件运算符（Conditional operators）</h3><ul><li>If-then: <code>(if) ? (then)</code></li><li>If-then-else: <code>(if) ? (then) : (else)</code></li><li>Default: <code>(value) ?: (defaultvalue)</code></li></ul><p>所有这些特征可以被组合并嵌套：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;User is of type &apos; + ($&#123;user.isAdmin()&#125; ? &apos;Administrator&apos; : ($&#123;user.type&#125; ?: &apos;Unknown&apos;))</span><br></pre></td></tr></table></figure><p></p><h2 id=\"常用的th标签\"><a href=\"#常用的th标签\" class=\"headerlink\" title=\"常用的th标签\"></a>常用的th标签</h2><table><thead><tr><th style=\"text-align:left\">关键字</th><th style=\"text-align:left\">功能介绍</th><th style=\"text-align:left\">案例</th></tr></thead><tbody><tr><td style=\"text-align:left\">th:id</td><td style=\"text-align:left\">替换id</td><td style=\"text-align:left\"><code>&lt;input th:id=&quot;&#39;xxx&#39; + ${collect.id}&quot;/&gt;</code></td></tr><tr><td style=\"text-align:left\">th:text</td><td style=\"text-align:left\">文本替换</td><td style=\"text-align:left\"><code>&lt;p th:text=&quot;${collect.description}&quot;&gt;description&lt;/p&gt;</code></td></tr><tr><td style=\"text-align:left\">th:utext</td><td style=\"text-align:left\">支持html的文本替换</td><td style=\"text-align:left\"><code>&lt;p th:utext=&quot;${htmlcontent}&quot;&gt;conten&lt;/p&gt;</code></td></tr><tr><td style=\"text-align:left\">th:object</td><td style=\"text-align:left\">替换对象</td><td style=\"text-align:left\"><code>&lt;div th:object=&quot;${session.user}&quot;&gt;</code></td></tr><tr><td style=\"text-align:left\">th:value</td><td style=\"text-align:left\">属性赋值</td><td style=\"text-align:left\"><code>&lt;input th:value=&quot;${user.name}&quot; /&gt;</code></td></tr><tr><td style=\"text-align:left\">th:with</td><td style=\"text-align:left\">变量赋值运算</td><td style=\"text-align:left\"><code>&lt;div th:with=&quot;isEven=${prodStat.count}%2==0&quot;&gt;&lt;/div&gt;</code></td></tr><tr><td style=\"text-align:left\">th:style</td><td style=\"text-align:left\">设置样式</td><td style=\"text-align:left\"><code>th:style=&quot;&#39;display:&#39; + @{(${sitrue} ? &#39;none&#39; : &#39;inline-block&#39;)} + &#39;&#39;&quot;</code></td></tr><tr><td style=\"text-align:left\">th:onclick</td><td style=\"text-align:left\">点击事件</td><td style=\"text-align:left\"><code>th:onclick=&quot;&#39;getCollect()&#39;&quot;</code></td></tr><tr><td style=\"text-align:left\">th:each</td><td style=\"text-align:left\">属性赋值</td><td style=\"text-align:left\"><code>&lt;tr th:each=&quot;user,userStat:${users}&quot;&gt;</code></td></tr><tr><td style=\"text-align:left\">th:if</td><td style=\"text-align:left\">判断条件</td><td style=\"text-align:left\"><code>&lt;a th:if=&quot;${userId == collect.userId}&quot; &gt;</code></td></tr><tr><td style=\"text-align:left\">th:unless</td><td style=\"text-align:left\">和th:if判断相反</td><td style=\"text-align:left\"><code>&lt;a th:href=&quot;@{/login}&quot; th:unless=${session.user != null}&gt;Login&lt;/a&gt;</code></td></tr><tr><td style=\"text-align:left\">th:href</td><td style=\"text-align:left\">链接地址</td><td style=\"text-align:left\"><code>&lt;a th:href=&quot;@{/login}&quot; th:unless=${session.user != null}&gt;Login&lt;/a&gt; /&gt;</code></td></tr><tr><td style=\"text-align:left\">th:switch</td><td style=\"text-align:left\">多路选择 配合th:case 使用</td><td style=\"text-align:left\"><code>&lt;div th:switch=&quot;${user.role}&quot;&gt;</code></td></tr><tr><td style=\"text-align:left\">th:case</td><td style=\"text-align:left\">th:switch的一个分支</td><td style=\"text-align:left\"><code>&lt;p th:case=&quot;&#39;admin&#39;&quot;&gt;User is an administrator&lt;/p&gt;</code></td></tr><tr><td style=\"text-align:left\">th:fragment</td><td style=\"text-align:left\">布局标签，定义一个代码片段，方便其它地方引用</td><td style=\"text-align:left\"><code>&lt;div th:fragment=&quot;alert&quot;&gt;</code></td></tr><tr><td style=\"text-align:left\">th:include</td><td style=\"text-align:left\">布局标签，替换内容到引入的文件</td><td style=\"text-align:left\"><code>&lt;head th:include=&quot;layout :: htmlhead&quot; th:with=&quot;title=&#39;xx&#39;&quot;&gt;&lt;/head&gt; /&gt;</code></td></tr><tr><td style=\"text-align:left\">th:replace</td><td style=\"text-align:left\">布局标签，替换整个标签到引入的文件</td><td style=\"text-align:left\"><code>&lt;div th:replace=&quot;fragments/header :: title&quot;&gt;&lt;/div&gt;</code></td></tr><tr><td style=\"text-align:left\">th:selected</td><td style=\"text-align:left\">selected选择框 选中</td><td style=\"text-align:left\"><code>th:selected=&quot;(${xxx.id} == ${configObj.dd})&quot;</code></td></tr><tr><td style=\"text-align:left\">th:src</td><td style=\"text-align:left\">图片类地址引入</td><td style=\"text-align:left\"><code>&lt;img class=&quot;img-responsive&quot; alt=&quot;App Logo&quot; th:src=&quot;@{/img/logo.png}&quot; /&gt;</code></td></tr><tr><td style=\"text-align:left\">th:inline</td><td style=\"text-align:left\">定义js脚本可以使用变量</td><td style=\"text-align:left\"><code>&lt;script type=&quot;text/javascript&quot; th:inline=&quot;javascript&quot;&gt;</code></td></tr><tr><td style=\"text-align:left\">th:action</td><td style=\"text-align:left\">表单提交的地址</td><td style=\"text-align:left\"><code>&lt;form action=&quot;subscribe.html&quot; th:action=&quot;@{/subscribe}&quot;&gt;</code></td></tr><tr><td style=\"text-align:left\">th:remove</td><td style=\"text-align:left\">删除某个属性</td><td style=\"text-align:left\"><code>&lt;tr th:remove=&quot;all&quot;&gt; 1.all:删除包含标签和所有的孩子。2.body:不包含标记删除,但删除其所有的孩子。3.tag:包含标记的删除,但不删除它的孩子。4.all-but-first:删除所有包含标签的孩子,除了第一个。5.none:什么也不做。这个值是有用的动态评估。</code></td></tr><tr><td style=\"text-align:left\">th:attr</td><td style=\"text-align:left\">设置标签属性，多个属性可以用逗号分隔</td><td style=\"text-align:left\">比如 <code>th:attr=&quot;src=@{/image/aa.jpg},title=#{logo}&quot;</code>，此标签不太优雅，一般用的比较少。</td></tr></tbody></table><p>还有非常多的标签，这里只列出最常用的几个,由于一个标签内可以包含多个th:x属性，其生效的优先级顺序为:</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include,each,if/unless/switch/case,with,attr/attrprepend/attrappend,value/href,src ,etc,text/utext,fragment,remove</span><br></pre></td></tr></table></figure><p></p><h2 id=\"几种常用的使用方式\"><a href=\"#几种常用的使用方式\" class=\"headerlink\" title=\"几种常用的使用方式\"></a>几种常用的使用方式</h2><h3 id=\"1-赋值、字符串拼接\"><a href=\"#1-赋值、字符串拼接\" class=\"headerlink\" title=\"1. 赋值、字符串拼接\"></a>1. 赋值、字符串拼接</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>  <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;collect.description&#125;\"</span>&gt;</span>description<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"'Welcome to our application, ' + $&#123;user.name&#125; + '!'\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>字符串拼接还有另外一种简洁的写法</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"|Welcome to our application, $&#123;user.name&#125;!|\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h3 id=\"2-条件判断If-Unless\"><a href=\"#2-条件判断If-Unless\" class=\"headerlink\" title=\"2. 条件判断If/Unless\"></a>2. 条件判断If/Unless</h3><p>Thymeleaf中使用<code>th:if</code>和<code>th:unless</code>属性进行条件判断，下面的例子中，<code>&lt;a&gt;</code>标签只有在<code>th:if</code>中条件成立时才显示：</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:if</span>=<span class=\"string\">\"$&#123;myself=='yes'&#125;\"</span> &gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:unless</span>=<span class=\"string\">$&#123;session.user</span> != <span class=\"string\">null&#125;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/login&#125;\"</span> &gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p><code>th:unless</code>与<code>th:if</code>恰好相反，只有表达式中的条件不成立，才会显示其内容。 也可以使用 <code>(if) ? (then) : (else)</code> 这种语法来判断显示的内容</p><h3 id=\"3-for循环\"><a href=\"#3-for循环\" class=\"headerlink\" title=\"3. for循环\"></a>3. for循环</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tr</span>  <span class=\"attr\">th:each</span>=<span class=\"string\">\"collect,iterStat : $&#123;collects&#125;\"</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">scope</span>=<span class=\"string\">\"row\"</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;collect.id&#125;\"</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> &gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">th:src</span>=<span class=\"string\">\"$&#123;collect.webLogo&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;collect.url&#125;\"</span>&gt;</span>Mark<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;collect.title&#125;\"</span>&gt;</span>Otto<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;collect.description&#125;\"</span>&gt;</span>@mdo<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;iterStat.index&#125;\"</span>&gt;</span>index<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br></pre></td></tr></table></figure><p>iterStat称作状态变量，属性有：</p><ul><li>index:当前迭代对象的index（从0开始计算）</li><li>count: 当前迭代对象的index(从1开始计算)</li><li>size:被迭代对象的大小</li><li>current:当前迭代变量</li><li>even/odd:布尔值，当前循环是否是偶数/奇数（从0开始计算）</li><li>first:布尔值，当前循环是否是第一个</li><li>last:布尔值，当前循环是否是最后一个</li></ul><h3 id=\"4-URL\"><a href=\"#4-URL\" class=\"headerlink\" title=\"4. URL\"></a>4. URL</h3><p>URL在Web应用模板中占据着十分重要的地位，需要特别注意的是Thymeleaf对于URL的处理是通过语法<strong>@{…}</strong>来处理的。 如果需要Thymeleaf对URL进行渲染，那么务必使用<code>th:href</code>，<code>th:src</code>等属性，下面是一个例子</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Will produce 'http://localhost:8080/standard/unread' (plus rewriting) --&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">a</span>  <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/standard/&#123;type&#125;(type=$&#123;type&#125;)&#125;\"</span>&gt;</span>view<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Will produce '/gtvg/order/3/details' (plus rewriting) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"details.html\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/order/&#123;orderId&#125;/details(orderId=$&#123;o.id&#125;)&#125;\"</span>&gt;</span>view<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>设置背景</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:style</span>=<span class=\"string\">\"'background:url(' + @&#123;/&lt;path-to-image&gt;&#125; + ');'\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>根据属性值改变背景</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"media-object resource-card-image\"</span>  </span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">th:style</span>=<span class=\"string\">\"'background:url(' + @&#123;($&#123;collect.webLogo&#125;=='' ? 'img/favicon.png' : $&#123;collect.webLogo&#125;)&#125; + ')'\"</span> &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>几点说明：</p><ul><li>上例中URL最后的<code>(orderId=${o.id})</code> 表示将括号内的内容作为URL参数处理，该语法避免使用字符串拼接，大大提高了可读性</li><li><code>@{...}</code>表达式中可以通过<code>{orderId}</code>访问Context中的orderId变量</li><li><code>@{/order}</code>是Context相关的相对路径，在渲染时会自动添加上当前Web应用的Context名字，假设context名字为app，那么结果应该是/app/order</li></ul><h3 id=\"5-内联js\"><a href=\"#5-内联js\" class=\"headerlink\" title=\"5. 内联js\"></a>5. 内联js</h3><p>内联文本：<code>[[...]]</code>内联文本的表示方式，使用时，必须先用<code>th:inline=&quot;text/javascript/none&quot;</code>激活，<code>th:inline</code>可以在父级标签内使用，甚至作为body的标签。内联文本尽管比<code>th:text</code>的代码少，不利于原型显示。</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:inline</span>=<span class=\"string\">\"javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">/*&lt;![CDATA[*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">...</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> username = <span class=\"comment\">/*[[$&#123;sesion.user.name&#125;]]*/</span> <span class=\"string\">'Sebastian'</span>;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> size = <span class=\"comment\">/*[[$&#123;size&#125;]]*/</span> <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">...</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">/*]]&gt;*/</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>js附加代码：</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*[+</span><br><span class=\"line\">var msg = 'This is a working application';</span><br><span class=\"line\">+]*/</span><br></pre></td></tr></table></figure><p></p><p>js移除代码：</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*[- */</span><br><span class=\"line\">var msg = 'This is a non-working template';</span><br><span class=\"line\">/* -]*/</span><br></pre></td></tr></table></figure><p></p><h3 id=\"6-内嵌变量\"><a href=\"#6-内嵌变量\" class=\"headerlink\" title=\"6. 内嵌变量\"></a>6. 内嵌变量</h3><p>为了模板更加易用，Thymeleaf还提供了一系列Utility对象（内置于Context中），可以通过#直接访问：</p><ul><li>dates ： java.util.Date的功能方法类。</li><li>calendars : 类似#dates，面向java.util.Calendar</li><li>numbers : 格式化数字的功能方法类</li><li>strings : 字符串对象的功能类，contains,startWiths,prepending/appending等等。</li><li>objects: 对objects的功能类操作。</li><li>bools: 对布尔值求值的功能方法。</li><li>arrays：对数组的功能类方法。</li><li>lists: 对lists功能类方法</li><li>sets</li><li>maps</li><li>… 下面用一段代码来举例一些常用的方法：</li></ul><p><strong>dates</strong></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * Format date with the specified pattern</span><br><span class=\"line\"> * Also works with arrays, lists or sets</span><br><span class=\"line\"> */</span><br><span class=\"line\">$&#123;#dates.format(date, &apos;dd/MMM/yyyy HH:mm&apos;)&#125;</span><br><span class=\"line\">$&#123;#dates.arrayFormat(datesArray, &apos;dd/MMM/yyyy HH:mm&apos;)&#125;</span><br><span class=\"line\">$&#123;#dates.listFormat(datesList, &apos;dd/MMM/yyyy HH:mm&apos;)&#125;</span><br><span class=\"line\">$&#123;#dates.setFormat(datesSet, &apos;dd/MMM/yyyy HH:mm&apos;)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\"> * Create a date (java.util.Date) object for the current date and time</span><br><span class=\"line\"> */</span><br><span class=\"line\">$&#123;#dates.createNow()&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\"> * Create a date (java.util.Date) object for the current date (time set to 00:00)</span><br><span class=\"line\"> */</span><br><span class=\"line\">$&#123;#dates.createToday()&#125;</span><br></pre></td></tr></table></figure><p></p><p><strong>strings</strong></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * Check whether a String is empty (or null). Performs a trim() operation before check</span><br><span class=\"line\"> * Also works with arrays, lists or sets</span><br><span class=\"line\"> */</span><br><span class=\"line\">$&#123;#strings.isEmpty(name)&#125;</span><br><span class=\"line\">$&#123;#strings.arrayIsEmpty(nameArr)&#125;</span><br><span class=\"line\">$&#123;#strings.listIsEmpty(nameList)&#125;</span><br><span class=\"line\">$&#123;#strings.setIsEmpty(nameSet)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\"> * Check whether a String starts or ends with a fragment</span><br><span class=\"line\"> * Also works with arrays, lists or sets</span><br><span class=\"line\"> */</span><br><span class=\"line\">$&#123;#strings.startsWith(name,&apos;Don&apos;)&#125;                  // also array*, list* and set*</span><br><span class=\"line\">$&#123;#strings.endsWith(name,endingFragment)&#125;           // also array*, list* and set*</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\"> * Compute length</span><br><span class=\"line\"> * Also works with arrays, lists or sets</span><br><span class=\"line\"> */</span><br><span class=\"line\">$&#123;#strings.length(str)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\"> * Null-safe comparison and concatenation</span><br><span class=\"line\"> */</span><br><span class=\"line\">$&#123;#strings.equals(str)&#125;</span><br><span class=\"line\">$&#123;#strings.equalsIgnoreCase(str)&#125;</span><br><span class=\"line\">$&#123;#strings.concat(str)&#125;</span><br><span class=\"line\">$&#123;#strings.concatReplaceNulls(str)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\"> * Random</span><br><span class=\"line\"> */</span><br><span class=\"line\">$&#123;#strings.randomAlphanumeric(count)&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h2><p>使用thymeleaf布局非常的方便</p><p>定义代码片段</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">footer</span> <span class=\"attr\">th:fragment</span>=<span class=\"string\">\"copy\"</span>&gt;</span> </span><br><span class=\"line\">  &amp;copy; 2016</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>在页面任何地方引入：</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:include</span>=<span class=\"string\">\"footer :: copy\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:replace</span>=<span class=\"string\">\"footer :: copy\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p><code>th:include</code> 和 <code>th:replace</code>区别，include只是加载，replace是替换</p><p>返回的HTML如下：</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span> &amp;copy; 2016 <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span> &amp;copy; 2016 <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>下面是一个常用的后台页面布局，将整个页面分为头部，尾部、菜单栏、隐藏栏，点击菜单只改变content区域的页面</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layout-fixed\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:fragment</span>=<span class=\"string\">\"navbar\"</span>  <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>  <span class=\"attr\">role</span>=<span class=\"string\">\"navigation\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:replace</span>=<span class=\"string\">\"fragments/header :: header\"</span>&gt;</span>Header<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:replace</span>=<span class=\"string\">\"fragments/left :: left\"</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:replace</span>=<span class=\"string\">\"fragments/sidebar :: sidebar\"</span>&gt;</span>sidebar<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">layout:fragment</span>=<span class=\"string\">\"content\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"content\"</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:replace</span>=<span class=\"string\">\"fragments/footer :: footer\"</span>&gt;</span>footer<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>任何页面想使用这样的布局值只需要替换中间的 content模块即可</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span> <span class=\"attr\">layout:decorator</span>=<span class=\"string\">\"layout\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">layout:fragment</span>=<span class=\"string\">\"content\"</span>&gt;</span></span><br><span class=\"line\">   ...</span><br></pre></td></tr></table></figure><p></p><p>也可以在引用模版的时候传参</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span> <span class=\"attr\">th:include</span>=<span class=\"string\">\"layout :: htmlhead\"</span> <span class=\"attr\">th:with</span>=<span class=\"string\">\"title='Hello'\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>layout 是文件地址，如果有文件夹可以这样写 <code>fileName/layout:htmlhead</code></p><p>htmlhead 是指定义的代码片段 如 <code>th:fragment=&quot;copy&quot;</code></p><h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul><li><a href=\"https://www.cnblogs.com/ityouknow/p/5833560.html\" target=\"_blank\" rel=\"noopener\">Thymeleaf使用详解</a></li><li><a href=\"https://blog.csdn.net/column/details/16513.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">Thymeleaf学习总结</a></li></ul>","site":{"data":{}},"excerpt":"<p><img src=\"/images/spring-springboot-1.jpg\" alt=\"spring-springboot-thymeleaf\"></p><p>Thymeleaf是新一代的模板引擎，在Spring 4.0中推荐使用Thymeleaf来做前端模板引擎。","more":"之前在<a href=\"https://snaildev.github.io/article/spring-springboot-web.html\">springBoot实战（二）Web</a>中简单介绍了下thymeleaf，本篇将更加全面详细的介绍thymeleaf的使用。</p><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>简单说，Thymeleaf是一个跟Velocity、FreeMarker类似的模板引擎，它可以完全替代JSP。相比较其他模板引擎，它有如下三个极其吸引人的特点：</p><ol><li>Thymeleaf 在有网络和无网络的环境下皆可运行，即它可以让前端在浏览器查看页面的静态效果，也可以让开发人员在服务器查看带数据的动态页面效果。这是由于它支持html原型，然后在html标签里增加额外的属性来达到模板+数据的展示方式。浏览器解释html时会忽略未定义的标签属性，所以thymeleaf的模板可以静态的运行；当有数据返回到页面时，thymeleaf标签会动态地替换掉静态内容，使页面动态显示。</li><li>Thymeleaf 开箱即用的特性。它提供标准和spring标准两种方言，可以直接套用模板实现JSTL、OGNL表达式效果，避免每天套模板，改JSTL、改标签的困扰，同时开发人员也可以扩展和创建自定义的方言。</li><li>Thymeleaf 提供spring标准方言和一个与Spring MVC完美继承的可选模块，可以快速实现表单绑定、属性编辑器和国际化等功能。</li></ol><h2 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h2><p>它们分为四类：</p><ol><li>变量表达式</li><li>选择或星号表达式</li><li>文字国际化表达式</li><li>URL表达式</li></ol><h3 id=\"变量表达式\"><a href=\"#变量表达式\" class=\"headerlink\" title=\"变量表达式\"></a>变量表达式</h3><p>变量表达式即OGNL表达式或Spring EL表达式（在Spring 术语中也叫做model attributes）。如下所示：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;session.user.name&#125;</span><br></pre></td></tr></table></figure><p></p><p>它们将以HTML标签的一个属性来表示：</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">th:each</span>=<span class=\"string\">\"book : $&#123;books&#125;\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;book.author.name&#125;\"</span>&gt;</span>author's name<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h3 id=\"选择（星号）表达式\"><a href=\"#选择（星号）表达式\" class=\"headerlink\" title=\"选择（星号）表达式\"></a>选择（星号）表达式</h3><p>选择表达式很像变量表达式，不过它们用一个预先选择的对象来代替上下文变量容器（map）来执行，如下：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*&#123;customer.name&#125;</span><br></pre></td></tr></table></figure><p></p><p>被指定的object由<code>th:object</code>属性定义：</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:object</span>=<span class=\"string\">\"$&#123;book&#125;\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"*&#123;title&#125;\"</span>&gt;</span>book's title<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h3 id=\"文字国际化表达式\"><a href=\"#文字国际化表达式\" class=\"headerlink\" title=\"文字国际化表达式\"></a>文字国际化表达式</h3><p>文字国际化表达式允许我们从一个外部文件获取区域文字信息（.properties），用Key索引Value，还可以提供一组参数（可选）。</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#&#123;main.title&#125;</span><br><span class=\"line\">#&#123;message.entrycreated($&#123;entryId&#125;)&#125;</span><br></pre></td></tr></table></figure><p></p><p>可以在模板文件中找到这样的表达式代码：</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"#&#123;header.address.city&#125;\"</span>&gt;</span>city<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"#&#123;header.address.country&#125;\"</span>&gt;</span>country<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h3 id=\"URL表达式\"><a href=\"#URL表达式\" class=\"headerlink\" title=\"URL表达式\"></a>URL表达式</h3><p>URL表达式值指的是把一个有用的上下文或会话信息添加到URL，这个过程经常被叫做URL重写。</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@&#123;/order/list&#125;</span><br></pre></td></tr></table></figure><p></p><p>URL还可以设置参数</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@&#123;/order/details(id=$&#123;orderId&#125;)&#125;</span><br></pre></td></tr></table></figure><p></p><p>相对路径</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@&#123;../documents/report&#125;</span><br></pre></td></tr></table></figure><p></p><p>让我们来看这些表达式：</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">th:action</span>=<span class=\"string\">\"@&#123;/createOrder&#125;\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.html\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/main&#125;\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h3 id=\"变量表达式VS选择表达式\"><a href=\"#变量表达式VS选择表达式\" class=\"headerlink\" title=\"变量表达式VS选择表达式\"></a>变量表达式VS选择表达式</h3><p>如果不考虑上下文的情况下，两者没有区别；星号语法在选定对象上表达，而不是整个上下文。 什么是选定对象？就是父标签的值，如下：</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:object</span>=<span class=\"string\">\"$&#123;session.user&#125;\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>FirstName: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"*&#123;firstName&#125;\"</span>&gt;</span>Sebastian<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>LastName: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"*&#123;lastName&#125;\"</span>&gt;</span>Pepper<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Nationnality: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"*&#123;nationnality&#125;\"</span>&gt;</span>Saturn<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>这完全等价于：</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>FirstName: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;session.user.firstName&#125;\"</span>&gt;</span>Sebastian<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>LastName: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;session.user.lastName&#125;\"</span>&gt;</span>Pepper<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Nationnality: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;session.user.nationnality&#125;\"</span>&gt;</span>Saturn<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>当然，美元符号和星号语法可以混合使用</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:object</span>=<span class=\"string\">\"$&#123;session.user&#125;\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>FirstName: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"*&#123;firstName&#125;\"</span>&gt;</span>Sebastian<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>LastName: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;session.user.lastName&#125;\"</span>&gt;</span>Pepper<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Nationnality: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"*&#123;nationnality&#125;\"</span>&gt;</span>Saturn<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h2 id=\"表达式支持的语法\"><a href=\"#表达式支持的语法\" class=\"headerlink\" title=\"表达式支持的语法\"></a>表达式支持的语法</h2><h3 id=\"字面（Literals）\"><a href=\"#字面（Literals）\" class=\"headerlink\" title=\"字面（Literals）\"></a>字面（Literals）</h3><ul><li>文本文字（Text literals）: <code>&#39;one text&#39;, &#39;Another one!&#39;,…</code></li><li>数字文本（Number literals）: <code>0, 34, 3.0, 12.3,…</code></li><li>布尔文本（Boolean literals）: <code>true, false</code></li><li>空（Null literal）: <code>null</code></li><li>文字标记（Literal tokens）: <code>one, sometext, main,…</code></li></ul><h3 id=\"文本操作（Text-operations）\"><a href=\"#文本操作（Text-operations）\" class=\"headerlink\" title=\"文本操作（Text operations）\"></a>文本操作（Text operations）</h3><ul><li>字符串连接(String concatenation): <code>+</code></li><li>文本替换（Literal substitutions）: <code>|The name is ${name}|</code></li></ul><h3 id=\"算术运算（Arithmetic-operations）\"><a href=\"#算术运算（Arithmetic-operations）\" class=\"headerlink\" title=\"算术运算（Arithmetic operations）\"></a>算术运算（Arithmetic operations）</h3><ul><li>二元运算符（Binary operators）: <code>+, -, *, /, %</code></li><li>减号（单目运算符）Minus sign (unary operator): <code>-</code></li></ul><h3 id=\"布尔操作（Boolean-operations）\"><a href=\"#布尔操作（Boolean-operations）\" class=\"headerlink\" title=\"布尔操作（Boolean operations）\"></a>布尔操作（Boolean operations）</h3><ul><li>二元运算符（Binary operators）:<code>and, or</code></li><li>布尔否定（一元运算符）Boolean negation (unary operator):<code>!, not</code></li></ul><h3 id=\"比较和等价-Comparisons-and-equality\"><a href=\"#比较和等价-Comparisons-and-equality\" class=\"headerlink\" title=\"比较和等价(Comparisons and equality)\"></a>比较和等价(Comparisons and equality)</h3><ul><li>比较（Comparators）: <code>&gt;, &lt;, &gt;=, &lt;= (gt, lt, ge, le)</code></li><li>等值运算符（Equality operators）:<code>==, != (eq, ne)</code></li></ul><h3 id=\"条件运算符（Conditional-operators）\"><a href=\"#条件运算符（Conditional-operators）\" class=\"headerlink\" title=\"条件运算符（Conditional operators）\"></a>条件运算符（Conditional operators）</h3><ul><li>If-then: <code>(if) ? (then)</code></li><li>If-then-else: <code>(if) ? (then) : (else)</code></li><li>Default: <code>(value) ?: (defaultvalue)</code></li></ul><p>所有这些特征可以被组合并嵌套：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;User is of type &apos; + ($&#123;user.isAdmin()&#125; ? &apos;Administrator&apos; : ($&#123;user.type&#125; ?: &apos;Unknown&apos;))</span><br></pre></td></tr></table></figure><p></p><h2 id=\"常用的th标签\"><a href=\"#常用的th标签\" class=\"headerlink\" title=\"常用的th标签\"></a>常用的th标签</h2><table><thead><tr><th style=\"text-align:left\">关键字</th><th style=\"text-align:left\">功能介绍</th><th style=\"text-align:left\">案例</th></tr></thead><tbody><tr><td style=\"text-align:left\">th:id</td><td style=\"text-align:left\">替换id</td><td style=\"text-align:left\"><code>&lt;input th:id=&quot;&#39;xxx&#39; + ${collect.id}&quot;/&gt;</code></td></tr><tr><td style=\"text-align:left\">th:text</td><td style=\"text-align:left\">文本替换</td><td style=\"text-align:left\"><code>&lt;p th:text=&quot;${collect.description}&quot;&gt;description&lt;/p&gt;</code></td></tr><tr><td style=\"text-align:left\">th:utext</td><td style=\"text-align:left\">支持html的文本替换</td><td style=\"text-align:left\"><code>&lt;p th:utext=&quot;${htmlcontent}&quot;&gt;conten&lt;/p&gt;</code></td></tr><tr><td style=\"text-align:left\">th:object</td><td style=\"text-align:left\">替换对象</td><td style=\"text-align:left\"><code>&lt;div th:object=&quot;${session.user}&quot;&gt;</code></td></tr><tr><td style=\"text-align:left\">th:value</td><td style=\"text-align:left\">属性赋值</td><td style=\"text-align:left\"><code>&lt;input th:value=&quot;${user.name}&quot; /&gt;</code></td></tr><tr><td style=\"text-align:left\">th:with</td><td style=\"text-align:left\">变量赋值运算</td><td style=\"text-align:left\"><code>&lt;div th:with=&quot;isEven=${prodStat.count}%2==0&quot;&gt;&lt;/div&gt;</code></td></tr><tr><td style=\"text-align:left\">th:style</td><td style=\"text-align:left\">设置样式</td><td style=\"text-align:left\"><code>th:style=&quot;&#39;display:&#39; + @{(${sitrue} ? &#39;none&#39; : &#39;inline-block&#39;)} + &#39;&#39;&quot;</code></td></tr><tr><td style=\"text-align:left\">th:onclick</td><td style=\"text-align:left\">点击事件</td><td style=\"text-align:left\"><code>th:onclick=&quot;&#39;getCollect()&#39;&quot;</code></td></tr><tr><td style=\"text-align:left\">th:each</td><td style=\"text-align:left\">属性赋值</td><td style=\"text-align:left\"><code>&lt;tr th:each=&quot;user,userStat:${users}&quot;&gt;</code></td></tr><tr><td style=\"text-align:left\">th:if</td><td style=\"text-align:left\">判断条件</td><td style=\"text-align:left\"><code>&lt;a th:if=&quot;${userId == collect.userId}&quot; &gt;</code></td></tr><tr><td style=\"text-align:left\">th:unless</td><td style=\"text-align:left\">和th:if判断相反</td><td style=\"text-align:left\"><code>&lt;a th:href=&quot;@{/login}&quot; th:unless=${session.user != null}&gt;Login&lt;/a&gt;</code></td></tr><tr><td style=\"text-align:left\">th:href</td><td style=\"text-align:left\">链接地址</td><td style=\"text-align:left\"><code>&lt;a th:href=&quot;@{/login}&quot; th:unless=${session.user != null}&gt;Login&lt;/a&gt; /&gt;</code></td></tr><tr><td style=\"text-align:left\">th:switch</td><td style=\"text-align:left\">多路选择 配合th:case 使用</td><td style=\"text-align:left\"><code>&lt;div th:switch=&quot;${user.role}&quot;&gt;</code></td></tr><tr><td style=\"text-align:left\">th:case</td><td style=\"text-align:left\">th:switch的一个分支</td><td style=\"text-align:left\"><code>&lt;p th:case=&quot;&#39;admin&#39;&quot;&gt;User is an administrator&lt;/p&gt;</code></td></tr><tr><td style=\"text-align:left\">th:fragment</td><td style=\"text-align:left\">布局标签，定义一个代码片段，方便其它地方引用</td><td style=\"text-align:left\"><code>&lt;div th:fragment=&quot;alert&quot;&gt;</code></td></tr><tr><td style=\"text-align:left\">th:include</td><td style=\"text-align:left\">布局标签，替换内容到引入的文件</td><td style=\"text-align:left\"><code>&lt;head th:include=&quot;layout :: htmlhead&quot; th:with=&quot;title=&#39;xx&#39;&quot;&gt;&lt;/head&gt; /&gt;</code></td></tr><tr><td style=\"text-align:left\">th:replace</td><td style=\"text-align:left\">布局标签，替换整个标签到引入的文件</td><td style=\"text-align:left\"><code>&lt;div th:replace=&quot;fragments/header :: title&quot;&gt;&lt;/div&gt;</code></td></tr><tr><td style=\"text-align:left\">th:selected</td><td style=\"text-align:left\">selected选择框 选中</td><td style=\"text-align:left\"><code>th:selected=&quot;(${xxx.id} == ${configObj.dd})&quot;</code></td></tr><tr><td style=\"text-align:left\">th:src</td><td style=\"text-align:left\">图片类地址引入</td><td style=\"text-align:left\"><code>&lt;img class=&quot;img-responsive&quot; alt=&quot;App Logo&quot; th:src=&quot;@{/img/logo.png}&quot; /&gt;</code></td></tr><tr><td style=\"text-align:left\">th:inline</td><td style=\"text-align:left\">定义js脚本可以使用变量</td><td style=\"text-align:left\"><code>&lt;script type=&quot;text/javascript&quot; th:inline=&quot;javascript&quot;&gt;</code></td></tr><tr><td style=\"text-align:left\">th:action</td><td style=\"text-align:left\">表单提交的地址</td><td style=\"text-align:left\"><code>&lt;form action=&quot;subscribe.html&quot; th:action=&quot;@{/subscribe}&quot;&gt;</code></td></tr><tr><td style=\"text-align:left\">th:remove</td><td style=\"text-align:left\">删除某个属性</td><td style=\"text-align:left\"><code>&lt;tr th:remove=&quot;all&quot;&gt; 1.all:删除包含标签和所有的孩子。2.body:不包含标记删除,但删除其所有的孩子。3.tag:包含标记的删除,但不删除它的孩子。4.all-but-first:删除所有包含标签的孩子,除了第一个。5.none:什么也不做。这个值是有用的动态评估。</code></td></tr><tr><td style=\"text-align:left\">th:attr</td><td style=\"text-align:left\">设置标签属性，多个属性可以用逗号分隔</td><td style=\"text-align:left\">比如 <code>th:attr=&quot;src=@{/image/aa.jpg},title=#{logo}&quot;</code>，此标签不太优雅，一般用的比较少。</td></tr></tbody></table><p>还有非常多的标签，这里只列出最常用的几个,由于一个标签内可以包含多个th:x属性，其生效的优先级顺序为:</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include,each,if/unless/switch/case,with,attr/attrprepend/attrappend,value/href,src ,etc,text/utext,fragment,remove</span><br></pre></td></tr></table></figure><p></p><h2 id=\"几种常用的使用方式\"><a href=\"#几种常用的使用方式\" class=\"headerlink\" title=\"几种常用的使用方式\"></a>几种常用的使用方式</h2><h3 id=\"1-赋值、字符串拼接\"><a href=\"#1-赋值、字符串拼接\" class=\"headerlink\" title=\"1. 赋值、字符串拼接\"></a>1. 赋值、字符串拼接</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>  <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;collect.description&#125;\"</span>&gt;</span>description<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"'Welcome to our application, ' + $&#123;user.name&#125; + '!'\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>字符串拼接还有另外一种简洁的写法</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"|Welcome to our application, $&#123;user.name&#125;!|\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h3 id=\"2-条件判断If-Unless\"><a href=\"#2-条件判断If-Unless\" class=\"headerlink\" title=\"2. 条件判断If/Unless\"></a>2. 条件判断If/Unless</h3><p>Thymeleaf中使用<code>th:if</code>和<code>th:unless</code>属性进行条件判断，下面的例子中，<code>&lt;a&gt;</code>标签只有在<code>th:if</code>中条件成立时才显示：</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:if</span>=<span class=\"string\">\"$&#123;myself=='yes'&#125;\"</span> &gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:unless</span>=<span class=\"string\">$&#123;session.user</span> != <span class=\"string\">null&#125;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/login&#125;\"</span> &gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p><code>th:unless</code>与<code>th:if</code>恰好相反，只有表达式中的条件不成立，才会显示其内容。 也可以使用 <code>(if) ? (then) : (else)</code> 这种语法来判断显示的内容</p><h3 id=\"3-for循环\"><a href=\"#3-for循环\" class=\"headerlink\" title=\"3. for循环\"></a>3. for循环</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tr</span>  <span class=\"attr\">th:each</span>=<span class=\"string\">\"collect,iterStat : $&#123;collects&#125;\"</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">scope</span>=<span class=\"string\">\"row\"</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;collect.id&#125;\"</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> &gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">th:src</span>=<span class=\"string\">\"$&#123;collect.webLogo&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;collect.url&#125;\"</span>&gt;</span>Mark<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;collect.title&#125;\"</span>&gt;</span>Otto<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;collect.description&#125;\"</span>&gt;</span>@mdo<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;iterStat.index&#125;\"</span>&gt;</span>index<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br></pre></td></tr></table></figure><p>iterStat称作状态变量，属性有：</p><ul><li>index:当前迭代对象的index（从0开始计算）</li><li>count: 当前迭代对象的index(从1开始计算)</li><li>size:被迭代对象的大小</li><li>current:当前迭代变量</li><li>even/odd:布尔值，当前循环是否是偶数/奇数（从0开始计算）</li><li>first:布尔值，当前循环是否是第一个</li><li>last:布尔值，当前循环是否是最后一个</li></ul><h3 id=\"4-URL\"><a href=\"#4-URL\" class=\"headerlink\" title=\"4. URL\"></a>4. URL</h3><p>URL在Web应用模板中占据着十分重要的地位，需要特别注意的是Thymeleaf对于URL的处理是通过语法<strong>@{…}</strong>来处理的。 如果需要Thymeleaf对URL进行渲染，那么务必使用<code>th:href</code>，<code>th:src</code>等属性，下面是一个例子</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Will produce 'http://localhost:8080/standard/unread' (plus rewriting) --&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">a</span>  <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/standard/&#123;type&#125;(type=$&#123;type&#125;)&#125;\"</span>&gt;</span>view<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Will produce '/gtvg/order/3/details' (plus rewriting) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"details.html\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/order/&#123;orderId&#125;/details(orderId=$&#123;o.id&#125;)&#125;\"</span>&gt;</span>view<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>设置背景</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:style</span>=<span class=\"string\">\"'background:url(' + @&#123;/&lt;path-to-image&gt;&#125; + ');'\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>根据属性值改变背景</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"media-object resource-card-image\"</span>  </span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">th:style</span>=<span class=\"string\">\"'background:url(' + @&#123;($&#123;collect.webLogo&#125;=='' ? 'img/favicon.png' : $&#123;collect.webLogo&#125;)&#125; + ')'\"</span> &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>几点说明：</p><ul><li>上例中URL最后的<code>(orderId=${o.id})</code> 表示将括号内的内容作为URL参数处理，该语法避免使用字符串拼接，大大提高了可读性</li><li><code>@{...}</code>表达式中可以通过<code>{orderId}</code>访问Context中的orderId变量</li><li><code>@{/order}</code>是Context相关的相对路径，在渲染时会自动添加上当前Web应用的Context名字，假设context名字为app，那么结果应该是/app/order</li></ul><h3 id=\"5-内联js\"><a href=\"#5-内联js\" class=\"headerlink\" title=\"5. 内联js\"></a>5. 内联js</h3><p>内联文本：<code>[[...]]</code>内联文本的表示方式，使用时，必须先用<code>th:inline=&quot;text/javascript/none&quot;</code>激活，<code>th:inline</code>可以在父级标签内使用，甚至作为body的标签。内联文本尽管比<code>th:text</code>的代码少，不利于原型显示。</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:inline</span>=<span class=\"string\">\"javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">/*&lt;![CDATA[*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">...</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> username = <span class=\"comment\">/*[[$&#123;sesion.user.name&#125;]]*/</span> <span class=\"string\">'Sebastian'</span>;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> size = <span class=\"comment\">/*[[$&#123;size&#125;]]*/</span> <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">...</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">/*]]&gt;*/</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>js附加代码：</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*[+</span><br><span class=\"line\">var msg = 'This is a working application';</span><br><span class=\"line\">+]*/</span><br></pre></td></tr></table></figure><p></p><p>js移除代码：</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*[- */</span><br><span class=\"line\">var msg = 'This is a non-working template';</span><br><span class=\"line\">/* -]*/</span><br></pre></td></tr></table></figure><p></p><h3 id=\"6-内嵌变量\"><a href=\"#6-内嵌变量\" class=\"headerlink\" title=\"6. 内嵌变量\"></a>6. 内嵌变量</h3><p>为了模板更加易用，Thymeleaf还提供了一系列Utility对象（内置于Context中），可以通过#直接访问：</p><ul><li>dates ： java.util.Date的功能方法类。</li><li>calendars : 类似#dates，面向java.util.Calendar</li><li>numbers : 格式化数字的功能方法类</li><li>strings : 字符串对象的功能类，contains,startWiths,prepending/appending等等。</li><li>objects: 对objects的功能类操作。</li><li>bools: 对布尔值求值的功能方法。</li><li>arrays：对数组的功能类方法。</li><li>lists: 对lists功能类方法</li><li>sets</li><li>maps</li><li>… 下面用一段代码来举例一些常用的方法：</li></ul><p><strong>dates</strong></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * Format date with the specified pattern</span><br><span class=\"line\"> * Also works with arrays, lists or sets</span><br><span class=\"line\"> */</span><br><span class=\"line\">$&#123;#dates.format(date, &apos;dd/MMM/yyyy HH:mm&apos;)&#125;</span><br><span class=\"line\">$&#123;#dates.arrayFormat(datesArray, &apos;dd/MMM/yyyy HH:mm&apos;)&#125;</span><br><span class=\"line\">$&#123;#dates.listFormat(datesList, &apos;dd/MMM/yyyy HH:mm&apos;)&#125;</span><br><span class=\"line\">$&#123;#dates.setFormat(datesSet, &apos;dd/MMM/yyyy HH:mm&apos;)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\"> * Create a date (java.util.Date) object for the current date and time</span><br><span class=\"line\"> */</span><br><span class=\"line\">$&#123;#dates.createNow()&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\"> * Create a date (java.util.Date) object for the current date (time set to 00:00)</span><br><span class=\"line\"> */</span><br><span class=\"line\">$&#123;#dates.createToday()&#125;</span><br></pre></td></tr></table></figure><p></p><p><strong>strings</strong></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * Check whether a String is empty (or null). Performs a trim() operation before check</span><br><span class=\"line\"> * Also works with arrays, lists or sets</span><br><span class=\"line\"> */</span><br><span class=\"line\">$&#123;#strings.isEmpty(name)&#125;</span><br><span class=\"line\">$&#123;#strings.arrayIsEmpty(nameArr)&#125;</span><br><span class=\"line\">$&#123;#strings.listIsEmpty(nameList)&#125;</span><br><span class=\"line\">$&#123;#strings.setIsEmpty(nameSet)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\"> * Check whether a String starts or ends with a fragment</span><br><span class=\"line\"> * Also works with arrays, lists or sets</span><br><span class=\"line\"> */</span><br><span class=\"line\">$&#123;#strings.startsWith(name,&apos;Don&apos;)&#125;                  // also array*, list* and set*</span><br><span class=\"line\">$&#123;#strings.endsWith(name,endingFragment)&#125;           // also array*, list* and set*</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\"> * Compute length</span><br><span class=\"line\"> * Also works with arrays, lists or sets</span><br><span class=\"line\"> */</span><br><span class=\"line\">$&#123;#strings.length(str)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\"> * Null-safe comparison and concatenation</span><br><span class=\"line\"> */</span><br><span class=\"line\">$&#123;#strings.equals(str)&#125;</span><br><span class=\"line\">$&#123;#strings.equalsIgnoreCase(str)&#125;</span><br><span class=\"line\">$&#123;#strings.concat(str)&#125;</span><br><span class=\"line\">$&#123;#strings.concatReplaceNulls(str)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\"> * Random</span><br><span class=\"line\"> */</span><br><span class=\"line\">$&#123;#strings.randomAlphanumeric(count)&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h2><p>使用thymeleaf布局非常的方便</p><p>定义代码片段</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">footer</span> <span class=\"attr\">th:fragment</span>=<span class=\"string\">\"copy\"</span>&gt;</span> </span><br><span class=\"line\">  &amp;copy; 2016</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>在页面任何地方引入：</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:include</span>=<span class=\"string\">\"footer :: copy\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:replace</span>=<span class=\"string\">\"footer :: copy\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p><code>th:include</code> 和 <code>th:replace</code>区别，include只是加载，replace是替换</p><p>返回的HTML如下：</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span> &amp;copy; 2016 <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span> &amp;copy; 2016 <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>下面是一个常用的后台页面布局，将整个页面分为头部，尾部、菜单栏、隐藏栏，点击菜单只改变content区域的页面</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layout-fixed\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:fragment</span>=<span class=\"string\">\"navbar\"</span>  <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>  <span class=\"attr\">role</span>=<span class=\"string\">\"navigation\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:replace</span>=<span class=\"string\">\"fragments/header :: header\"</span>&gt;</span>Header<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:replace</span>=<span class=\"string\">\"fragments/left :: left\"</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:replace</span>=<span class=\"string\">\"fragments/sidebar :: sidebar\"</span>&gt;</span>sidebar<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">layout:fragment</span>=<span class=\"string\">\"content\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"content\"</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:replace</span>=<span class=\"string\">\"fragments/footer :: footer\"</span>&gt;</span>footer<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>任何页面想使用这样的布局值只需要替换中间的 content模块即可</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span> <span class=\"attr\">layout:decorator</span>=<span class=\"string\">\"layout\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">layout:fragment</span>=<span class=\"string\">\"content\"</span>&gt;</span></span><br><span class=\"line\">   ...</span><br></pre></td></tr></table></figure><p></p><p>也可以在引用模版的时候传参</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span> <span class=\"attr\">th:include</span>=<span class=\"string\">\"layout :: htmlhead\"</span> <span class=\"attr\">th:with</span>=<span class=\"string\">\"title='Hello'\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>layout 是文件地址，如果有文件夹可以这样写 <code>fileName/layout:htmlhead</code></p><p>htmlhead 是指定义的代码片段 如 <code>th:fragment=&quot;copy&quot;</code></p><h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul><li><a href=\"https://www.cnblogs.com/ityouknow/p/5833560.html\" target=\"_blank\" rel=\"noopener\">Thymeleaf使用详解</a></li><li><a href=\"https://blog.csdn.net/column/details/16513.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">Thymeleaf学习总结</a></li></ul>"},{"title":"SpringBoot实战（一）入门","author":"SnailDev","date":"2018-09-01T13:42:56.000Z","featured_image":"/images/spring-springboot-1.jpg","_content":"![spring-springboot-helloworld](/images/spring-springboot-1.jpg)\n\nSpring Boot 是由 Pivotal 团队提供的全新框架，其设计目的是用来简化新 Spring 应用的初始搭建以及开发过程，该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。Spring Boot 默认配置了很多框架的使用方式，就像 Maven 整合了所有的 Jar 包，Spring Boot 整合了所有的框架。它的核心设计思想是：**约定优于配置**，Spring Boot 所有开发细节都是依据此思想进行实现的。\n<!--more-->\n\nSpring Boot 是一套全新的框架，它来自于 Spring 大家族，因此 Spring 所有具备的功能它都有并且更容易使用；同时还简化了基于 Spring 的应用开发，通过少量的代码就能创建一个独立的、产品级别的 Spring 应用。\n\n下图展示出了 Spring Boot 在 Spring 生态中的位置：\n![spring-springboot-helloworld](/images/spring-springboot-helloworld-2.png)\n\n该项目主要的目的是：\n- 上手 Spring 开发更快、更广泛；\n- 使用默认方式实现快速开发；\n- 提供大多数项目所需的非功能特性，诸如：嵌入式服务器、安全、心跳检查、外部配置等。\n\n**Spring Boot 特性**\n- 使用 Spring 项目引导页面可以在几秒构建一个项目；\n- 方便对外输出各种形式的服务，如 REST API、WebSocket、Web、Streaming、Tasks；\n- 非常简洁的安全策略集成；\n- 支持关系数据库和非关系数据库；\n- 支持运行期内嵌容器，如 Tomcat、Jetty；\n- 强大的开发包，支持热启动；\n- 自动管理依赖；\n- 自带应用监控；\n- 支持各种 IDE，如 IntelliJ IDEA、NetBeans。\n\n## 为什么学习 Spring Boot ？\nSpring Boot 本身并不提供 Spring 框架的核心特性以及扩展功能，只是用于快速、敏捷地开发新一代基于 Spring 框架的应用程序。同时它集成了大量常用的第三方库配置（如 Redis、MongoDB、JPA、RabbitMQ、Quartz 等），Spring Boot 应用中这些第三方库几乎可以零配置进行开箱即用，大部分的 Spring Boot 应用都只需要非常少量的配置代码，开发者能够更加专注于业务逻辑。\n\n使用 Spring Boot 开发项目，有以下几方面优势：\n1. Spring Boot 使开发变得简单，提供了丰富的解决方案，快速集成各种解决方案提升开发效率。\n2. Spring Boot 使配置变得简单，提供了丰富的 Starters，集成主流开源产品往往只需要简单的配置即可。\n3. Spring Boot 使部署变得简单，其本身内嵌启动容器，仅仅需要一个命令即可启动项目，结合 Jenkins、Docker 自动化运维非常容易实现。\n4. Spring Boot 使监控变得简单，自带监控组件，使用 Actuator 轻松监控服务各项状态。\n\n从软件发展的角度来讲，越简单的开发模式越流行，简单的开发模式解放出更多生产力，让开发人员可以避免将精力耗费在各种配置、语法所设置的门槛上，从而更专注于业务。这点上，Spring Boot 已尽可能地简化了应用开发的门槛。\n\nSpring Boot 所集成的技术栈，涵盖了各大互联网公司的主流技术，跟着 Spring Boot 的路线去学习，基本可以了解国内外互联网公司的技术特点。\n\n## 快速入门\n说了那么多，手痒痒的很，马上来一发试试。\n\n### maven 构建项目\n1. 访问http://start.spring.io/\n2. 选择构建工具Maven Project、Spring Boot版本1.5.16以及一些工程基本信息，点击“Switch to the full version.”java版本选择1.8，可参考下图所示：\n![spring-springboot-helloworld](/images/spring-springboot-helloworld-3.png)\n3. 点击Generate Project下载项目压缩包\n4. 解压后，使用Idea，Open -> 选择解压后的文件夹中的pom.xml文件 -> Open as Project\n\n### 项目结构介绍\n![spring-springboot-helloworld](/images/spring-springboot-helloworld-4.png)\n如上图所示，Spring Boot的基础结构共三个文件：\n- src/main/java 程序开发以及主程序入口\n- src/main/resources 配置文件\n- src/test/java 测试程序\n\n另外，Spring Boot建议的目录结构如下：\n\nroot package结构：com.example.myproject\n\n```\ncom\n  +- example\n    +- myproject\n      +- Application.java\n      |\n      +- domain\n      |  +- Customer.java\n      |  +- CustomerRepository.java\n      |\n      +- service\n      |  +- CustomerService.java\n      |\n      +- controller\n      |  +- CustomerController.java\n      |\n```\n1. Application.java 建议放到根目录瞎买，主要用于做一些框架配置\n2. domain 目录主要用于实体（Entity）和数据访问层（Repository）\n3. service 层主要是业务逻辑代码\n4. controller 负责页面访问控制\n\n采用默认配置可以省去很多配置，当然也可以根据自己的喜欢来进行更改\n\n最后，启动Application main方法，至此一个java项目搭建好了。\n\n### 引入web模块\n1. 在pom.xml文件中添加支持web的模块：\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n```\n\npom.xml 文件中默认有两个模块：\n- spring-boot-starter: 核心模块，包括自动配置支持、日志和YAML;\n- spring-boot-starter-test: 测试模块，包括JUnit、Hamcrest、Mockito;\n\n2. 编写controller内容\n```java\n@RestController\npublic class HelloWorldController {\n    @GetMapping(\"/hello\")\n    public String index(){\n        return \"Hello World.\";\n    }\n}\n```\n@RestController的作用就是controller里面的方法都以json格式输出，不用再写jackson配置，其本质实际上就是@Controller + @ResponseBody。\n\n3. 启动主程序，打开浏览器访问http://localhost:8080/hello，就可以看到效果了，有木有很简单！\n\n### 单元测试\n打开scr/test/java 下的测试入口，编写简单的http请求来测试：使用mockmvc实现，并利用MockMcvResultHandlers.print()打印出执行结果。\n```java\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class HelloWorldControllerTests {\n    private MockMvc mvc;\n\n    @Before\n    public void setUp() throws Exception{\n        mvc = MockMvcBuilders.standaloneSetup(new HelloWorldController()).build();\n    }\n\n    @Test\n    public void getHello() throws Exception{\n        mvc.perform(MockMvcRequestBuilders.get(\"/hello\").accept(MediaType.APPLICATION_JSON))\n                .andExpect(MockMvcResultMatchers.status().isOk())\n                .andDo(MockMvcResultHandlers.print())\n                .andReturn();\n    }\n}\n```\n\n### 热启动\n热启动在正常开发项目中已经很常见了，虽然平时开发web项目过程中，改动项目后重启总是报错，但是Spring Boot对调试支持很好，修改之后可以实时生效，需要添加以下配置：\n```xml\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-devtools</artifactId>\n        <optional>true</optional>\n   </dependency>\n</dependencies>\n\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n            <configuration>\n                <fork>true</fork>\n            </configuration>\n        </plugin>\n   </plugins>\n</build>\n```\n使用idea还需要更改一些配置，setting修改，如下图：\n![spring-springboot-helloworld](/images/spring-springboot-helloworld-5.png)\n然后按组合键 Shift+Ctrl+Alt+/ 选择Registry... 找到 compiler.automake.allow.when.app.running 勾选即可。\n\n热启动模块在完整的打包环境下运行的时候会被禁用。如果你使用java -jar启动应用或者用一个特定的classloader启动，它会认为这是一个“生产环境”。\n\n## 总结\n使用spring boot可以非常方便、快速搭建项目，使我们不用关心框架之间的兼容性，适用版本等各种问题，我们想使用任何东西，仅仅添加一个配置就可以，所以使用sping boot非常适合构建微服务。\n\n","source":"_posts/spring-springboot-helloword.md","raw":"---\ntitle: SpringBoot实战（一）入门\nauthor: SnailDev\ntags:\n  - SpringBoot\n  - HelloWorld\ncategories:\n  - SpringBoot\ndate: 2018-09-01 21:42:56\nfeatured_image: /images/spring-springboot-1.jpg\n---\n![spring-springboot-helloworld](/images/spring-springboot-1.jpg)\n\nSpring Boot 是由 Pivotal 团队提供的全新框架，其设计目的是用来简化新 Spring 应用的初始搭建以及开发过程，该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。Spring Boot 默认配置了很多框架的使用方式，就像 Maven 整合了所有的 Jar 包，Spring Boot 整合了所有的框架。它的核心设计思想是：**约定优于配置**，Spring Boot 所有开发细节都是依据此思想进行实现的。\n<!--more-->\n\nSpring Boot 是一套全新的框架，它来自于 Spring 大家族，因此 Spring 所有具备的功能它都有并且更容易使用；同时还简化了基于 Spring 的应用开发，通过少量的代码就能创建一个独立的、产品级别的 Spring 应用。\n\n下图展示出了 Spring Boot 在 Spring 生态中的位置：\n![spring-springboot-helloworld](/images/spring-springboot-helloworld-2.png)\n\n该项目主要的目的是：\n- 上手 Spring 开发更快、更广泛；\n- 使用默认方式实现快速开发；\n- 提供大多数项目所需的非功能特性，诸如：嵌入式服务器、安全、心跳检查、外部配置等。\n\n**Spring Boot 特性**\n- 使用 Spring 项目引导页面可以在几秒构建一个项目；\n- 方便对外输出各种形式的服务，如 REST API、WebSocket、Web、Streaming、Tasks；\n- 非常简洁的安全策略集成；\n- 支持关系数据库和非关系数据库；\n- 支持运行期内嵌容器，如 Tomcat、Jetty；\n- 强大的开发包，支持热启动；\n- 自动管理依赖；\n- 自带应用监控；\n- 支持各种 IDE，如 IntelliJ IDEA、NetBeans。\n\n## 为什么学习 Spring Boot ？\nSpring Boot 本身并不提供 Spring 框架的核心特性以及扩展功能，只是用于快速、敏捷地开发新一代基于 Spring 框架的应用程序。同时它集成了大量常用的第三方库配置（如 Redis、MongoDB、JPA、RabbitMQ、Quartz 等），Spring Boot 应用中这些第三方库几乎可以零配置进行开箱即用，大部分的 Spring Boot 应用都只需要非常少量的配置代码，开发者能够更加专注于业务逻辑。\n\n使用 Spring Boot 开发项目，有以下几方面优势：\n1. Spring Boot 使开发变得简单，提供了丰富的解决方案，快速集成各种解决方案提升开发效率。\n2. Spring Boot 使配置变得简单，提供了丰富的 Starters，集成主流开源产品往往只需要简单的配置即可。\n3. Spring Boot 使部署变得简单，其本身内嵌启动容器，仅仅需要一个命令即可启动项目，结合 Jenkins、Docker 自动化运维非常容易实现。\n4. Spring Boot 使监控变得简单，自带监控组件，使用 Actuator 轻松监控服务各项状态。\n\n从软件发展的角度来讲，越简单的开发模式越流行，简单的开发模式解放出更多生产力，让开发人员可以避免将精力耗费在各种配置、语法所设置的门槛上，从而更专注于业务。这点上，Spring Boot 已尽可能地简化了应用开发的门槛。\n\nSpring Boot 所集成的技术栈，涵盖了各大互联网公司的主流技术，跟着 Spring Boot 的路线去学习，基本可以了解国内外互联网公司的技术特点。\n\n## 快速入门\n说了那么多，手痒痒的很，马上来一发试试。\n\n### maven 构建项目\n1. 访问http://start.spring.io/\n2. 选择构建工具Maven Project、Spring Boot版本1.5.16以及一些工程基本信息，点击“Switch to the full version.”java版本选择1.8，可参考下图所示：\n![spring-springboot-helloworld](/images/spring-springboot-helloworld-3.png)\n3. 点击Generate Project下载项目压缩包\n4. 解压后，使用Idea，Open -> 选择解压后的文件夹中的pom.xml文件 -> Open as Project\n\n### 项目结构介绍\n![spring-springboot-helloworld](/images/spring-springboot-helloworld-4.png)\n如上图所示，Spring Boot的基础结构共三个文件：\n- src/main/java 程序开发以及主程序入口\n- src/main/resources 配置文件\n- src/test/java 测试程序\n\n另外，Spring Boot建议的目录结构如下：\n\nroot package结构：com.example.myproject\n\n```\ncom\n  +- example\n    +- myproject\n      +- Application.java\n      |\n      +- domain\n      |  +- Customer.java\n      |  +- CustomerRepository.java\n      |\n      +- service\n      |  +- CustomerService.java\n      |\n      +- controller\n      |  +- CustomerController.java\n      |\n```\n1. Application.java 建议放到根目录瞎买，主要用于做一些框架配置\n2. domain 目录主要用于实体（Entity）和数据访问层（Repository）\n3. service 层主要是业务逻辑代码\n4. controller 负责页面访问控制\n\n采用默认配置可以省去很多配置，当然也可以根据自己的喜欢来进行更改\n\n最后，启动Application main方法，至此一个java项目搭建好了。\n\n### 引入web模块\n1. 在pom.xml文件中添加支持web的模块：\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n```\n\npom.xml 文件中默认有两个模块：\n- spring-boot-starter: 核心模块，包括自动配置支持、日志和YAML;\n- spring-boot-starter-test: 测试模块，包括JUnit、Hamcrest、Mockito;\n\n2. 编写controller内容\n```java\n@RestController\npublic class HelloWorldController {\n    @GetMapping(\"/hello\")\n    public String index(){\n        return \"Hello World.\";\n    }\n}\n```\n@RestController的作用就是controller里面的方法都以json格式输出，不用再写jackson配置，其本质实际上就是@Controller + @ResponseBody。\n\n3. 启动主程序，打开浏览器访问http://localhost:8080/hello，就可以看到效果了，有木有很简单！\n\n### 单元测试\n打开scr/test/java 下的测试入口，编写简单的http请求来测试：使用mockmvc实现，并利用MockMcvResultHandlers.print()打印出执行结果。\n```java\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class HelloWorldControllerTests {\n    private MockMvc mvc;\n\n    @Before\n    public void setUp() throws Exception{\n        mvc = MockMvcBuilders.standaloneSetup(new HelloWorldController()).build();\n    }\n\n    @Test\n    public void getHello() throws Exception{\n        mvc.perform(MockMvcRequestBuilders.get(\"/hello\").accept(MediaType.APPLICATION_JSON))\n                .andExpect(MockMvcResultMatchers.status().isOk())\n                .andDo(MockMvcResultHandlers.print())\n                .andReturn();\n    }\n}\n```\n\n### 热启动\n热启动在正常开发项目中已经很常见了，虽然平时开发web项目过程中，改动项目后重启总是报错，但是Spring Boot对调试支持很好，修改之后可以实时生效，需要添加以下配置：\n```xml\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-devtools</artifactId>\n        <optional>true</optional>\n   </dependency>\n</dependencies>\n\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n            <configuration>\n                <fork>true</fork>\n            </configuration>\n        </plugin>\n   </plugins>\n</build>\n```\n使用idea还需要更改一些配置，setting修改，如下图：\n![spring-springboot-helloworld](/images/spring-springboot-helloworld-5.png)\n然后按组合键 Shift+Ctrl+Alt+/ 选择Registry... 找到 compiler.automake.allow.when.app.running 勾选即可。\n\n热启动模块在完整的打包环境下运行的时候会被禁用。如果你使用java -jar启动应用或者用一个特定的classloader启动，它会认为这是一个“生产环境”。\n\n## 总结\n使用spring boot可以非常方便、快速搭建项目，使我们不用关心框架之间的兼容性，适用版本等各种问题，我们想使用任何东西，仅仅添加一个配置就可以，所以使用sping boot非常适合构建微服务。\n\n","slug":"spring-springboot-helloword","published":1,"updated":"2018-10-06T15:10:11.100Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmyu0sbx000zx8uoh7qbxned","content":"<p><img src=\"/images/spring-springboot-1.jpg\" alt=\"spring-springboot-helloworld\"></p><p>Spring Boot 是由 Pivotal 团队提供的全新框架，其设计目的是用来简化新 Spring 应用的初始搭建以及开发过程，该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。Spring Boot 默认配置了很多框架的使用方式，就像 Maven 整合了所有的 Jar 包，Spring Boot 整合了所有的框架。它的核心设计思想是：<strong>约定优于配置</strong>，Spring Boot 所有开发细节都是依据此思想进行实现的。<a id=\"more\"></a></p><p>Spring Boot 是一套全新的框架，它来自于 Spring 大家族，因此 Spring 所有具备的功能它都有并且更容易使用；同时还简化了基于 Spring 的应用开发，通过少量的代码就能创建一个独立的、产品级别的 Spring 应用。</p><p>下图展示出了 Spring Boot 在 Spring 生态中的位置： <img src=\"/images/spring-springboot-helloworld-2.png\" alt=\"spring-springboot-helloworld\"></p><p>该项目主要的目的是：</p><ul><li>上手 Spring 开发更快、更广泛；</li><li>使用默认方式实现快速开发；</li><li>提供大多数项目所需的非功能特性，诸如：嵌入式服务器、安全、心跳检查、外部配置等。</li></ul><p><strong>Spring Boot 特性</strong></p><ul><li>使用 Spring 项目引导页面可以在几秒构建一个项目；</li><li>方便对外输出各种形式的服务，如 REST API、WebSocket、Web、Streaming、Tasks；</li><li>非常简洁的安全策略集成；</li><li>支持关系数据库和非关系数据库；</li><li>支持运行期内嵌容器，如 Tomcat、Jetty；</li><li>强大的开发包，支持热启动；</li><li>自动管理依赖；</li><li>自带应用监控；</li><li>支持各种 IDE，如 IntelliJ IDEA、NetBeans。</li></ul><h2 id=\"为什么学习-Spring-Boot-？\"><a href=\"#为什么学习-Spring-Boot-？\" class=\"headerlink\" title=\"为什么学习 Spring Boot ？\"></a>为什么学习 Spring Boot ？</h2><p>Spring Boot 本身并不提供 Spring 框架的核心特性以及扩展功能，只是用于快速、敏捷地开发新一代基于 Spring 框架的应用程序。同时它集成了大量常用的第三方库配置（如 Redis、MongoDB、JPA、RabbitMQ、Quartz 等），Spring Boot 应用中这些第三方库几乎可以零配置进行开箱即用，大部分的 Spring Boot 应用都只需要非常少量的配置代码，开发者能够更加专注于业务逻辑。</p><p>使用 Spring Boot 开发项目，有以下几方面优势：</p><ol><li>Spring Boot 使开发变得简单，提供了丰富的解决方案，快速集成各种解决方案提升开发效率。</li><li>Spring Boot 使配置变得简单，提供了丰富的 Starters，集成主流开源产品往往只需要简单的配置即可。</li><li>Spring Boot 使部署变得简单，其本身内嵌启动容器，仅仅需要一个命令即可启动项目，结合 Jenkins、Docker 自动化运维非常容易实现。</li><li>Spring Boot 使监控变得简单，自带监控组件，使用 Actuator 轻松监控服务各项状态。</li></ol><p>从软件发展的角度来讲，越简单的开发模式越流行，简单的开发模式解放出更多生产力，让开发人员可以避免将精力耗费在各种配置、语法所设置的门槛上，从而更专注于业务。这点上，Spring Boot 已尽可能地简化了应用开发的门槛。</p><p>Spring Boot 所集成的技术栈，涵盖了各大互联网公司的主流技术，跟着 Spring Boot 的路线去学习，基本可以了解国内外互联网公司的技术特点。</p><h2 id=\"快速入门\"><a href=\"#快速入门\" class=\"headerlink\" title=\"快速入门\"></a>快速入门</h2><p>说了那么多，手痒痒的很，马上来一发试试。</p><h3 id=\"maven-构建项目\"><a href=\"#maven-构建项目\" class=\"headerlink\" title=\"maven 构建项目\"></a>maven 构建项目</h3><ol><li>访问<a href=\"http://start.spring.io/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">http://start.spring.io/</a></li><li>选择构建工具Maven Project、Spring Boot版本1.5.16以及一些工程基本信息，点击“Switch to the full version.”java版本选择1.8，可参考下图所示： <img src=\"/images/spring-springboot-helloworld-3.png\" alt=\"spring-springboot-helloworld\"></li><li>点击Generate Project下载项目压缩包</li><li>解压后，使用Idea，Open -&gt; 选择解压后的文件夹中的pom.xml文件 -&gt; Open as Project</li></ol><h3 id=\"项目结构介绍\"><a href=\"#项目结构介绍\" class=\"headerlink\" title=\"项目结构介绍\"></a>项目结构介绍</h3><p><img src=\"/images/spring-springboot-helloworld-4.png\" alt=\"spring-springboot-helloworld\"> 如上图所示，Spring Boot的基础结构共三个文件：</p><ul><li>src/main/java 程序开发以及主程序入口</li><li>src/main/resources 配置文件</li><li>src/test/java 测试程序</li></ul><p>另外，Spring Boot建议的目录结构如下：</p><p>root package结构：com.example.myproject</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com</span><br><span class=\"line\">  +- example</span><br><span class=\"line\">    +- myproject</span><br><span class=\"line\">      +- Application.java</span><br><span class=\"line\">      |</span><br><span class=\"line\">      +- domain</span><br><span class=\"line\">      |  +- Customer.java</span><br><span class=\"line\">      |  +- CustomerRepository.java</span><br><span class=\"line\">      |</span><br><span class=\"line\">      +- service</span><br><span class=\"line\">      |  +- CustomerService.java</span><br><span class=\"line\">      |</span><br><span class=\"line\">      +- controller</span><br><span class=\"line\">      |  +- CustomerController.java</span><br><span class=\"line\">      |</span><br></pre></td></tr></table></figure><ol><li>Application.java 建议放到根目录瞎买，主要用于做一些框架配置</li><li>domain 目录主要用于实体（Entity）和数据访问层（Repository）</li><li>service 层主要是业务逻辑代码</li><li>controller 负责页面访问控制</li></ol><p>采用默认配置可以省去很多配置，当然也可以根据自己的喜欢来进行更改</p><p>最后，启动Application main方法，至此一个java项目搭建好了。</p><h3 id=\"引入web模块\"><a href=\"#引入web模块\" class=\"headerlink\" title=\"引入web模块\"></a>引入web模块</h3><ol><li>在pom.xml文件中添加支持web的模块：<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>pom.xml 文件中默认有两个模块：</p><ul><li>spring-boot-starter: 核心模块，包括自动配置支持、日志和YAML;</li><li>spring-boot-starter-test: 测试模块，包括JUnit、Hamcrest、Mockito;</li></ul><ol start=\"2\"><li>编写controller内容<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorldController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/hello\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">index</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Hello World.\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>@RestController的作用就是controller里面的方法都以json格式输出，不用再写jackson配置，其本质实际上就是@Controller + @ResponseBody。</p><ol start=\"3\"><li>启动主程序，打开浏览器访问<a href=\"http://localhost:8080/hello，就可以看到效果了，有木有很简单！\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">http://localhost:8080/hello，就可以看到效果了，有木有很简单！</a></li></ol><h3 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h3><p>打开scr/test/java 下的测试入口，编写简单的http请求来测试：使用mockmvc实现，并利用MockMcvResultHandlers.print()打印出执行结果。</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith</span>(SpringRunner.class)</span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorldControllerTests</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> MockMvc mvc;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUp</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        mvc = MockMvcBuilders.standaloneSetup(<span class=\"keyword\">new</span> HelloWorldController()).build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getHello</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        mvc.perform(MockMvcRequestBuilders.get(<span class=\"string\">\"/hello\"</span>).accept(MediaType.APPLICATION_JSON))</span><br><span class=\"line\">                .andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class=\"line\">                .andDo(MockMvcResultHandlers.print())</span><br><span class=\"line\">                .andReturn();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id=\"热启动\"><a href=\"#热启动\" class=\"headerlink\" title=\"热启动\"></a>热启动</h3><p>热启动在正常开发项目中已经很常见了，虽然平时开发web项目过程中，改动项目后重启总是报错，但是Spring Boot对调试支持很好，修改之后可以实时生效，需要添加以下配置：</p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-devtools<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">fork</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">fork</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>使用idea还需要更改一些配置，setting修改，如下图： <img src=\"/images/spring-springboot-helloworld-5.png\" alt=\"spring-springboot-helloworld\"> 然后按组合键 Shift+Ctrl+Alt+/ 选择Registry… 找到 compiler.automake.allow.when.app.running 勾选即可。</p><p>热启动模块在完整的打包环境下运行的时候会被禁用。如果你使用java -jar启动应用或者用一个特定的classloader启动，它会认为这是一个“生产环境”。</p><h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>使用spring boot可以非常方便、快速搭建项目，使我们不用关心框架之间的兼容性，适用版本等各种问题，我们想使用任何东西，仅仅添加一个配置就可以，所以使用sping boot非常适合构建微服务。</p>","site":{"data":{}},"excerpt":"<p><img src=\"/images/spring-springboot-1.jpg\" alt=\"spring-springboot-helloworld\"></p><p>Spring Boot 是由 Pivotal 团队提供的全新框架，其设计目的是用来简化新 Spring 应用的初始搭建以及开发过程，该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。Spring Boot 默认配置了很多框架的使用方式，就像 Maven 整合了所有的 Jar 包，Spring Boot 整合了所有的框架。它的核心设计思想是：<strong>约定优于配置</strong>，Spring Boot 所有开发细节都是依据此思想进行实现的。","more":"</p><p>Spring Boot 是一套全新的框架，它来自于 Spring 大家族，因此 Spring 所有具备的功能它都有并且更容易使用；同时还简化了基于 Spring 的应用开发，通过少量的代码就能创建一个独立的、产品级别的 Spring 应用。</p><p>下图展示出了 Spring Boot 在 Spring 生态中的位置： <img src=\"/images/spring-springboot-helloworld-2.png\" alt=\"spring-springboot-helloworld\"></p><p>该项目主要的目的是：</p><ul><li>上手 Spring 开发更快、更广泛；</li><li>使用默认方式实现快速开发；</li><li>提供大多数项目所需的非功能特性，诸如：嵌入式服务器、安全、心跳检查、外部配置等。</li></ul><p><strong>Spring Boot 特性</strong></p><ul><li>使用 Spring 项目引导页面可以在几秒构建一个项目；</li><li>方便对外输出各种形式的服务，如 REST API、WebSocket、Web、Streaming、Tasks；</li><li>非常简洁的安全策略集成；</li><li>支持关系数据库和非关系数据库；</li><li>支持运行期内嵌容器，如 Tomcat、Jetty；</li><li>强大的开发包，支持热启动；</li><li>自动管理依赖；</li><li>自带应用监控；</li><li>支持各种 IDE，如 IntelliJ IDEA、NetBeans。</li></ul><h2 id=\"为什么学习-Spring-Boot-？\"><a href=\"#为什么学习-Spring-Boot-？\" class=\"headerlink\" title=\"为什么学习 Spring Boot ？\"></a>为什么学习 Spring Boot ？</h2><p>Spring Boot 本身并不提供 Spring 框架的核心特性以及扩展功能，只是用于快速、敏捷地开发新一代基于 Spring 框架的应用程序。同时它集成了大量常用的第三方库配置（如 Redis、MongoDB、JPA、RabbitMQ、Quartz 等），Spring Boot 应用中这些第三方库几乎可以零配置进行开箱即用，大部分的 Spring Boot 应用都只需要非常少量的配置代码，开发者能够更加专注于业务逻辑。</p><p>使用 Spring Boot 开发项目，有以下几方面优势：</p><ol><li>Spring Boot 使开发变得简单，提供了丰富的解决方案，快速集成各种解决方案提升开发效率。</li><li>Spring Boot 使配置变得简单，提供了丰富的 Starters，集成主流开源产品往往只需要简单的配置即可。</li><li>Spring Boot 使部署变得简单，其本身内嵌启动容器，仅仅需要一个命令即可启动项目，结合 Jenkins、Docker 自动化运维非常容易实现。</li><li>Spring Boot 使监控变得简单，自带监控组件，使用 Actuator 轻松监控服务各项状态。</li></ol><p>从软件发展的角度来讲，越简单的开发模式越流行，简单的开发模式解放出更多生产力，让开发人员可以避免将精力耗费在各种配置、语法所设置的门槛上，从而更专注于业务。这点上，Spring Boot 已尽可能地简化了应用开发的门槛。</p><p>Spring Boot 所集成的技术栈，涵盖了各大互联网公司的主流技术，跟着 Spring Boot 的路线去学习，基本可以了解国内外互联网公司的技术特点。</p><h2 id=\"快速入门\"><a href=\"#快速入门\" class=\"headerlink\" title=\"快速入门\"></a>快速入门</h2><p>说了那么多，手痒痒的很，马上来一发试试。</p><h3 id=\"maven-构建项目\"><a href=\"#maven-构建项目\" class=\"headerlink\" title=\"maven 构建项目\"></a>maven 构建项目</h3><ol><li>访问<a href=\"http://start.spring.io/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">http://start.spring.io/</a></li><li>选择构建工具Maven Project、Spring Boot版本1.5.16以及一些工程基本信息，点击“Switch to the full version.”java版本选择1.8，可参考下图所示： <img src=\"/images/spring-springboot-helloworld-3.png\" alt=\"spring-springboot-helloworld\"></li><li>点击Generate Project下载项目压缩包</li><li>解压后，使用Idea，Open -&gt; 选择解压后的文件夹中的pom.xml文件 -&gt; Open as Project</li></ol><h3 id=\"项目结构介绍\"><a href=\"#项目结构介绍\" class=\"headerlink\" title=\"项目结构介绍\"></a>项目结构介绍</h3><p><img src=\"/images/spring-springboot-helloworld-4.png\" alt=\"spring-springboot-helloworld\"> 如上图所示，Spring Boot的基础结构共三个文件：</p><ul><li>src/main/java 程序开发以及主程序入口</li><li>src/main/resources 配置文件</li><li>src/test/java 测试程序</li></ul><p>另外，Spring Boot建议的目录结构如下：</p><p>root package结构：com.example.myproject</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com</span><br><span class=\"line\">  +- example</span><br><span class=\"line\">    +- myproject</span><br><span class=\"line\">      +- Application.java</span><br><span class=\"line\">      |</span><br><span class=\"line\">      +- domain</span><br><span class=\"line\">      |  +- Customer.java</span><br><span class=\"line\">      |  +- CustomerRepository.java</span><br><span class=\"line\">      |</span><br><span class=\"line\">      +- service</span><br><span class=\"line\">      |  +- CustomerService.java</span><br><span class=\"line\">      |</span><br><span class=\"line\">      +- controller</span><br><span class=\"line\">      |  +- CustomerController.java</span><br><span class=\"line\">      |</span><br></pre></td></tr></table></figure><ol><li>Application.java 建议放到根目录瞎买，主要用于做一些框架配置</li><li>domain 目录主要用于实体（Entity）和数据访问层（Repository）</li><li>service 层主要是业务逻辑代码</li><li>controller 负责页面访问控制</li></ol><p>采用默认配置可以省去很多配置，当然也可以根据自己的喜欢来进行更改</p><p>最后，启动Application main方法，至此一个java项目搭建好了。</p><h3 id=\"引入web模块\"><a href=\"#引入web模块\" class=\"headerlink\" title=\"引入web模块\"></a>引入web模块</h3><ol><li>在pom.xml文件中添加支持web的模块：<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>pom.xml 文件中默认有两个模块：</p><ul><li>spring-boot-starter: 核心模块，包括自动配置支持、日志和YAML;</li><li>spring-boot-starter-test: 测试模块，包括JUnit、Hamcrest、Mockito;</li></ul><ol start=\"2\"><li>编写controller内容<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorldController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/hello\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">index</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Hello World.\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>@RestController的作用就是controller里面的方法都以json格式输出，不用再写jackson配置，其本质实际上就是@Controller + @ResponseBody。</p><ol start=\"3\"><li>启动主程序，打开浏览器访问<a href=\"http://localhost:8080/hello，就可以看到效果了，有木有很简单！\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">http://localhost:8080/hello，就可以看到效果了，有木有很简单！</a></li></ol><h3 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h3><p>打开scr/test/java 下的测试入口，编写简单的http请求来测试：使用mockmvc实现，并利用MockMcvResultHandlers.print()打印出执行结果。</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith</span>(SpringRunner.class)</span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorldControllerTests</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> MockMvc mvc;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUp</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        mvc = MockMvcBuilders.standaloneSetup(<span class=\"keyword\">new</span> HelloWorldController()).build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getHello</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        mvc.perform(MockMvcRequestBuilders.get(<span class=\"string\">\"/hello\"</span>).accept(MediaType.APPLICATION_JSON))</span><br><span class=\"line\">                .andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class=\"line\">                .andDo(MockMvcResultHandlers.print())</span><br><span class=\"line\">                .andReturn();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id=\"热启动\"><a href=\"#热启动\" class=\"headerlink\" title=\"热启动\"></a>热启动</h3><p>热启动在正常开发项目中已经很常见了，虽然平时开发web项目过程中，改动项目后重启总是报错，但是Spring Boot对调试支持很好，修改之后可以实时生效，需要添加以下配置：</p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-devtools<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">fork</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">fork</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>使用idea还需要更改一些配置，setting修改，如下图： <img src=\"/images/spring-springboot-helloworld-5.png\" alt=\"spring-springboot-helloworld\"> 然后按组合键 Shift+Ctrl+Alt+/ 选择Registry… 找到 compiler.automake.allow.when.app.running 勾选即可。</p><p>热启动模块在完整的打包环境下运行的时候会被禁用。如果你使用java -jar启动应用或者用一个特定的classloader启动，它会认为这是一个“生产环境”。</p><h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>使用spring boot可以非常方便、快速搭建项目，使我们不用关心框架之间的兼容性，适用版本等各种问题，我们想使用任何东西，仅仅添加一个配置就可以，所以使用sping boot非常适合构建微服务。</p>"},{"title":"SpringBoot实战（二）Web","author":"SnailDev","date":"2018-09-02T12:36:41.000Z","featured_image":"/images/spring-springboot-1.jpg","_content":"![spring-springboot-web](/images/spring-springboot-1.jpg)\n\nSpring Boot Web开发非常的简单，其中包括常用的json输出、filters、property、log等。\n<!--more-->\n\n## 接口开发\n\n在以前的spring开发的时候需要我们提供json接口的时候需要做以下配置：\n1. 添加jackon等相关jar包\n2. 配置spring controller扫描\n3. 对接的方法添加@ResponseBody\n\n就这样我们会经常由于配置问题，导致406错误等等，那么spring boot是如何做的呢，只需要给Controller类添加`@RestController` 注解即可，那么默认类中的方法都会以json的格式返回。\n```java\n@RestController\npublic class HelloWorldController {\n    @GetMapping(\"/getUser\")\n    public User getUser(){\n        User user = new User();\n        user.setUserName(\"snaildev\");\n        user.setPassword(\"123456\");\n        return user;\n    }\n}\n```\n如果我们需要使用页面开发只要使用`@Controller`，下面会结合模板来说明。\n\n## 自定义Filter\n我们常常在项目中会使用filters用于记录调用日志、排除有XSS威胁的字符、执行权限验证等等。Spring Boot自动添加了OrderedCharacterEncodingFilter和HiddenHttpMethodFilter,并且我们可以自定义Filter。\n\n两个步骤：\n1. 实现Filter接口，实现Filter方法；\n2. 添加`@Configuration` 注解，将自定义的Filter加入过滤链；\n\nok，直接上代码\n\nWebConfiguration.java\n```java\n@Configuration\npublic class WebConfiguration {\n    @Bean\n    public RemoteIpFilter remoteIpFilter(){\n        return new RemoteIpFilter();\n    }\n\n    @Bean\n    public FilterRegistrationBean filterRegistrationBean(){\n        FilterRegistrationBean registrationBean = new FilterRegistrationBean();\n        registrationBean.setFilter(new MyFilter());\n        registrationBean.addUrlPatterns(\"/*\");\n        registrationBean.addInitParameter(\"paramName\",\"paramValue\");\n        registrationBean.setName(\"MyFilter\");\n        registrationBean.setOrder(1);\n\n        return registrationBean;\n    }\n}\n```\n\nMyFilter.java\n```java\npublic class MyFilter implements Filter {\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n\n    }\n\n    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n        HttpServletRequest request = (HttpServletRequest) servletRequest;\n        System.out.println(\"this is MyFilter，url：\" + request.getRequestURI());\n        filterChain.doFilter(servletRequest, servletResponse);\n    }\n\n    @Override\n    public void destroy() {\n\n    }\n}\n```\n\n## 自定义Property\n在Web开发中，我们经常需要自定义一些配置文件，如何使用呢?\n\n**配置在application.properties中**\n```\ncom.example.title=SnailDev's Blog\ncom.example.description=Coding is everything in my life. \n```\n\n自定义配置类\n```java\n@Component\npublic class ExampleProperties {\n    @Value(\"${com.example.title}\")\n    private String title;\n    @Value(\"${com.example.description}\")\n    private String description;\n\n    //省略getter settet方法\n\n    }\n```\n\n**log配置**\n配置输出的地址和输出的级别\n```\nlogging.path=/user/local/log\nlogging.level.com.example=DEBUG\nlogging.level.org.springframework.web=INFO\nlogging.level.org.hibernate=ERROR\n```\npath为本机log地址，logging.level 后面可以根据包路径配置不同资源的log级别\n\n## 数据库操作\n在这里我们重点来看一下mysql、spring data jpa的使用，其中mysql就不用说了，大家应该都很熟悉，jpa是利用Hibernate生成各种自动化的sql，如果只是简单的增删改查，基本上不用手写了，spring 内部已经帮我们封装实现了。\n\n下面简单介绍一下如何在spring boot中简单使用\n\n### 1. 添加相关的jar包依赖\n```xml\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-starter-data-jpa</artifactId>\n</dependency>\n\n<dependency>\n\t<groupId>mysql</groupId>\n\t<artifactId>mysql-connector-java</artifactId>\n</dependency>\n```\n\n### 2. 添加配置文件\n```\nspring.datasource.url=jdbc:mysql://localhost:3306/test\nspring.datasource.username=root\nspring.datasource.password=123456\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n\nspring.jpa.properties.hibernate.hbm2ddl.auto=update\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect\nspring.jpa.show-sql=true\n```\n其实这个hibernate.hbm2ddl.auto参数的作用主要用于：自动创建|更新|验证数据库表结构，有四个值：\n1. create：每次加载hibernate时都会删除上一次生成的表，然后根据model类再重新生成新表，哪怕两次没有任何改变也会这样执行，这就是导致数据库数据丢失的一个重要原因。\n2. create-drop：每次加载hibernate时根据model类生成表，但是sessionFactory一关闭，表就自动删除。\n3. update：最常用的属性，第一次加载hibernate时根据model类会自动建立表的结构（数据库先建好），以后加载hibernate时根据model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会被删除。要留意的是当部署到服务器后，表结构是不会被马上建立ilai的，是要等应用第一次运行起来后才会。\n4. validate：每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。\n\n`dialect` 主要是指定生成表名的存储引擎为InneoDB\n`show-sql` 是否打印出自动生成的SQL,方便调试的时候查看\n\n### 3. 添加实体类和Dao\n```java\n@Entity\npublic class User implements Serializable {\n    private static final long serialVersionUID = 1L;\n    @Id\n    @GeneratedValue\n    private Long id;\n    @Column(nullable = false, unique = true)\n    private String userName;\n    @Column(nullable = false)\n    private String passWord;\n    @Column(nullable = false, unique = true)\n    private String email;\n    @Column(nullable = true, unique = true)\n    private String nickName;\n    @Column(nullable = false)\n    private String regTime;\n\n    //省略getter settet方法、构造方法\n\n}\n```\ndao只要继承JpaRepository类就可以，几乎可以不用写方法，还有一个特别的功能非常赞，就是根据方法名来自动生成SQL,比如`findByUserName`，会自动产生一个以`userName`为参数的查询方法，再比如`findAll`就会查询表里面的所有数据，再比如自动分页等等。\n\n**Entity中不映射成列的字段得加@Transient注解，不加注解就会映射成列**\n```java\npublic interface UserRepository extends JpaRepository<User,Long> {\n    User findByUserName(String userName);\n    User findByUserNameOrEmail(String userName,String email);\n}\n```\n\n### 4. 测试\n```java\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringBootTest\npublic class UserRepositoryTests {\n    @Autowired\n    private UserRepository userRepository;\n\n    @Test\n    public void test() throws Exception {\n        Date date = new Date();\n        DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG);\n        String formattedDate = dateFormat.format(date);\n\n        userRepository.save(new User(\"aa1\", \"aa@gmail.com\", \"aa\", \"aa123456\", formattedDate));\n        userRepository.save(new User(\"bb1\", \"bb@gmail.com\", \"bb\", \"bb123456\", formattedDate));\n        userRepository.save(new User(\"cc1\", \"cc@gmail.com\", \"cc\", \"cc123456\", formattedDate));\n\n        Assert.assertEquals(3,userRepository.findAll().size());\n        Assert.assertEquals(\"bb\",userRepository.findByUserNameOrEmail(\"bb\",\"bb@gmail.com\").getNickName());\n        userRepository.delete(userRepository.findByUserName(\"aa1\"));\n    }\n}\n```\n当然spring data jpa还有很多功能，比如封装好的分页，可以自定义SQL，主从分离等等，等到以后再做细讲。\n\n## Thymeleaf模板\nSpring Boot推荐使用thymeleaf模板来代替jpa,那么thymeleaf模板到底好在哪里呢，让Spring官方来推荐，下面我们来看看\n### 介绍\nThymeleaf是一款用于渲染XML/XHTML/HTML5内容的模板引擎。类似JSP，Velocity，FreeMarker等，它也可以轻易的与Spring MVC等Web框架进行集成作为Web应用的模板引擎。与其它模板引擎相比，**Thymeleaf最大的特点是能够直接在浏览器中打开并正确显示模板页面，而不需要启动整个Web应用**。\n\n好了，你们可能会觉得已经习惯使用了velocity,freemarker,beetle之类的模板，那么thymeleaf到底好在哪呢？让我们来做个对比：\nThymeleaf是与众不同的，因为它使用了自然的模板技术。这意味着Thymeleaf的模板语法并不会破坏文档的结构，模板依旧是有效的XML文档。模板还可以用作工作原型，Thymeleaf会在运行期替换掉静态值。Velocity与FreeMarker则是连续的文本处理器。\n\n下面的代码示例分别使用Velocity、FreeMarker与Thymeleaf打印出一条消息：\n```html\nVelocity: <p>$message</p>\nFreeMarker: <p>${message}</p>\nThymeleaf: <p th:text=\"${message}\">Hello World!</p>\n```\n**注意，由于Thymeleaf使用了XML DOM解析器，因此它并不适合处理大规模的XML文件。**\n\n### 简单用法\n**URL**\n\nURL在Web应用模板中占据着十分重要的地位，需要特别注意 的是Thymeleaf对于URL的处理是通过语法@{...}来处理的。Thymeleaf支持绝对路径URL:\n```html\n<a th:href=\"@{https://www.baidu.com}\">百度</a>\n```\n\n**条件求值**\n```html\n<a th:href=\"@{/login}\" th:unless=\"${session.user != null}\">登录</a>\n```\n\n**for循环**\n```html\n<tr th:each=\"prod : ${prods}\">\n    <td th:text=\"${prod.getName()}\">Onions</td>\n    <td th:text=\"${prod.getPrice()}\">2.41</td>\n    <td th:text=\"${prod.isInStock} ? #{true} : #{false}\">yes</td>\n</tr>\n```\n暂时就列这几个\n\n### 页面即原型\n在Web开发过程中一个绕不开的话题就是前端工程师与后端工程师的协作，在传统Java Web开发过程中，前端工程师和后端工程师一样，也需要安装一套完整的开发环境，然后各类Java IDE中修改模板、静态资源文件，启动/重启/重新加载应用服务器，刷新页面查看最终效果。\n\n但实际上前端工程师的职责更多应该关注于页面本身而非后端，使用JSP，Velocity等传统的Java模板引擎很难做到这一点，因为它们必须在应用服务器中渲染完成后才能在浏览器中看到结果，而Thymeleaf从根本上颠覆了这一过程，通过属性进行模板渲染不会引入任何新的浏览器不能识别的标签，例如JSP中的，不会在Tag内部写表达式。整个页面直接作为HTML文件用浏览器打开，几乎就可以看到最终的效果，这大大解放了前端工程师的生产力，它们的最终交付物就是纯的HTML/CSS/JavaScript文件。\n\n## WebJars\nWebJars是一个很神奇的东西，可以让我们以jar包的形式来使用前端的各种框架和组件。\n### 什么是Webjars\n什么是WebJars？WebJars是将客户端（浏览器）资源（JavaScript，Css等）打成jar包文件，以对资源进行统一依赖管理。WebJars的jar包部署在Maven中央仓库上。\n### 为什么使用\n我们在开发Java web项目的时候会使用像Maven，Gradle等构建工具以实现对jar包版本依赖管理，以及项目的自动化管理，但是对于JavaScript，Css等前端资源包，我们只能采用拷贝到webapp下的方式，这样做就无法对这些资源进行依赖管理。那么WebJars就提供给我们这些前端资源的jar包形势，我们就可以进行依赖管理。\n### 怎样使用\n1. [WebJars官网](https://www.webjars.org/)查找对应的组件，比如Bootstrap.js\n```xml\n<dependency>\n    <groupId>org.webjars.bower</groupId>\n    <artifactId>bootstrap</artifactId>\n    <version>3.3.6</version>\n</dependency>\n```\n2. 在页面引入\n```html\n<link th:href=\"@{/webjars/bootstrap/3.3.6/dist/css/bootstrap.css}\" rel=\"stylesheet\"></link>\n```\n\n就可以正常使用了。\n\n\n\n","source":"_posts/spring-springboot-web.md","raw":"---\ntitle: SpringBoot实战（二）Web\nauthor: SnailDev\ntags:\n  - SpringBoot\n  - Web综合开发\ncategories:\n  - SpringBoot\ndate: 2018-09-02 20:36:41\nfeatured_image: /images/spring-springboot-1.jpg\n---\n![spring-springboot-web](/images/spring-springboot-1.jpg)\n\nSpring Boot Web开发非常的简单，其中包括常用的json输出、filters、property、log等。\n<!--more-->\n\n## 接口开发\n\n在以前的spring开发的时候需要我们提供json接口的时候需要做以下配置：\n1. 添加jackon等相关jar包\n2. 配置spring controller扫描\n3. 对接的方法添加@ResponseBody\n\n就这样我们会经常由于配置问题，导致406错误等等，那么spring boot是如何做的呢，只需要给Controller类添加`@RestController` 注解即可，那么默认类中的方法都会以json的格式返回。\n```java\n@RestController\npublic class HelloWorldController {\n    @GetMapping(\"/getUser\")\n    public User getUser(){\n        User user = new User();\n        user.setUserName(\"snaildev\");\n        user.setPassword(\"123456\");\n        return user;\n    }\n}\n```\n如果我们需要使用页面开发只要使用`@Controller`，下面会结合模板来说明。\n\n## 自定义Filter\n我们常常在项目中会使用filters用于记录调用日志、排除有XSS威胁的字符、执行权限验证等等。Spring Boot自动添加了OrderedCharacterEncodingFilter和HiddenHttpMethodFilter,并且我们可以自定义Filter。\n\n两个步骤：\n1. 实现Filter接口，实现Filter方法；\n2. 添加`@Configuration` 注解，将自定义的Filter加入过滤链；\n\nok，直接上代码\n\nWebConfiguration.java\n```java\n@Configuration\npublic class WebConfiguration {\n    @Bean\n    public RemoteIpFilter remoteIpFilter(){\n        return new RemoteIpFilter();\n    }\n\n    @Bean\n    public FilterRegistrationBean filterRegistrationBean(){\n        FilterRegistrationBean registrationBean = new FilterRegistrationBean();\n        registrationBean.setFilter(new MyFilter());\n        registrationBean.addUrlPatterns(\"/*\");\n        registrationBean.addInitParameter(\"paramName\",\"paramValue\");\n        registrationBean.setName(\"MyFilter\");\n        registrationBean.setOrder(1);\n\n        return registrationBean;\n    }\n}\n```\n\nMyFilter.java\n```java\npublic class MyFilter implements Filter {\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n\n    }\n\n    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n        HttpServletRequest request = (HttpServletRequest) servletRequest;\n        System.out.println(\"this is MyFilter，url：\" + request.getRequestURI());\n        filterChain.doFilter(servletRequest, servletResponse);\n    }\n\n    @Override\n    public void destroy() {\n\n    }\n}\n```\n\n## 自定义Property\n在Web开发中，我们经常需要自定义一些配置文件，如何使用呢?\n\n**配置在application.properties中**\n```\ncom.example.title=SnailDev's Blog\ncom.example.description=Coding is everything in my life. \n```\n\n自定义配置类\n```java\n@Component\npublic class ExampleProperties {\n    @Value(\"${com.example.title}\")\n    private String title;\n    @Value(\"${com.example.description}\")\n    private String description;\n\n    //省略getter settet方法\n\n    }\n```\n\n**log配置**\n配置输出的地址和输出的级别\n```\nlogging.path=/user/local/log\nlogging.level.com.example=DEBUG\nlogging.level.org.springframework.web=INFO\nlogging.level.org.hibernate=ERROR\n```\npath为本机log地址，logging.level 后面可以根据包路径配置不同资源的log级别\n\n## 数据库操作\n在这里我们重点来看一下mysql、spring data jpa的使用，其中mysql就不用说了，大家应该都很熟悉，jpa是利用Hibernate生成各种自动化的sql，如果只是简单的增删改查，基本上不用手写了，spring 内部已经帮我们封装实现了。\n\n下面简单介绍一下如何在spring boot中简单使用\n\n### 1. 添加相关的jar包依赖\n```xml\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-starter-data-jpa</artifactId>\n</dependency>\n\n<dependency>\n\t<groupId>mysql</groupId>\n\t<artifactId>mysql-connector-java</artifactId>\n</dependency>\n```\n\n### 2. 添加配置文件\n```\nspring.datasource.url=jdbc:mysql://localhost:3306/test\nspring.datasource.username=root\nspring.datasource.password=123456\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n\nspring.jpa.properties.hibernate.hbm2ddl.auto=update\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect\nspring.jpa.show-sql=true\n```\n其实这个hibernate.hbm2ddl.auto参数的作用主要用于：自动创建|更新|验证数据库表结构，有四个值：\n1. create：每次加载hibernate时都会删除上一次生成的表，然后根据model类再重新生成新表，哪怕两次没有任何改变也会这样执行，这就是导致数据库数据丢失的一个重要原因。\n2. create-drop：每次加载hibernate时根据model类生成表，但是sessionFactory一关闭，表就自动删除。\n3. update：最常用的属性，第一次加载hibernate时根据model类会自动建立表的结构（数据库先建好），以后加载hibernate时根据model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会被删除。要留意的是当部署到服务器后，表结构是不会被马上建立ilai的，是要等应用第一次运行起来后才会。\n4. validate：每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。\n\n`dialect` 主要是指定生成表名的存储引擎为InneoDB\n`show-sql` 是否打印出自动生成的SQL,方便调试的时候查看\n\n### 3. 添加实体类和Dao\n```java\n@Entity\npublic class User implements Serializable {\n    private static final long serialVersionUID = 1L;\n    @Id\n    @GeneratedValue\n    private Long id;\n    @Column(nullable = false, unique = true)\n    private String userName;\n    @Column(nullable = false)\n    private String passWord;\n    @Column(nullable = false, unique = true)\n    private String email;\n    @Column(nullable = true, unique = true)\n    private String nickName;\n    @Column(nullable = false)\n    private String regTime;\n\n    //省略getter settet方法、构造方法\n\n}\n```\ndao只要继承JpaRepository类就可以，几乎可以不用写方法，还有一个特别的功能非常赞，就是根据方法名来自动生成SQL,比如`findByUserName`，会自动产生一个以`userName`为参数的查询方法，再比如`findAll`就会查询表里面的所有数据，再比如自动分页等等。\n\n**Entity中不映射成列的字段得加@Transient注解，不加注解就会映射成列**\n```java\npublic interface UserRepository extends JpaRepository<User,Long> {\n    User findByUserName(String userName);\n    User findByUserNameOrEmail(String userName,String email);\n}\n```\n\n### 4. 测试\n```java\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringBootTest\npublic class UserRepositoryTests {\n    @Autowired\n    private UserRepository userRepository;\n\n    @Test\n    public void test() throws Exception {\n        Date date = new Date();\n        DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG);\n        String formattedDate = dateFormat.format(date);\n\n        userRepository.save(new User(\"aa1\", \"aa@gmail.com\", \"aa\", \"aa123456\", formattedDate));\n        userRepository.save(new User(\"bb1\", \"bb@gmail.com\", \"bb\", \"bb123456\", formattedDate));\n        userRepository.save(new User(\"cc1\", \"cc@gmail.com\", \"cc\", \"cc123456\", formattedDate));\n\n        Assert.assertEquals(3,userRepository.findAll().size());\n        Assert.assertEquals(\"bb\",userRepository.findByUserNameOrEmail(\"bb\",\"bb@gmail.com\").getNickName());\n        userRepository.delete(userRepository.findByUserName(\"aa1\"));\n    }\n}\n```\n当然spring data jpa还有很多功能，比如封装好的分页，可以自定义SQL，主从分离等等，等到以后再做细讲。\n\n## Thymeleaf模板\nSpring Boot推荐使用thymeleaf模板来代替jpa,那么thymeleaf模板到底好在哪里呢，让Spring官方来推荐，下面我们来看看\n### 介绍\nThymeleaf是一款用于渲染XML/XHTML/HTML5内容的模板引擎。类似JSP，Velocity，FreeMarker等，它也可以轻易的与Spring MVC等Web框架进行集成作为Web应用的模板引擎。与其它模板引擎相比，**Thymeleaf最大的特点是能够直接在浏览器中打开并正确显示模板页面，而不需要启动整个Web应用**。\n\n好了，你们可能会觉得已经习惯使用了velocity,freemarker,beetle之类的模板，那么thymeleaf到底好在哪呢？让我们来做个对比：\nThymeleaf是与众不同的，因为它使用了自然的模板技术。这意味着Thymeleaf的模板语法并不会破坏文档的结构，模板依旧是有效的XML文档。模板还可以用作工作原型，Thymeleaf会在运行期替换掉静态值。Velocity与FreeMarker则是连续的文本处理器。\n\n下面的代码示例分别使用Velocity、FreeMarker与Thymeleaf打印出一条消息：\n```html\nVelocity: <p>$message</p>\nFreeMarker: <p>${message}</p>\nThymeleaf: <p th:text=\"${message}\">Hello World!</p>\n```\n**注意，由于Thymeleaf使用了XML DOM解析器，因此它并不适合处理大规模的XML文件。**\n\n### 简单用法\n**URL**\n\nURL在Web应用模板中占据着十分重要的地位，需要特别注意 的是Thymeleaf对于URL的处理是通过语法@{...}来处理的。Thymeleaf支持绝对路径URL:\n```html\n<a th:href=\"@{https://www.baidu.com}\">百度</a>\n```\n\n**条件求值**\n```html\n<a th:href=\"@{/login}\" th:unless=\"${session.user != null}\">登录</a>\n```\n\n**for循环**\n```html\n<tr th:each=\"prod : ${prods}\">\n    <td th:text=\"${prod.getName()}\">Onions</td>\n    <td th:text=\"${prod.getPrice()}\">2.41</td>\n    <td th:text=\"${prod.isInStock} ? #{true} : #{false}\">yes</td>\n</tr>\n```\n暂时就列这几个\n\n### 页面即原型\n在Web开发过程中一个绕不开的话题就是前端工程师与后端工程师的协作，在传统Java Web开发过程中，前端工程师和后端工程师一样，也需要安装一套完整的开发环境，然后各类Java IDE中修改模板、静态资源文件，启动/重启/重新加载应用服务器，刷新页面查看最终效果。\n\n但实际上前端工程师的职责更多应该关注于页面本身而非后端，使用JSP，Velocity等传统的Java模板引擎很难做到这一点，因为它们必须在应用服务器中渲染完成后才能在浏览器中看到结果，而Thymeleaf从根本上颠覆了这一过程，通过属性进行模板渲染不会引入任何新的浏览器不能识别的标签，例如JSP中的，不会在Tag内部写表达式。整个页面直接作为HTML文件用浏览器打开，几乎就可以看到最终的效果，这大大解放了前端工程师的生产力，它们的最终交付物就是纯的HTML/CSS/JavaScript文件。\n\n## WebJars\nWebJars是一个很神奇的东西，可以让我们以jar包的形式来使用前端的各种框架和组件。\n### 什么是Webjars\n什么是WebJars？WebJars是将客户端（浏览器）资源（JavaScript，Css等）打成jar包文件，以对资源进行统一依赖管理。WebJars的jar包部署在Maven中央仓库上。\n### 为什么使用\n我们在开发Java web项目的时候会使用像Maven，Gradle等构建工具以实现对jar包版本依赖管理，以及项目的自动化管理，但是对于JavaScript，Css等前端资源包，我们只能采用拷贝到webapp下的方式，这样做就无法对这些资源进行依赖管理。那么WebJars就提供给我们这些前端资源的jar包形势，我们就可以进行依赖管理。\n### 怎样使用\n1. [WebJars官网](https://www.webjars.org/)查找对应的组件，比如Bootstrap.js\n```xml\n<dependency>\n    <groupId>org.webjars.bower</groupId>\n    <artifactId>bootstrap</artifactId>\n    <version>3.3.6</version>\n</dependency>\n```\n2. 在页面引入\n```html\n<link th:href=\"@{/webjars/bootstrap/3.3.6/dist/css/bootstrap.css}\" rel=\"stylesheet\"></link>\n```\n\n就可以正常使用了。\n\n\n\n","slug":"spring-springboot-web","published":1,"updated":"2018-10-06T15:10:17.431Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmyu0sc20013x8uorva6sc8b","content":"<p><img src=\"/images/spring-springboot-1.jpg\" alt=\"spring-springboot-web\"></p><p>Spring Boot Web开发非常的简单，其中包括常用的json输出、filters、property、log等。<a id=\"more\"></a></p><h2 id=\"接口开发\"><a href=\"#接口开发\" class=\"headerlink\" title=\"接口开发\"></a>接口开发</h2><p>在以前的spring开发的时候需要我们提供json接口的时候需要做以下配置：</p><ol><li>添加jackon等相关jar包</li><li>配置spring controller扫描</li><li>对接的方法添加@ResponseBody</li></ol><p>就这样我们会经常由于配置问题，导致406错误等等，那么spring boot是如何做的呢，只需要给Controller类添加<code>@RestController</code> 注解即可，那么默认类中的方法都会以json的格式返回。</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorldController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/getUser\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUser</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        User user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">        user.setUserName(<span class=\"string\">\"snaildev\"</span>);</span><br><span class=\"line\">        user.setPassword(<span class=\"string\">\"123456\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>如果我们需要使用页面开发只要使用<code>@Controller</code>，下面会结合模板来说明。</p><h2 id=\"自定义Filter\"><a href=\"#自定义Filter\" class=\"headerlink\" title=\"自定义Filter\"></a>自定义Filter</h2><p>我们常常在项目中会使用filters用于记录调用日志、排除有XSS威胁的字符、执行权限验证等等。Spring Boot自动添加了OrderedCharacterEncodingFilter和HiddenHttpMethodFilter,并且我们可以自定义Filter。</p><p>两个步骤：</p><ol><li>实现Filter接口，实现Filter方法；</li><li>添加<code>@Configuration</code> 注解，将自定义的Filter加入过滤链；</li></ol><p>ok，直接上代码</p><p>WebConfiguration.java</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebConfiguration</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RemoteIpFilter <span class=\"title\">remoteIpFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RemoteIpFilter();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title\">filterRegistrationBean</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        FilterRegistrationBean registrationBean = <span class=\"keyword\">new</span> FilterRegistrationBean();</span><br><span class=\"line\">        registrationBean.setFilter(<span class=\"keyword\">new</span> MyFilter());</span><br><span class=\"line\">        registrationBean.addUrlPatterns(<span class=\"string\">\"/*\"</span>);</span><br><span class=\"line\">        registrationBean.addInitParameter(<span class=\"string\">\"paramName\"</span>,<span class=\"string\">\"paramValue\"</span>);</span><br><span class=\"line\">        registrationBean.setName(<span class=\"string\">\"MyFilter\"</span>);</span><br><span class=\"line\">        registrationBean.setOrder(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> registrationBean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>MyFilter.java</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        HttpServletRequest request = (HttpServletRequest) servletRequest;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this is MyFilter，url：\"</span> + request.getRequestURI());</span><br><span class=\"line\">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id=\"自定义Property\"><a href=\"#自定义Property\" class=\"headerlink\" title=\"自定义Property\"></a>自定义Property</h2><p>在Web开发中，我们经常需要自定义一些配置文件，如何使用呢?</p><p><strong>配置在application.properties中</strong></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.example.title=SnailDev&apos;s Blog</span><br><span class=\"line\">com.example.description=Coding is everything in my life.</span><br></pre></td></tr></table></figure><p></p><p>自定义配置类</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleProperties</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;com.example.title&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String title;</span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;com.example.description&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String description;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//省略getter settet方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure><p></p><p><strong>log配置</strong> 配置输出的地址和输出的级别</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logging.path=/user/local/log</span><br><span class=\"line\">logging.level.com.example=DEBUG</span><br><span class=\"line\">logging.level.org.springframework.web=INFO</span><br><span class=\"line\">logging.level.org.hibernate=ERROR</span><br></pre></td></tr></table></figure><p></p><p>path为本机log地址，logging.level 后面可以根据包路径配置不同资源的log级别</p><h2 id=\"数据库操作\"><a href=\"#数据库操作\" class=\"headerlink\" title=\"数据库操作\"></a>数据库操作</h2><p>在这里我们重点来看一下mysql、spring data jpa的使用，其中mysql就不用说了，大家应该都很熟悉，jpa是利用Hibernate生成各种自动化的sql，如果只是简单的增删改查，基本上不用手写了，spring 内部已经帮我们封装实现了。</p><p>下面简单介绍一下如何在spring boot中简单使用</p><h3 id=\"1-添加相关的jar包依赖\"><a href=\"#1-添加相关的jar包依赖\" class=\"headerlink\" title=\"1. 添加相关的jar包依赖\"></a>1. 添加相关的jar包依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id=\"2-添加配置文件\"><a href=\"#2-添加配置文件\" class=\"headerlink\" title=\"2. 添加配置文件\"></a>2. 添加配置文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.datasource.url=jdbc:mysql://localhost:3306/test</span><br><span class=\"line\">spring.datasource.username=root</span><br><span class=\"line\">spring.datasource.password=123456</span><br><span class=\"line\">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br><span class=\"line\"></span><br><span class=\"line\">spring.jpa.properties.hibernate.hbm2ddl.auto=update</span><br><span class=\"line\">spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect</span><br><span class=\"line\">spring.jpa.show-sql=true</span><br></pre></td></tr></table></figure><p>其实这个hibernate.hbm2ddl.auto参数的作用主要用于：自动创建|更新|验证数据库表结构，有四个值：</p><ol><li>create：每次加载hibernate时都会删除上一次生成的表，然后根据model类再重新生成新表，哪怕两次没有任何改变也会这样执行，这就是导致数据库数据丢失的一个重要原因。</li><li>create-drop：每次加载hibernate时根据model类生成表，但是sessionFactory一关闭，表就自动删除。</li><li>update：最常用的属性，第一次加载hibernate时根据model类会自动建立表的结构（数据库先建好），以后加载hibernate时根据model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会被删除。要留意的是当部署到服务器后，表结构是不会被马上建立ilai的，是要等应用第一次运行起来后才会。</li><li>validate：每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。</li></ol><p><code>dialect</code> 主要是指定生成表名的存储引擎为InneoDB <code>show-sql</code> 是否打印出自动生成的SQL,方便调试的时候查看</p><h3 id=\"3-添加实体类和Dao\"><a href=\"#3-添加实体类和Dao\" class=\"headerlink\" title=\"3. 添加实体类和Dao\"></a>3. 添加实体类和Dao</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>, unique = <span class=\"keyword\">true</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String userName;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String passWord;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>, unique = <span class=\"keyword\">true</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">true</span>, unique = <span class=\"keyword\">true</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String nickName;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String regTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//省略getter settet方法、构造方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>dao只要继承JpaRepository类就可以，几乎可以不用写方法，还有一个特别的功能非常赞，就是根据方法名来自动生成SQL,比如<code>findByUserName</code>，会自动产生一个以<code>userName</code>为参数的查询方法，再比如<code>findAll</code>就会查询表里面的所有数据，再比如自动分页等等。</p><p><strong>Entity中不映射成列的字段得加@Transient注解，不加注解就会映射成列</strong></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserRepository</span> <span class=\"keyword\">extends</span> <span class=\"title\">JpaRepository</span>&lt;<span class=\"title\">User</span>,<span class=\"title\">Long</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">User <span class=\"title\">findByUserName</span><span class=\"params\">(String userName)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">User <span class=\"title\">findByUserNameOrEmail</span><span class=\"params\">(String userName,String email)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id=\"4-测试\"><a href=\"#4-测试\" class=\"headerlink\" title=\"4. 测试\"></a>4. 测试</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserRepositoryTests</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserRepository userRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Date date = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">        DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG);</span><br><span class=\"line\">        String formattedDate = dateFormat.format(date);</span><br><span class=\"line\"></span><br><span class=\"line\">        userRepository.save(<span class=\"keyword\">new</span> User(<span class=\"string\">\"aa1\"</span>, <span class=\"string\">\"aa@gmail.com\"</span>, <span class=\"string\">\"aa\"</span>, <span class=\"string\">\"aa123456\"</span>, formattedDate));</span><br><span class=\"line\">        userRepository.save(<span class=\"keyword\">new</span> User(<span class=\"string\">\"bb1\"</span>, <span class=\"string\">\"bb@gmail.com\"</span>, <span class=\"string\">\"bb\"</span>, <span class=\"string\">\"bb123456\"</span>, formattedDate));</span><br><span class=\"line\">        userRepository.save(<span class=\"keyword\">new</span> User(<span class=\"string\">\"cc1\"</span>, <span class=\"string\">\"cc@gmail.com\"</span>, <span class=\"string\">\"cc\"</span>, <span class=\"string\">\"cc123456\"</span>, formattedDate));</span><br><span class=\"line\"></span><br><span class=\"line\">        Assert.assertEquals(<span class=\"number\">3</span>,userRepository.findAll().size());</span><br><span class=\"line\">        Assert.assertEquals(<span class=\"string\">\"bb\"</span>,userRepository.findByUserNameOrEmail(<span class=\"string\">\"bb\"</span>,<span class=\"string\">\"bb@gmail.com\"</span>).getNickName());</span><br><span class=\"line\">        userRepository.delete(userRepository.findByUserName(<span class=\"string\">\"aa1\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>当然spring data jpa还有很多功能，比如封装好的分页，可以自定义SQL，主从分离等等，等到以后再做细讲。</p><h2 id=\"Thymeleaf模板\"><a href=\"#Thymeleaf模板\" class=\"headerlink\" title=\"Thymeleaf模板\"></a>Thymeleaf模板</h2><p>Spring Boot推荐使用thymeleaf模板来代替jpa,那么thymeleaf模板到底好在哪里呢，让Spring官方来推荐，下面我们来看看</p><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>Thymeleaf是一款用于渲染XML/XHTML/HTML5内容的模板引擎。类似JSP，Velocity，FreeMarker等，它也可以轻易的与Spring MVC等Web框架进行集成作为Web应用的模板引擎。与其它模板引擎相比，<strong>Thymeleaf最大的特点是能够直接在浏览器中打开并正确显示模板页面，而不需要启动整个Web应用</strong>。</p><p>好了，你们可能会觉得已经习惯使用了velocity,freemarker,beetle之类的模板，那么thymeleaf到底好在哪呢？让我们来做个对比： Thymeleaf是与众不同的，因为它使用了自然的模板技术。这意味着Thymeleaf的模板语法并不会破坏文档的结构，模板依旧是有效的XML文档。模板还可以用作工作原型，Thymeleaf会在运行期替换掉静态值。Velocity与FreeMarker则是连续的文本处理器。</p><p>下面的代码示例分别使用Velocity、FreeMarker与Thymeleaf打印出一条消息：</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Velocity: <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>$message<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">FreeMarker: <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>$&#123;message&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">Thymeleaf: <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;message&#125;\"</span>&gt;</span>Hello World!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p><strong>注意，由于Thymeleaf使用了XML DOM解析器，因此它并不适合处理大规模的XML文件。</strong></p><h3 id=\"简单用法\"><a href=\"#简单用法\" class=\"headerlink\" title=\"简单用法\"></a>简单用法</h3><p><strong>URL</strong></p><p>URL在Web应用模板中占据着十分重要的地位，需要特别注意 的是Thymeleaf对于URL的处理是通过语法@{…}来处理的。Thymeleaf支持绝对路径URL:</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;https://www.baidu.com&#125;\"</span>&gt;</span>百度<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p><strong>条件求值</strong></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/login&#125;\"</span> <span class=\"attr\">th:unless</span>=<span class=\"string\">\"$&#123;session.user != null&#125;\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p><strong>for循环</strong></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">th:each</span>=<span class=\"string\">\"prod : $&#123;prods&#125;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;prod.getName()&#125;\"</span>&gt;</span>Onions<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;prod.getPrice()&#125;\"</span>&gt;</span>2.41<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;prod.isInStock&#125; ? #&#123;true&#125; : #&#123;false&#125;\"</span>&gt;</span>yes<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>暂时就列这几个</p><h3 id=\"页面即原型\"><a href=\"#页面即原型\" class=\"headerlink\" title=\"页面即原型\"></a>页面即原型</h3><p>在Web开发过程中一个绕不开的话题就是前端工程师与后端工程师的协作，在传统Java Web开发过程中，前端工程师和后端工程师一样，也需要安装一套完整的开发环境，然后各类Java IDE中修改模板、静态资源文件，启动/重启/重新加载应用服务器，刷新页面查看最终效果。</p><p>但实际上前端工程师的职责更多应该关注于页面本身而非后端，使用JSP，Velocity等传统的Java模板引擎很难做到这一点，因为它们必须在应用服务器中渲染完成后才能在浏览器中看到结果，而Thymeleaf从根本上颠覆了这一过程，通过属性进行模板渲染不会引入任何新的浏览器不能识别的标签，例如JSP中的，不会在Tag内部写表达式。整个页面直接作为HTML文件用浏览器打开，几乎就可以看到最终的效果，这大大解放了前端工程师的生产力，它们的最终交付物就是纯的HTML/CSS/JavaScript文件。</p><h2 id=\"WebJars\"><a href=\"#WebJars\" class=\"headerlink\" title=\"WebJars\"></a>WebJars</h2><p>WebJars是一个很神奇的东西，可以让我们以jar包的形式来使用前端的各种框架和组件。</p><h3 id=\"什么是Webjars\"><a href=\"#什么是Webjars\" class=\"headerlink\" title=\"什么是Webjars\"></a>什么是Webjars</h3><p>什么是WebJars？WebJars是将客户端（浏览器）资源（JavaScript，Css等）打成jar包文件，以对资源进行统一依赖管理。WebJars的jar包部署在Maven中央仓库上。</p><h3 id=\"为什么使用\"><a href=\"#为什么使用\" class=\"headerlink\" title=\"为什么使用\"></a>为什么使用</h3><p>我们在开发Java web项目的时候会使用像Maven，Gradle等构建工具以实现对jar包版本依赖管理，以及项目的自动化管理，但是对于JavaScript，Css等前端资源包，我们只能采用拷贝到webapp下的方式，这样做就无法对这些资源进行依赖管理。那么WebJars就提供给我们这些前端资源的jar包形势，我们就可以进行依赖管理。</p><h3 id=\"怎样使用\"><a href=\"#怎样使用\" class=\"headerlink\" title=\"怎样使用\"></a>怎样使用</h3><ol><li><p><a href=\"https://www.webjars.org/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">WebJars官网</a>查找对应的组件，比如Bootstrap.js</p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.webjars.bower<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>bootstrap<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.3.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在页面引入</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/webjars/bootstrap/3.3.6/dist/css/bootstrap.css&#125;\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">link</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>就可以正常使用了。</p>","site":{"data":{}},"excerpt":"<p><img src=\"/images/spring-springboot-1.jpg\" alt=\"spring-springboot-web\"></p><p>Spring Boot Web开发非常的简单，其中包括常用的json输出、filters、property、log等。","more":"</p><h2 id=\"接口开发\"><a href=\"#接口开发\" class=\"headerlink\" title=\"接口开发\"></a>接口开发</h2><p>在以前的spring开发的时候需要我们提供json接口的时候需要做以下配置：</p><ol><li>添加jackon等相关jar包</li><li>配置spring controller扫描</li><li>对接的方法添加@ResponseBody</li></ol><p>就这样我们会经常由于配置问题，导致406错误等等，那么spring boot是如何做的呢，只需要给Controller类添加<code>@RestController</code> 注解即可，那么默认类中的方法都会以json的格式返回。</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorldController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/getUser\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUser</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        User user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">        user.setUserName(<span class=\"string\">\"snaildev\"</span>);</span><br><span class=\"line\">        user.setPassword(<span class=\"string\">\"123456\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>如果我们需要使用页面开发只要使用<code>@Controller</code>，下面会结合模板来说明。</p><h2 id=\"自定义Filter\"><a href=\"#自定义Filter\" class=\"headerlink\" title=\"自定义Filter\"></a>自定义Filter</h2><p>我们常常在项目中会使用filters用于记录调用日志、排除有XSS威胁的字符、执行权限验证等等。Spring Boot自动添加了OrderedCharacterEncodingFilter和HiddenHttpMethodFilter,并且我们可以自定义Filter。</p><p>两个步骤：</p><ol><li>实现Filter接口，实现Filter方法；</li><li>添加<code>@Configuration</code> 注解，将自定义的Filter加入过滤链；</li></ol><p>ok，直接上代码</p><p>WebConfiguration.java</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebConfiguration</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RemoteIpFilter <span class=\"title\">remoteIpFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RemoteIpFilter();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title\">filterRegistrationBean</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        FilterRegistrationBean registrationBean = <span class=\"keyword\">new</span> FilterRegistrationBean();</span><br><span class=\"line\">        registrationBean.setFilter(<span class=\"keyword\">new</span> MyFilter());</span><br><span class=\"line\">        registrationBean.addUrlPatterns(<span class=\"string\">\"/*\"</span>);</span><br><span class=\"line\">        registrationBean.addInitParameter(<span class=\"string\">\"paramName\"</span>,<span class=\"string\">\"paramValue\"</span>);</span><br><span class=\"line\">        registrationBean.setName(<span class=\"string\">\"MyFilter\"</span>);</span><br><span class=\"line\">        registrationBean.setOrder(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> registrationBean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>MyFilter.java</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        HttpServletRequest request = (HttpServletRequest) servletRequest;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this is MyFilter，url：\"</span> + request.getRequestURI());</span><br><span class=\"line\">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id=\"自定义Property\"><a href=\"#自定义Property\" class=\"headerlink\" title=\"自定义Property\"></a>自定义Property</h2><p>在Web开发中，我们经常需要自定义一些配置文件，如何使用呢?</p><p><strong>配置在application.properties中</strong></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.example.title=SnailDev&apos;s Blog</span><br><span class=\"line\">com.example.description=Coding is everything in my life.</span><br></pre></td></tr></table></figure><p></p><p>自定义配置类</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleProperties</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;com.example.title&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String title;</span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;com.example.description&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String description;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//省略getter settet方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure><p></p><p><strong>log配置</strong> 配置输出的地址和输出的级别</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logging.path=/user/local/log</span><br><span class=\"line\">logging.level.com.example=DEBUG</span><br><span class=\"line\">logging.level.org.springframework.web=INFO</span><br><span class=\"line\">logging.level.org.hibernate=ERROR</span><br></pre></td></tr></table></figure><p></p><p>path为本机log地址，logging.level 后面可以根据包路径配置不同资源的log级别</p><h2 id=\"数据库操作\"><a href=\"#数据库操作\" class=\"headerlink\" title=\"数据库操作\"></a>数据库操作</h2><p>在这里我们重点来看一下mysql、spring data jpa的使用，其中mysql就不用说了，大家应该都很熟悉，jpa是利用Hibernate生成各种自动化的sql，如果只是简单的增删改查，基本上不用手写了，spring 内部已经帮我们封装实现了。</p><p>下面简单介绍一下如何在spring boot中简单使用</p><h3 id=\"1-添加相关的jar包依赖\"><a href=\"#1-添加相关的jar包依赖\" class=\"headerlink\" title=\"1. 添加相关的jar包依赖\"></a>1. 添加相关的jar包依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id=\"2-添加配置文件\"><a href=\"#2-添加配置文件\" class=\"headerlink\" title=\"2. 添加配置文件\"></a>2. 添加配置文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.datasource.url=jdbc:mysql://localhost:3306/test</span><br><span class=\"line\">spring.datasource.username=root</span><br><span class=\"line\">spring.datasource.password=123456</span><br><span class=\"line\">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br><span class=\"line\"></span><br><span class=\"line\">spring.jpa.properties.hibernate.hbm2ddl.auto=update</span><br><span class=\"line\">spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect</span><br><span class=\"line\">spring.jpa.show-sql=true</span><br></pre></td></tr></table></figure><p>其实这个hibernate.hbm2ddl.auto参数的作用主要用于：自动创建|更新|验证数据库表结构，有四个值：</p><ol><li>create：每次加载hibernate时都会删除上一次生成的表，然后根据model类再重新生成新表，哪怕两次没有任何改变也会这样执行，这就是导致数据库数据丢失的一个重要原因。</li><li>create-drop：每次加载hibernate时根据model类生成表，但是sessionFactory一关闭，表就自动删除。</li><li>update：最常用的属性，第一次加载hibernate时根据model类会自动建立表的结构（数据库先建好），以后加载hibernate时根据model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会被删除。要留意的是当部署到服务器后，表结构是不会被马上建立ilai的，是要等应用第一次运行起来后才会。</li><li>validate：每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。</li></ol><p><code>dialect</code> 主要是指定生成表名的存储引擎为InneoDB <code>show-sql</code> 是否打印出自动生成的SQL,方便调试的时候查看</p><h3 id=\"3-添加实体类和Dao\"><a href=\"#3-添加实体类和Dao\" class=\"headerlink\" title=\"3. 添加实体类和Dao\"></a>3. 添加实体类和Dao</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>, unique = <span class=\"keyword\">true</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String userName;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String passWord;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>, unique = <span class=\"keyword\">true</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">true</span>, unique = <span class=\"keyword\">true</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String nickName;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String regTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//省略getter settet方法、构造方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>dao只要继承JpaRepository类就可以，几乎可以不用写方法，还有一个特别的功能非常赞，就是根据方法名来自动生成SQL,比如<code>findByUserName</code>，会自动产生一个以<code>userName</code>为参数的查询方法，再比如<code>findAll</code>就会查询表里面的所有数据，再比如自动分页等等。</p><p><strong>Entity中不映射成列的字段得加@Transient注解，不加注解就会映射成列</strong></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserRepository</span> <span class=\"keyword\">extends</span> <span class=\"title\">JpaRepository</span>&lt;<span class=\"title\">User</span>,<span class=\"title\">Long</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">User <span class=\"title\">findByUserName</span><span class=\"params\">(String userName)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">User <span class=\"title\">findByUserNameOrEmail</span><span class=\"params\">(String userName,String email)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id=\"4-测试\"><a href=\"#4-测试\" class=\"headerlink\" title=\"4. 测试\"></a>4. 测试</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserRepositoryTests</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserRepository userRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Date date = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">        DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG);</span><br><span class=\"line\">        String formattedDate = dateFormat.format(date);</span><br><span class=\"line\"></span><br><span class=\"line\">        userRepository.save(<span class=\"keyword\">new</span> User(<span class=\"string\">\"aa1\"</span>, <span class=\"string\">\"aa@gmail.com\"</span>, <span class=\"string\">\"aa\"</span>, <span class=\"string\">\"aa123456\"</span>, formattedDate));</span><br><span class=\"line\">        userRepository.save(<span class=\"keyword\">new</span> User(<span class=\"string\">\"bb1\"</span>, <span class=\"string\">\"bb@gmail.com\"</span>, <span class=\"string\">\"bb\"</span>, <span class=\"string\">\"bb123456\"</span>, formattedDate));</span><br><span class=\"line\">        userRepository.save(<span class=\"keyword\">new</span> User(<span class=\"string\">\"cc1\"</span>, <span class=\"string\">\"cc@gmail.com\"</span>, <span class=\"string\">\"cc\"</span>, <span class=\"string\">\"cc123456\"</span>, formattedDate));</span><br><span class=\"line\"></span><br><span class=\"line\">        Assert.assertEquals(<span class=\"number\">3</span>,userRepository.findAll().size());</span><br><span class=\"line\">        Assert.assertEquals(<span class=\"string\">\"bb\"</span>,userRepository.findByUserNameOrEmail(<span class=\"string\">\"bb\"</span>,<span class=\"string\">\"bb@gmail.com\"</span>).getNickName());</span><br><span class=\"line\">        userRepository.delete(userRepository.findByUserName(<span class=\"string\">\"aa1\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>当然spring data jpa还有很多功能，比如封装好的分页，可以自定义SQL，主从分离等等，等到以后再做细讲。</p><h2 id=\"Thymeleaf模板\"><a href=\"#Thymeleaf模板\" class=\"headerlink\" title=\"Thymeleaf模板\"></a>Thymeleaf模板</h2><p>Spring Boot推荐使用thymeleaf模板来代替jpa,那么thymeleaf模板到底好在哪里呢，让Spring官方来推荐，下面我们来看看</p><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>Thymeleaf是一款用于渲染XML/XHTML/HTML5内容的模板引擎。类似JSP，Velocity，FreeMarker等，它也可以轻易的与Spring MVC等Web框架进行集成作为Web应用的模板引擎。与其它模板引擎相比，<strong>Thymeleaf最大的特点是能够直接在浏览器中打开并正确显示模板页面，而不需要启动整个Web应用</strong>。</p><p>好了，你们可能会觉得已经习惯使用了velocity,freemarker,beetle之类的模板，那么thymeleaf到底好在哪呢？让我们来做个对比： Thymeleaf是与众不同的，因为它使用了自然的模板技术。这意味着Thymeleaf的模板语法并不会破坏文档的结构，模板依旧是有效的XML文档。模板还可以用作工作原型，Thymeleaf会在运行期替换掉静态值。Velocity与FreeMarker则是连续的文本处理器。</p><p>下面的代码示例分别使用Velocity、FreeMarker与Thymeleaf打印出一条消息：</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Velocity: <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>$message<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">FreeMarker: <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>$&#123;message&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">Thymeleaf: <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;message&#125;\"</span>&gt;</span>Hello World!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p><strong>注意，由于Thymeleaf使用了XML DOM解析器，因此它并不适合处理大规模的XML文件。</strong></p><h3 id=\"简单用法\"><a href=\"#简单用法\" class=\"headerlink\" title=\"简单用法\"></a>简单用法</h3><p><strong>URL</strong></p><p>URL在Web应用模板中占据着十分重要的地位，需要特别注意 的是Thymeleaf对于URL的处理是通过语法@{…}来处理的。Thymeleaf支持绝对路径URL:</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;https://www.baidu.com&#125;\"</span>&gt;</span>百度<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p><strong>条件求值</strong></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/login&#125;\"</span> <span class=\"attr\">th:unless</span>=<span class=\"string\">\"$&#123;session.user != null&#125;\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p><strong>for循环</strong></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">th:each</span>=<span class=\"string\">\"prod : $&#123;prods&#125;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;prod.getName()&#125;\"</span>&gt;</span>Onions<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;prod.getPrice()&#125;\"</span>&gt;</span>2.41<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;prod.isInStock&#125; ? #&#123;true&#125; : #&#123;false&#125;\"</span>&gt;</span>yes<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>暂时就列这几个</p><h3 id=\"页面即原型\"><a href=\"#页面即原型\" class=\"headerlink\" title=\"页面即原型\"></a>页面即原型</h3><p>在Web开发过程中一个绕不开的话题就是前端工程师与后端工程师的协作，在传统Java Web开发过程中，前端工程师和后端工程师一样，也需要安装一套完整的开发环境，然后各类Java IDE中修改模板、静态资源文件，启动/重启/重新加载应用服务器，刷新页面查看最终效果。</p><p>但实际上前端工程师的职责更多应该关注于页面本身而非后端，使用JSP，Velocity等传统的Java模板引擎很难做到这一点，因为它们必须在应用服务器中渲染完成后才能在浏览器中看到结果，而Thymeleaf从根本上颠覆了这一过程，通过属性进行模板渲染不会引入任何新的浏览器不能识别的标签，例如JSP中的，不会在Tag内部写表达式。整个页面直接作为HTML文件用浏览器打开，几乎就可以看到最终的效果，这大大解放了前端工程师的生产力，它们的最终交付物就是纯的HTML/CSS/JavaScript文件。</p><h2 id=\"WebJars\"><a href=\"#WebJars\" class=\"headerlink\" title=\"WebJars\"></a>WebJars</h2><p>WebJars是一个很神奇的东西，可以让我们以jar包的形式来使用前端的各种框架和组件。</p><h3 id=\"什么是Webjars\"><a href=\"#什么是Webjars\" class=\"headerlink\" title=\"什么是Webjars\"></a>什么是Webjars</h3><p>什么是WebJars？WebJars是将客户端（浏览器）资源（JavaScript，Css等）打成jar包文件，以对资源进行统一依赖管理。WebJars的jar包部署在Maven中央仓库上。</p><h3 id=\"为什么使用\"><a href=\"#为什么使用\" class=\"headerlink\" title=\"为什么使用\"></a>为什么使用</h3><p>我们在开发Java web项目的时候会使用像Maven，Gradle等构建工具以实现对jar包版本依赖管理，以及项目的自动化管理，但是对于JavaScript，Css等前端资源包，我们只能采用拷贝到webapp下的方式，这样做就无法对这些资源进行依赖管理。那么WebJars就提供给我们这些前端资源的jar包形势，我们就可以进行依赖管理。</p><h3 id=\"怎样使用\"><a href=\"#怎样使用\" class=\"headerlink\" title=\"怎样使用\"></a>怎样使用</h3><ol><li><p><a href=\"https://www.webjars.org/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">WebJars官网</a>查找对应的组件，比如Bootstrap.js</p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.webjars.bower<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>bootstrap<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.3.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在页面引入</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/webjars/bootstrap/3.3.6/dist/css/bootstrap.css&#125;\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">link</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>就可以正常使用了。</p>"},{"title":"java基础（二）封装","author":"SnailDev","date":"2018-06-02T13:42:56.000Z","featured_image":"/images/encapsulation_2.png","_content":"![encapsulation](/images/encapsulation_2.png)\n\n对于面向对象的特点，想必大家应该都可以倒背如流：封装，继承，多态。但很多人对这些特点的理解仅仅停留在表面，认为封装就是变量的私有化，然后对外开放接口，获取和设置值，而不知道为什么要这样做。\n\n封装，简单来说就是将变量私有化，在java里的用的就是private修饰符修饰，这样在外部产生的对象就不能直接访问这个变量。想要外部对象对变量进行访问或操作，就需要在类里面提供外部访问的接口，也就是我们熟知的get和set方法。\n\n以上就是大部分人对于封装的理解。知道有封装这回事，知道怎么用，却不知道为什么要用，甚至觉得多此一举。因为明明person.name就是访问到变量，为什么非要person.getName()呢？\n<!-- more -->\n\n# 1. 任性的使用public\n让我们先来看一下不使用封装的情况：\n\n设计了3个类，人、男人、女人\n\n```java\npublic class Person{\n  public String name;\n  public int age;\n\n  // 省略get和set方法\n}\n\npublic class Man extends Person{\n  public double money;\n  public Woman wife;\n  \n  // 省略get和set方法\n\n  public void marry(Woman woman){\n    this.wife = woman;\n    woman.marry(this);\n  }\n}\n\npublic class Woman extends Person{\n  public Man husband;\n\n  // 省略get和set方法\n\n  public void marry(Man man){\n    this.husband = man;\n  }\n}\n\npublic class Test{\n  public static void main(String[] args){\n    Man man = new Man();\n    man.name = \"snail\";\n    man.age = 30;\n    man.money = 10000;\n\n    Woman woman = new Woman();\n    woman.name = \"lucy\";\n    \n    man.marry(woman);\n\n    System.out.println(man.name + \"的妻子\" + man.wife.name); //snail的妻子：lucy\n    System.out.println(man.name + \"的钱：\" + man.money); //snail的钱：10000.0\n  }\n}\n```\n到这里一切正常，看起来也还不错。\n\n但是这这个时候来了一个小偷，这个小偷呢，除了偷别人的钱和老婆啥都不干。\n```java\npublic class Thief extends Man{\n  private double stealMoney = 0;\n  private List<Woman> women = new ArrayList<Woman>();\n\n  //偷钱\n  public void stealMoney(Man man){\n    stealMoney += man.money;\n    man.money = 0;\n    \n    System.out.println(\"哈哈，偷到钱了...\");\n  }\n\n  //偷老婆\n  public void stealWife(Man man){\n    man.wife.husband = this;\n    women.add(man.wife);\n    \n    Woman woman = new Woman();\n    woman.name = \"凤姐\";\n    man.wife = woman;\n\n    System.out.println(\"哈哈哈，又偷了一个妹子做老婆...\");\n  }\n}\n\npublic class Test{\n  public static void main(String[] args){\n    Man man = new Man();\n    man.name = \"snail\";\n    man.age = 30;\n    man.money = 10000;\n\n    Woman woman = new Woman();\n    woman.name = \"lucy\";\n    \n    man.marry(woman);\n\n    //来了一个小偷\n    Thief thief = new Thief();\n    thief.stealMoney(man);\n    thief.stealWife(man);\n\n    System.out.println(man.name + \"的妻子\" + man.wife.name); //snail的妻子：凤姐\n    System.out.println(man.name + \"的钱：\" + man.money); //snail的钱：0.0\n  }\n}\n```\n现在傻眼了，钱和老婆都成别人的了，自己还莫名其妙的和凤姐结了婚...\n\n这时，你觉得是时候改变一下了！！！\n# 2. 封装来报到\n封装觉得你有点惨，于是过来帮助你一下：\n```java\npublic class PackagePerson{\n  private String name;\n  private int age;\n\n  // 省略get和set方法\n}\n\npublic class PackageMan extends PackagePerson{\n  private PackageWoman wife;\n  private double money;\n\n  public PackageMan(String name, double money){\n    this.setName(name);\n    this.money = money;\n  }\n\n  public void marry(PackageWoman woman){\n    this.wife = woman;\n    woman.marry(this);\n  }\n\n  public PackageWoman getWife(){\n    return wife;\n  }\n\n  public double getMoney(){\n    return money;\n  }\n}\n\npublic class PackageWoman extends PackagePerson{\n  private PackageMan husband;\n\n  public PackageWoman(String name){\n    this.setName(name);\n  }\n\n  public void marry(PackageMan man){\n    this.husband = husband;\n  }\n\n  public PackageMan getHusband(){\n    return husband;\n  }\n}\n\npublic class TestPackage{\n  public static void main(String[] args){\n    PackageMan man = new PackageMan(\"snail\", 10000);\n    PackageWoman woman = new PackageWoman(\"lucy\");\n    \n    man.marry(woman);\n\n    System.out.println(man.getName() + \"的妻子\" + man.getWife().getName()); //snail的妻子：lucy\n    System.out.println(man.getName() + \"的钱：\" + man.getMoney()); //snail的钱：10000.0\n  }\n}\n```\n\n上面的代码看起来除了长了点，没什么其他问题。这时候小偷已经不能偷我们的钱和老婆了，钱和老婆都被保护了起来，以至于我们自己想设置和更换都不行了，这明显不太科学...\n\n# 3. 封装厉害的地方\n如何解决上面的问题呢？私有化外部访问不到，自己也没法改数据，提供了set方法又会让所有人都能改，和不私有设计没什么区别，好纠结。\n\nWait，这里说的“所有人”真的是所有人吗？\n\n让我们来看看：\n```java\npublic void setMoney(PackageMan man, double money){\n  if(man == this){\n    this.money = money;\n  }else{\n    System.out.println(\"喂，110吗？\" + man.getName() + \" 抢钱！\");\n  }\n}\n\npublic class TestPackage{\n  public static void main(String[] args){\n    PackageMan man = new PackageMan(\"snail\", 10000);\n    PackageMan man1 = new PackageMan(\"thief\", 10000);\n\n    man.setMoney(man, 20000);\n    System.out.println(man.getName() + \"的钱：\" + man.getMoney()); //snail的钱：20000.0\n\n    man.setMoney(man1, 0); //喂，110吗？thief 抢钱！\n  }\n}\n```\n\n这样就只有自己可以修改了，别人不可以。\n\n但是你老婆不满意了，凭什么只有你自己可以改？我也想改！\n\n这种需求还是应该满足一下的，怎么做呢？\n```java\npublic void setMoney(Object obj, double money){\n  if(obj == this || obj == this.wife){\n    this.money = money;\n  }else{\n    System.out.println(\"喂，110吗？有人抢钱！\");\n  }\n}\n```\n\n# 4. 总结一下\n以上就是对面向对象中的封装的理解，封装不仅仅只是 private + getter and setter。使用封装可以对setter进行更深层次的定制，我们可以对可以执行的setter方法的对象做规定，也可以对数据操作要求，还可以做类型转换等一系列可以想到的。\n\n使用封装不仅仅是安全，更可以简化操作。不要觉得用了封装多了好多代码，看起来乱糟糟的。如果你写一个大系统，一开始你可能这样定义属性的\n```java\npublic int age;\n```\n你的程序里大概有100处这样的语句：\n```java\np.age = 10;\n```\n这个时候，突然有需求要求把数据类型变了，改成：\n```java\npublic String age;\n```\n那么重构代码是不是要把那100处数据都加个双引号呢？是不是特别麻烦？\n\n但是如果用了封装，只需要这样：\n```java\npublic void setAge(int age){\n  this.age = String.valueOf(age);\n}\n```\n是不是简化了操作？\n\n这里只是举个栗子，实际开发中也不会出现改变数据类型这么操蛋的事...\n\n封装还有一个好处就是模块化。当你参与一个很多人实现的大型系统中，不可能知道所有的类是怎样实现的。只需要知道这个类提供了哪些方法，需要传入什么数据，能得到什么样的结果。至于怎么得到的，关我X事？\n\n所以说，如果你写的代码还没用封装，改过来吧。不仅仅因为大家都在用，而是这确实可以给我们提供很大的便利。\n封装的有以下四大好处：\n  1. 良好的封装能够减少耦合\n  2. 类内部的结构可以自由修改\n  3. 可以对成员进行更精确的控制\n  4. 隐藏信息和实现细节","source":"_posts/java-base-object-oriented-encapsulation.md","raw":"---\ntitle: java基础（二）封装\nauthor: SnailDev\ntags:\n  - Java基础\ncategories:\n  - Java基础\ndate: 2018-06-02 21:42:56\nfeatured_image: /images/encapsulation_2.png\n---\n![encapsulation](/images/encapsulation_2.png)\n\n对于面向对象的特点，想必大家应该都可以倒背如流：封装，继承，多态。但很多人对这些特点的理解仅仅停留在表面，认为封装就是变量的私有化，然后对外开放接口，获取和设置值，而不知道为什么要这样做。\n\n封装，简单来说就是将变量私有化，在java里的用的就是private修饰符修饰，这样在外部产生的对象就不能直接访问这个变量。想要外部对象对变量进行访问或操作，就需要在类里面提供外部访问的接口，也就是我们熟知的get和set方法。\n\n以上就是大部分人对于封装的理解。知道有封装这回事，知道怎么用，却不知道为什么要用，甚至觉得多此一举。因为明明person.name就是访问到变量，为什么非要person.getName()呢？\n<!-- more -->\n\n# 1. 任性的使用public\n让我们先来看一下不使用封装的情况：\n\n设计了3个类，人、男人、女人\n\n```java\npublic class Person{\n  public String name;\n  public int age;\n\n  // 省略get和set方法\n}\n\npublic class Man extends Person{\n  public double money;\n  public Woman wife;\n  \n  // 省略get和set方法\n\n  public void marry(Woman woman){\n    this.wife = woman;\n    woman.marry(this);\n  }\n}\n\npublic class Woman extends Person{\n  public Man husband;\n\n  // 省略get和set方法\n\n  public void marry(Man man){\n    this.husband = man;\n  }\n}\n\npublic class Test{\n  public static void main(String[] args){\n    Man man = new Man();\n    man.name = \"snail\";\n    man.age = 30;\n    man.money = 10000;\n\n    Woman woman = new Woman();\n    woman.name = \"lucy\";\n    \n    man.marry(woman);\n\n    System.out.println(man.name + \"的妻子\" + man.wife.name); //snail的妻子：lucy\n    System.out.println(man.name + \"的钱：\" + man.money); //snail的钱：10000.0\n  }\n}\n```\n到这里一切正常，看起来也还不错。\n\n但是这这个时候来了一个小偷，这个小偷呢，除了偷别人的钱和老婆啥都不干。\n```java\npublic class Thief extends Man{\n  private double stealMoney = 0;\n  private List<Woman> women = new ArrayList<Woman>();\n\n  //偷钱\n  public void stealMoney(Man man){\n    stealMoney += man.money;\n    man.money = 0;\n    \n    System.out.println(\"哈哈，偷到钱了...\");\n  }\n\n  //偷老婆\n  public void stealWife(Man man){\n    man.wife.husband = this;\n    women.add(man.wife);\n    \n    Woman woman = new Woman();\n    woman.name = \"凤姐\";\n    man.wife = woman;\n\n    System.out.println(\"哈哈哈，又偷了一个妹子做老婆...\");\n  }\n}\n\npublic class Test{\n  public static void main(String[] args){\n    Man man = new Man();\n    man.name = \"snail\";\n    man.age = 30;\n    man.money = 10000;\n\n    Woman woman = new Woman();\n    woman.name = \"lucy\";\n    \n    man.marry(woman);\n\n    //来了一个小偷\n    Thief thief = new Thief();\n    thief.stealMoney(man);\n    thief.stealWife(man);\n\n    System.out.println(man.name + \"的妻子\" + man.wife.name); //snail的妻子：凤姐\n    System.out.println(man.name + \"的钱：\" + man.money); //snail的钱：0.0\n  }\n}\n```\n现在傻眼了，钱和老婆都成别人的了，自己还莫名其妙的和凤姐结了婚...\n\n这时，你觉得是时候改变一下了！！！\n# 2. 封装来报到\n封装觉得你有点惨，于是过来帮助你一下：\n```java\npublic class PackagePerson{\n  private String name;\n  private int age;\n\n  // 省略get和set方法\n}\n\npublic class PackageMan extends PackagePerson{\n  private PackageWoman wife;\n  private double money;\n\n  public PackageMan(String name, double money){\n    this.setName(name);\n    this.money = money;\n  }\n\n  public void marry(PackageWoman woman){\n    this.wife = woman;\n    woman.marry(this);\n  }\n\n  public PackageWoman getWife(){\n    return wife;\n  }\n\n  public double getMoney(){\n    return money;\n  }\n}\n\npublic class PackageWoman extends PackagePerson{\n  private PackageMan husband;\n\n  public PackageWoman(String name){\n    this.setName(name);\n  }\n\n  public void marry(PackageMan man){\n    this.husband = husband;\n  }\n\n  public PackageMan getHusband(){\n    return husband;\n  }\n}\n\npublic class TestPackage{\n  public static void main(String[] args){\n    PackageMan man = new PackageMan(\"snail\", 10000);\n    PackageWoman woman = new PackageWoman(\"lucy\");\n    \n    man.marry(woman);\n\n    System.out.println(man.getName() + \"的妻子\" + man.getWife().getName()); //snail的妻子：lucy\n    System.out.println(man.getName() + \"的钱：\" + man.getMoney()); //snail的钱：10000.0\n  }\n}\n```\n\n上面的代码看起来除了长了点，没什么其他问题。这时候小偷已经不能偷我们的钱和老婆了，钱和老婆都被保护了起来，以至于我们自己想设置和更换都不行了，这明显不太科学...\n\n# 3. 封装厉害的地方\n如何解决上面的问题呢？私有化外部访问不到，自己也没法改数据，提供了set方法又会让所有人都能改，和不私有设计没什么区别，好纠结。\n\nWait，这里说的“所有人”真的是所有人吗？\n\n让我们来看看：\n```java\npublic void setMoney(PackageMan man, double money){\n  if(man == this){\n    this.money = money;\n  }else{\n    System.out.println(\"喂，110吗？\" + man.getName() + \" 抢钱！\");\n  }\n}\n\npublic class TestPackage{\n  public static void main(String[] args){\n    PackageMan man = new PackageMan(\"snail\", 10000);\n    PackageMan man1 = new PackageMan(\"thief\", 10000);\n\n    man.setMoney(man, 20000);\n    System.out.println(man.getName() + \"的钱：\" + man.getMoney()); //snail的钱：20000.0\n\n    man.setMoney(man1, 0); //喂，110吗？thief 抢钱！\n  }\n}\n```\n\n这样就只有自己可以修改了，别人不可以。\n\n但是你老婆不满意了，凭什么只有你自己可以改？我也想改！\n\n这种需求还是应该满足一下的，怎么做呢？\n```java\npublic void setMoney(Object obj, double money){\n  if(obj == this || obj == this.wife){\n    this.money = money;\n  }else{\n    System.out.println(\"喂，110吗？有人抢钱！\");\n  }\n}\n```\n\n# 4. 总结一下\n以上就是对面向对象中的封装的理解，封装不仅仅只是 private + getter and setter。使用封装可以对setter进行更深层次的定制，我们可以对可以执行的setter方法的对象做规定，也可以对数据操作要求，还可以做类型转换等一系列可以想到的。\n\n使用封装不仅仅是安全，更可以简化操作。不要觉得用了封装多了好多代码，看起来乱糟糟的。如果你写一个大系统，一开始你可能这样定义属性的\n```java\npublic int age;\n```\n你的程序里大概有100处这样的语句：\n```java\np.age = 10;\n```\n这个时候，突然有需求要求把数据类型变了，改成：\n```java\npublic String age;\n```\n那么重构代码是不是要把那100处数据都加个双引号呢？是不是特别麻烦？\n\n但是如果用了封装，只需要这样：\n```java\npublic void setAge(int age){\n  this.age = String.valueOf(age);\n}\n```\n是不是简化了操作？\n\n这里只是举个栗子，实际开发中也不会出现改变数据类型这么操蛋的事...\n\n封装还有一个好处就是模块化。当你参与一个很多人实现的大型系统中，不可能知道所有的类是怎样实现的。只需要知道这个类提供了哪些方法，需要传入什么数据，能得到什么样的结果。至于怎么得到的，关我X事？\n\n所以说，如果你写的代码还没用封装，改过来吧。不仅仅因为大家都在用，而是这确实可以给我们提供很大的便利。\n封装的有以下四大好处：\n  1. 良好的封装能够减少耦合\n  2. 类内部的结构可以自由修改\n  3. 可以对成员进行更精确的控制\n  4. 隐藏信息和实现细节","slug":"java-base-object-oriented-encapsulation","published":1,"updated":"2018-10-03T05:12:05.467Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmyu0sc60016x8uoj8xbbi3v","content":"<p><img src=\"/images/encapsulation_2.png\" alt=\"encapsulation\"></p><p>对于面向对象的特点，想必大家应该都可以倒背如流：封装，继承，多态。但很多人对这些特点的理解仅仅停留在表面，认为封装就是变量的私有化，然后对外开放接口，获取和设置值，而不知道为什么要这样做。</p><p>封装，简单来说就是将变量私有化，在java里的用的就是private修饰符修饰，这样在外部产生的对象就不能直接访问这个变量。想要外部对象对变量进行访问或操作，就需要在类里面提供外部访问的接口，也就是我们熟知的get和set方法。</p><p>以上就是大部分人对于封装的理解。知道有封装这回事，知道怎么用，却不知道为什么要用，甚至觉得多此一举。因为明明person.name就是访问到变量，为什么非要person.getName()呢？<a id=\"more\"></a></p><h1 id=\"1-任性的使用public\"><a href=\"#1-任性的使用public\" class=\"headerlink\" title=\"1. 任性的使用public\"></a>1. 任性的使用public</h1><p>让我们先来看一下不使用封装的情况：</p><p>设计了3个类，人、男人、女人</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 省略get和set方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">double</span> money;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> Woman wife;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 省略get和set方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">marry</span><span class=\"params\">(Woman woman)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.wife = woman;</span><br><span class=\"line\">    woman.marry(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Woman</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> Man husband;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 省略get和set方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">marry</span><span class=\"params\">(Man man)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.husband = man;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    Man man = <span class=\"keyword\">new</span> Man();</span><br><span class=\"line\">    man.name = <span class=\"string\">\"snail\"</span>;</span><br><span class=\"line\">    man.age = <span class=\"number\">30</span>;</span><br><span class=\"line\">    man.money = <span class=\"number\">10000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Woman woman = <span class=\"keyword\">new</span> Woman();</span><br><span class=\"line\">    woman.name = <span class=\"string\">\"lucy\"</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    man.marry(woman);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(man.name + <span class=\"string\">\"的妻子\"</span> + man.wife.name); <span class=\"comment\">//snail的妻子：lucy</span></span><br><span class=\"line\">    System.out.println(man.name + <span class=\"string\">\"的钱：\"</span> + man.money); <span class=\"comment\">//snail的钱：10000.0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>到这里一切正常，看起来也还不错。</p><p>但是这这个时候来了一个小偷，这个小偷呢，除了偷别人的钱和老婆啥都不干。</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Thief</span> <span class=\"keyword\">extends</span> <span class=\"title\">Man</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> stealMoney = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> List&lt;Woman&gt; women = <span class=\"keyword\">new</span> ArrayList&lt;Woman&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//偷钱</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stealMoney</span><span class=\"params\">(Man man)</span></span>&#123;</span><br><span class=\"line\">    stealMoney += man.money;</span><br><span class=\"line\">    man.money = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"哈哈，偷到钱了...\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//偷老婆</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stealWife</span><span class=\"params\">(Man man)</span></span>&#123;</span><br><span class=\"line\">    man.wife.husband = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    women.add(man.wife);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Woman woman = <span class=\"keyword\">new</span> Woman();</span><br><span class=\"line\">    woman.name = <span class=\"string\">\"凤姐\"</span>;</span><br><span class=\"line\">    man.wife = woman;</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"哈哈哈，又偷了一个妹子做老婆...\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    Man man = <span class=\"keyword\">new</span> Man();</span><br><span class=\"line\">    man.name = <span class=\"string\">\"snail\"</span>;</span><br><span class=\"line\">    man.age = <span class=\"number\">30</span>;</span><br><span class=\"line\">    man.money = <span class=\"number\">10000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Woman woman = <span class=\"keyword\">new</span> Woman();</span><br><span class=\"line\">    woman.name = <span class=\"string\">\"lucy\"</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    man.marry(woman);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//来了一个小偷</span></span><br><span class=\"line\">    Thief thief = <span class=\"keyword\">new</span> Thief();</span><br><span class=\"line\">    thief.stealMoney(man);</span><br><span class=\"line\">    thief.stealWife(man);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(man.name + <span class=\"string\">\"的妻子\"</span> + man.wife.name); <span class=\"comment\">//snail的妻子：凤姐</span></span><br><span class=\"line\">    System.out.println(man.name + <span class=\"string\">\"的钱：\"</span> + man.money); <span class=\"comment\">//snail的钱：0.0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>现在傻眼了，钱和老婆都成别人的了，自己还莫名其妙的和凤姐结了婚…</p><p>这时，你觉得是时候改变一下了！！！</p><h1 id=\"2-封装来报到\"><a href=\"#2-封装来报到\" class=\"headerlink\" title=\"2. 封装来报到\"></a>2. 封装来报到</h1><p>封装觉得你有点惨，于是过来帮助你一下：</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PackagePerson</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 省略get和set方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PackageMan</span> <span class=\"keyword\">extends</span> <span class=\"title\">PackagePerson</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> PackageWoman wife;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> money;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PackageMan</span><span class=\"params\">(String name, <span class=\"keyword\">double</span> money)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setName(name);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.money = money;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">marry</span><span class=\"params\">(PackageWoman woman)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.wife = woman;</span><br><span class=\"line\">    woman.marry(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> PackageWoman <span class=\"title\">getWife</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wife;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getMoney</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> money;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PackageWoman</span> <span class=\"keyword\">extends</span> <span class=\"title\">PackagePerson</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> PackageMan husband;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PackageWoman</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setName(name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">marry</span><span class=\"params\">(PackageMan man)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.husband = husband;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> PackageMan <span class=\"title\">getHusband</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> husband;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPackage</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    PackageMan man = <span class=\"keyword\">new</span> PackageMan(<span class=\"string\">\"snail\"</span>, <span class=\"number\">10000</span>);</span><br><span class=\"line\">    PackageWoman woman = <span class=\"keyword\">new</span> PackageWoman(<span class=\"string\">\"lucy\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    man.marry(woman);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(man.getName() + <span class=\"string\">\"的妻子\"</span> + man.getWife().getName()); <span class=\"comment\">//snail的妻子：lucy</span></span><br><span class=\"line\">    System.out.println(man.getName() + <span class=\"string\">\"的钱：\"</span> + man.getMoney()); <span class=\"comment\">//snail的钱：10000.0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面的代码看起来除了长了点，没什么其他问题。这时候小偷已经不能偷我们的钱和老婆了，钱和老婆都被保护了起来，以至于我们自己想设置和更换都不行了，这明显不太科学…</p><h1 id=\"3-封装厉害的地方\"><a href=\"#3-封装厉害的地方\" class=\"headerlink\" title=\"3. 封装厉害的地方\"></a>3. 封装厉害的地方</h1><p>如何解决上面的问题呢？私有化外部访问不到，自己也没法改数据，提供了set方法又会让所有人都能改，和不私有设计没什么区别，好纠结。</p><p>Wait，这里说的“所有人”真的是所有人吗？</p><p>让我们来看看：</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMoney</span><span class=\"params\">(PackageMan man, <span class=\"keyword\">double</span> money)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(man == <span class=\"keyword\">this</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.money = money;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"喂，110吗？\"</span> + man.getName() + <span class=\"string\">\" 抢钱！\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPackage</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    PackageMan man = <span class=\"keyword\">new</span> PackageMan(<span class=\"string\">\"snail\"</span>, <span class=\"number\">10000</span>);</span><br><span class=\"line\">    PackageMan man1 = <span class=\"keyword\">new</span> PackageMan(<span class=\"string\">\"thief\"</span>, <span class=\"number\">10000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    man.setMoney(man, <span class=\"number\">20000</span>);</span><br><span class=\"line\">    System.out.println(man.getName() + <span class=\"string\">\"的钱：\"</span> + man.getMoney()); <span class=\"comment\">//snail的钱：20000.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    man.setMoney(man1, <span class=\"number\">0</span>); <span class=\"comment\">//喂，110吗？thief 抢钱！</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这样就只有自己可以修改了，别人不可以。</p><p>但是你老婆不满意了，凭什么只有你自己可以改？我也想改！</p><p>这种需求还是应该满足一下的，怎么做呢？</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMoney</span><span class=\"params\">(Object obj, <span class=\"keyword\">double</span> money)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(obj == <span class=\"keyword\">this</span> || obj == <span class=\"keyword\">this</span>.wife)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.money = money;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"喂，110吗？有人抢钱！\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id=\"4-总结一下\"><a href=\"#4-总结一下\" class=\"headerlink\" title=\"4. 总结一下\"></a>4. 总结一下</h1><p>以上就是对面向对象中的封装的理解，封装不仅仅只是 private + getter and setter。使用封装可以对setter进行更深层次的定制，我们可以对可以执行的setter方法的对象做规定，也可以对数据操作要求，还可以做类型转换等一系列可以想到的。</p><p>使用封装不仅仅是安全，更可以简化操作。不要觉得用了封装多了好多代码，看起来乱糟糟的。如果你写一个大系统，一开始你可能这样定义属性的</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> age;</span><br></pre></td></tr></table></figure><p></p><p>你的程序里大概有100处这样的语句：</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p.age = <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure><p></p><p>这个时候，突然有需求要求把数据类型变了，改成：</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String age;</span><br></pre></td></tr></table></figure><p></p><p>那么重构代码是不是要把那100处数据都加个双引号呢？是不是特别麻烦？</p><p>但是如果用了封装，只需要这样：</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = String.valueOf(age);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>是不是简化了操作？</p><p>这里只是举个栗子，实际开发中也不会出现改变数据类型这么操蛋的事…</p><p>封装还有一个好处就是模块化。当你参与一个很多人实现的大型系统中，不可能知道所有的类是怎样实现的。只需要知道这个类提供了哪些方法，需要传入什么数据，能得到什么样的结果。至于怎么得到的，关我X事？</p><p>所以说，如果你写的代码还没用封装，改过来吧。不仅仅因为大家都在用，而是这确实可以给我们提供很大的便利。 封装的有以下四大好处：</p><ol><li>良好的封装能够减少耦合</li><li>类内部的结构可以自由修改</li><li>可以对成员进行更精确的控制</li><li>隐藏信息和实现细节</li></ol>","site":{"data":{}},"excerpt":"<p><img src=\"/images/encapsulation_2.png\" alt=\"encapsulation\"></p><p>对于面向对象的特点，想必大家应该都可以倒背如流：封装，继承，多态。但很多人对这些特点的理解仅仅停留在表面，认为封装就是变量的私有化，然后对外开放接口，获取和设置值，而不知道为什么要这样做。</p><p>封装，简单来说就是将变量私有化，在java里的用的就是private修饰符修饰，这样在外部产生的对象就不能直接访问这个变量。想要外部对象对变量进行访问或操作，就需要在类里面提供外部访问的接口，也就是我们熟知的get和set方法。</p><p>以上就是大部分人对于封装的理解。知道有封装这回事，知道怎么用，却不知道为什么要用，甚至觉得多此一举。因为明明person.name就是访问到变量，为什么非要person.getName()呢？","more":"</p><h1 id=\"1-任性的使用public\"><a href=\"#1-任性的使用public\" class=\"headerlink\" title=\"1. 任性的使用public\"></a>1. 任性的使用public</h1><p>让我们先来看一下不使用封装的情况：</p><p>设计了3个类，人、男人、女人</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 省略get和set方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">double</span> money;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> Woman wife;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 省略get和set方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">marry</span><span class=\"params\">(Woman woman)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.wife = woman;</span><br><span class=\"line\">    woman.marry(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Woman</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> Man husband;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 省略get和set方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">marry</span><span class=\"params\">(Man man)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.husband = man;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    Man man = <span class=\"keyword\">new</span> Man();</span><br><span class=\"line\">    man.name = <span class=\"string\">\"snail\"</span>;</span><br><span class=\"line\">    man.age = <span class=\"number\">30</span>;</span><br><span class=\"line\">    man.money = <span class=\"number\">10000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Woman woman = <span class=\"keyword\">new</span> Woman();</span><br><span class=\"line\">    woman.name = <span class=\"string\">\"lucy\"</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    man.marry(woman);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(man.name + <span class=\"string\">\"的妻子\"</span> + man.wife.name); <span class=\"comment\">//snail的妻子：lucy</span></span><br><span class=\"line\">    System.out.println(man.name + <span class=\"string\">\"的钱：\"</span> + man.money); <span class=\"comment\">//snail的钱：10000.0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>到这里一切正常，看起来也还不错。</p><p>但是这这个时候来了一个小偷，这个小偷呢，除了偷别人的钱和老婆啥都不干。</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Thief</span> <span class=\"keyword\">extends</span> <span class=\"title\">Man</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> stealMoney = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> List&lt;Woman&gt; women = <span class=\"keyword\">new</span> ArrayList&lt;Woman&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//偷钱</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stealMoney</span><span class=\"params\">(Man man)</span></span>&#123;</span><br><span class=\"line\">    stealMoney += man.money;</span><br><span class=\"line\">    man.money = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"哈哈，偷到钱了...\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//偷老婆</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stealWife</span><span class=\"params\">(Man man)</span></span>&#123;</span><br><span class=\"line\">    man.wife.husband = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    women.add(man.wife);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Woman woman = <span class=\"keyword\">new</span> Woman();</span><br><span class=\"line\">    woman.name = <span class=\"string\">\"凤姐\"</span>;</span><br><span class=\"line\">    man.wife = woman;</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"哈哈哈，又偷了一个妹子做老婆...\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    Man man = <span class=\"keyword\">new</span> Man();</span><br><span class=\"line\">    man.name = <span class=\"string\">\"snail\"</span>;</span><br><span class=\"line\">    man.age = <span class=\"number\">30</span>;</span><br><span class=\"line\">    man.money = <span class=\"number\">10000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Woman woman = <span class=\"keyword\">new</span> Woman();</span><br><span class=\"line\">    woman.name = <span class=\"string\">\"lucy\"</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    man.marry(woman);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//来了一个小偷</span></span><br><span class=\"line\">    Thief thief = <span class=\"keyword\">new</span> Thief();</span><br><span class=\"line\">    thief.stealMoney(man);</span><br><span class=\"line\">    thief.stealWife(man);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(man.name + <span class=\"string\">\"的妻子\"</span> + man.wife.name); <span class=\"comment\">//snail的妻子：凤姐</span></span><br><span class=\"line\">    System.out.println(man.name + <span class=\"string\">\"的钱：\"</span> + man.money); <span class=\"comment\">//snail的钱：0.0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>现在傻眼了，钱和老婆都成别人的了，自己还莫名其妙的和凤姐结了婚…</p><p>这时，你觉得是时候改变一下了！！！</p><h1 id=\"2-封装来报到\"><a href=\"#2-封装来报到\" class=\"headerlink\" title=\"2. 封装来报到\"></a>2. 封装来报到</h1><p>封装觉得你有点惨，于是过来帮助你一下：</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PackagePerson</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 省略get和set方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PackageMan</span> <span class=\"keyword\">extends</span> <span class=\"title\">PackagePerson</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> PackageWoman wife;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> money;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PackageMan</span><span class=\"params\">(String name, <span class=\"keyword\">double</span> money)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setName(name);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.money = money;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">marry</span><span class=\"params\">(PackageWoman woman)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.wife = woman;</span><br><span class=\"line\">    woman.marry(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> PackageWoman <span class=\"title\">getWife</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wife;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getMoney</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> money;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PackageWoman</span> <span class=\"keyword\">extends</span> <span class=\"title\">PackagePerson</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> PackageMan husband;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PackageWoman</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setName(name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">marry</span><span class=\"params\">(PackageMan man)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.husband = husband;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> PackageMan <span class=\"title\">getHusband</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> husband;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPackage</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    PackageMan man = <span class=\"keyword\">new</span> PackageMan(<span class=\"string\">\"snail\"</span>, <span class=\"number\">10000</span>);</span><br><span class=\"line\">    PackageWoman woman = <span class=\"keyword\">new</span> PackageWoman(<span class=\"string\">\"lucy\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    man.marry(woman);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(man.getName() + <span class=\"string\">\"的妻子\"</span> + man.getWife().getName()); <span class=\"comment\">//snail的妻子：lucy</span></span><br><span class=\"line\">    System.out.println(man.getName() + <span class=\"string\">\"的钱：\"</span> + man.getMoney()); <span class=\"comment\">//snail的钱：10000.0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面的代码看起来除了长了点，没什么其他问题。这时候小偷已经不能偷我们的钱和老婆了，钱和老婆都被保护了起来，以至于我们自己想设置和更换都不行了，这明显不太科学…</p><h1 id=\"3-封装厉害的地方\"><a href=\"#3-封装厉害的地方\" class=\"headerlink\" title=\"3. 封装厉害的地方\"></a>3. 封装厉害的地方</h1><p>如何解决上面的问题呢？私有化外部访问不到，自己也没法改数据，提供了set方法又会让所有人都能改，和不私有设计没什么区别，好纠结。</p><p>Wait，这里说的“所有人”真的是所有人吗？</p><p>让我们来看看：</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMoney</span><span class=\"params\">(PackageMan man, <span class=\"keyword\">double</span> money)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(man == <span class=\"keyword\">this</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.money = money;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"喂，110吗？\"</span> + man.getName() + <span class=\"string\">\" 抢钱！\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPackage</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    PackageMan man = <span class=\"keyword\">new</span> PackageMan(<span class=\"string\">\"snail\"</span>, <span class=\"number\">10000</span>);</span><br><span class=\"line\">    PackageMan man1 = <span class=\"keyword\">new</span> PackageMan(<span class=\"string\">\"thief\"</span>, <span class=\"number\">10000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    man.setMoney(man, <span class=\"number\">20000</span>);</span><br><span class=\"line\">    System.out.println(man.getName() + <span class=\"string\">\"的钱：\"</span> + man.getMoney()); <span class=\"comment\">//snail的钱：20000.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    man.setMoney(man1, <span class=\"number\">0</span>); <span class=\"comment\">//喂，110吗？thief 抢钱！</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这样就只有自己可以修改了，别人不可以。</p><p>但是你老婆不满意了，凭什么只有你自己可以改？我也想改！</p><p>这种需求还是应该满足一下的，怎么做呢？</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMoney</span><span class=\"params\">(Object obj, <span class=\"keyword\">double</span> money)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(obj == <span class=\"keyword\">this</span> || obj == <span class=\"keyword\">this</span>.wife)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.money = money;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"喂，110吗？有人抢钱！\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id=\"4-总结一下\"><a href=\"#4-总结一下\" class=\"headerlink\" title=\"4. 总结一下\"></a>4. 总结一下</h1><p>以上就是对面向对象中的封装的理解，封装不仅仅只是 private + getter and setter。使用封装可以对setter进行更深层次的定制，我们可以对可以执行的setter方法的对象做规定，也可以对数据操作要求，还可以做类型转换等一系列可以想到的。</p><p>使用封装不仅仅是安全，更可以简化操作。不要觉得用了封装多了好多代码，看起来乱糟糟的。如果你写一个大系统，一开始你可能这样定义属性的</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> age;</span><br></pre></td></tr></table></figure><p></p><p>你的程序里大概有100处这样的语句：</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p.age = <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure><p></p><p>这个时候，突然有需求要求把数据类型变了，改成：</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String age;</span><br></pre></td></tr></table></figure><p></p><p>那么重构代码是不是要把那100处数据都加个双引号呢？是不是特别麻烦？</p><p>但是如果用了封装，只需要这样：</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = String.valueOf(age);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>是不是简化了操作？</p><p>这里只是举个栗子，实际开发中也不会出现改变数据类型这么操蛋的事…</p><p>封装还有一个好处就是模块化。当你参与一个很多人实现的大型系统中，不可能知道所有的类是怎样实现的。只需要知道这个类提供了哪些方法，需要传入什么数据，能得到什么样的结果。至于怎么得到的，关我X事？</p><p>所以说，如果你写的代码还没用封装，改过来吧。不仅仅因为大家都在用，而是这确实可以给我们提供很大的便利。 封装的有以下四大好处：</p><ol><li>良好的封装能够减少耦合</li><li>类内部的结构可以自由修改</li><li>可以对成员进行更精确的控制</li><li>隐藏信息和实现细节</li></ol>"},{"title":"SpringBoot实战（三）Redis","author":"SnailDev","date":"2018-09-03T12:32:28.000Z","featured_image":"/images/spring-springboot-1.jpg","_content":"![spring-springboot-redis](/images/spring-springboot-1.jpg)\n\nSpring Boot 对常用的数据库支持外，对nosql数据库也进行了封装自动化，\n<!--more-->\n\n## Redis介绍\nRedis是目前业界使用最广泛的内存数据存储。相比Memcached，Redis支持更丰富的数据结构，例如hashes,lists,sets等，同时支持数据的持久化。除此之外，Redis还提供一些类数据库的特性，比如事务，HA，主从库等。可以说Redis兼具了缓存系统和数据库的一些特性，因此有着丰富的应用场景。本文介绍Redis在Spring Boot中两个典型的应用场景。\n\n## 如何使用\n1. 引入spring-boot-starter-data-redis\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n```\n\n2. 添加redis配置\n```\n#Redis数据库索引（默认为0）\nspring.redis.database=0\n#Redis服务器地址\nspring.redis.host=127.0.0.1\n#Redis服务器连接端口\nspring.redis.port=6379\n#Redis服务器连接密码（默认为空）\nspring.redis.password=\n#Redis连接池最大连接数（使用负值表示没有限制）\nspring.redis.pool.max-active=8\n#Redis连接池最大阻塞等待时间（使用负值表示没有限制）\nspring.redis.pool.max-wait=-1\n#Redis连接池中的最大空闲连接\nspring.redis.pool.max-idle=8\n#Redis连接池中的最小空闲连接\nspring.redis.pool.min-idle=0\n#Redis连接超时时间（毫秒）\nspring.redis.timeout=0\n```\n\n3. 添加cache的配置类\n```java\n@Configuration\n@EnableCaching\npublic class RedisConfig extends CachingConfigurerSupport {\n\n    @Bean\n    @Override\n    public KeyGenerator keyGenerator() {\n        return new KeyGenerator() {\n            @Override\n            public Object generate(Object o, Method method, Object... objects) {\n                StringBuilder sb = new StringBuilder();\n                sb.append(o.getClass().getName());\n                sb.append(method.getName());\n                for (Object obj : objects) {\n                    sb.append(obj.toString());\n                }\n                return sb.toString();\n            }\n        };\n    }\n\n    @Bean\n    @SuppressWarnings(\"rawtypes\")\n    public CacheManager cacheManager(RedisTemplate redisTemplate) {\n        RedisCacheManager rcm = new RedisCacheManager(redisTemplate);\n        // 设置缓存过期时间\n        // rcm.setDefaultExpiration(60); //秒\n\n        return rcm;\n    }\n\n    @Bean\n    public RedisTemplate<String, String> redisTemplate(RedisConnectionFactory factory) {\n        StringRedisTemplate template = new StringRedisTemplate(factory);\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);\n        ObjectMapper om = new ObjectMapper();\n        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\n        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n        jackson2JsonRedisSerializer.setObjectMapper(om);\n        template.setValueSerializer(jackson2JsonRedisSerializer);\n        template.afterPropertiesSet();\n\n        return template;\n    }\n}\n```\n\n4. 好了，接下来我们就可以直接使用了\n```java\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringBootTest\npublic class RedisTests {\n    @Autowired\n    private StringRedisTemplate stringRedisTemplate;\n\n    @Autowired\n    private RedisTemplate redisTemplate;\n\n    @Test\n    public void test() throws Exception {\n        stringRedisTemplate.opsForValue().set(\"aaa\", \"111\");\n        Assert.assertEquals(\"111\", stringRedisTemplate.opsForValue().get(\"aaa\"));\n    }\n\n    @Test\n    public void testObj() throws Exception {\n        User user = new User(\"aa@gmail.com\", \"aa\", \"aa123456\");\n        ValueOperations<String, User> operations = redisTemplate.opsForValue();\n        operations.set(\"com.example\", user);\n        operations.set(\"com.example.timeout\", user, 1, TimeUnit.SECONDS);\n        Thread.sleep(1000);\n\n        boolean exists = redisTemplate.hasKey(\"com.example.timeout\");\n        if (exists) {\n            System.out.println(\"exists is true\");\n        } else {\n            System.out.println(\"exists is false\");\n        }\n    }\n}\n```\n以上都是手动使用的方式，如何在查找数据库的时候自动使用缓存呢，看下面：\n\n5. 自动根据方法生成缓存\n```java\n@RestController\npublic class UserController {\n    @Autowired\n    private UserRepository userRepository;\n\n    @GetMapping(\"/getUser\")\n    @Cacheable(value=\"user-key\")\n    public User getUser(){\n        User user = userRepository.findUserByUserName(\"bb1\");\n        System.out.println(\"若下面没出现“无缓存的时候调用”字样且能打印出数据表示测试成功\");\n\n        return user;\n    }\n}\n```\n其中value的值就是就是缓存到redis中的key。\n\n## 共享Session \nspring boot 整合 spring-session-data-redis\n分布式系统中，session共享有很多的解决方案，其中托管到缓存中应该是最常用的方案之一。\n\n### Spring Session官方说明\nSpring Session provides an API and implementations for managing a user's session information.\n\n### 如何使用\n1. 引入依赖\n```xml\n<!--当@EnableRedisHttpSession注解找不到时引入-->\n<!--<dependency>-->\n    <!--<groupId>org.springframework.session</groupId>-->\n    <!--<artifactId>spring-session</artifactId>-->\n    <!--<version>1.3.3.RELEASE</version>-->\n<!--</dependency>-->\n\n<dependency>\n    <groupId>org.springframework.session</groupId>\n    <artifactId>spring-session-data-redis</artifactId>\n</dependency>\n```\n\n2. Session配置\n```java\n@Configuration\n@EnableRedisHttpSession(maxInactiveIntervalInSeconds = 86400*30)\npublic class SessionConfig {\n\n}\n```\n> maxInactiveIntervalInSeconds: 设置Session失效时间。\n> 使用Redis Session之后，原Boot的server.session.timeout属性不再生效\n\n好了，这样就配置完成了，让我们来测试下\n\n3. 测试\n添加测试方法获取sessionId\n```java\n@GetMapping(\"/uid\")\npublic String uid(HttpSession session) {\n    UUID uid = (UUID) session.getAttribute(\"uid\");\n    if (uid == null) {\n        uid = UUID.randomUUID();\n    }\n    session.setAttribute(\"uid\", uid);\n    return session.getId();\n}\n```\n登录redis输入`keys '*session*'`进行查询\n```\n127.0.0.1:6379> keys '*session*'\n1) \"spring:session:sessions:expires:21099c0b-ae12-4ebc-ac8f-7d2f9baf5cdf\"\n2) \"spring:session:expirations:1541400420000\"\n3) \"spring:session:sessions:21099c0b-ae12-4ebc-ac8f-7d2f9baf5cdf\"\n```\n其中 1541400420000为失效时间，意思是这个时间后session失效，`21099c0b-ae12-4ebc-ac8f-7d2f9baf5cdf` 为sessionId,登录http://localhost:8080/uid 发现会一致，就说明session 已经在redis里面进行有效的管理了。\n\n### 如何在两台或者多台服务器中共享session\n其实就是按照上面的步骤在另一个项目中再次配置一次，启动后就自动进行了session共享。\n\n\n\n\n","source":"_posts/spring-springboot-redis.md","raw":"---\ntitle: SpringBoot实战（三）Redis\nauthor: SnailDev\ntags:\n  - SpringBoot\n  - Redis\ncategories:\n  - SpringBoot\ndate: 2018-09-03 20:32:28\nfeatured_image: /images/spring-springboot-1.jpg\n---\n![spring-springboot-redis](/images/spring-springboot-1.jpg)\n\nSpring Boot 对常用的数据库支持外，对nosql数据库也进行了封装自动化，\n<!--more-->\n\n## Redis介绍\nRedis是目前业界使用最广泛的内存数据存储。相比Memcached，Redis支持更丰富的数据结构，例如hashes,lists,sets等，同时支持数据的持久化。除此之外，Redis还提供一些类数据库的特性，比如事务，HA，主从库等。可以说Redis兼具了缓存系统和数据库的一些特性，因此有着丰富的应用场景。本文介绍Redis在Spring Boot中两个典型的应用场景。\n\n## 如何使用\n1. 引入spring-boot-starter-data-redis\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n```\n\n2. 添加redis配置\n```\n#Redis数据库索引（默认为0）\nspring.redis.database=0\n#Redis服务器地址\nspring.redis.host=127.0.0.1\n#Redis服务器连接端口\nspring.redis.port=6379\n#Redis服务器连接密码（默认为空）\nspring.redis.password=\n#Redis连接池最大连接数（使用负值表示没有限制）\nspring.redis.pool.max-active=8\n#Redis连接池最大阻塞等待时间（使用负值表示没有限制）\nspring.redis.pool.max-wait=-1\n#Redis连接池中的最大空闲连接\nspring.redis.pool.max-idle=8\n#Redis连接池中的最小空闲连接\nspring.redis.pool.min-idle=0\n#Redis连接超时时间（毫秒）\nspring.redis.timeout=0\n```\n\n3. 添加cache的配置类\n```java\n@Configuration\n@EnableCaching\npublic class RedisConfig extends CachingConfigurerSupport {\n\n    @Bean\n    @Override\n    public KeyGenerator keyGenerator() {\n        return new KeyGenerator() {\n            @Override\n            public Object generate(Object o, Method method, Object... objects) {\n                StringBuilder sb = new StringBuilder();\n                sb.append(o.getClass().getName());\n                sb.append(method.getName());\n                for (Object obj : objects) {\n                    sb.append(obj.toString());\n                }\n                return sb.toString();\n            }\n        };\n    }\n\n    @Bean\n    @SuppressWarnings(\"rawtypes\")\n    public CacheManager cacheManager(RedisTemplate redisTemplate) {\n        RedisCacheManager rcm = new RedisCacheManager(redisTemplate);\n        // 设置缓存过期时间\n        // rcm.setDefaultExpiration(60); //秒\n\n        return rcm;\n    }\n\n    @Bean\n    public RedisTemplate<String, String> redisTemplate(RedisConnectionFactory factory) {\n        StringRedisTemplate template = new StringRedisTemplate(factory);\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);\n        ObjectMapper om = new ObjectMapper();\n        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\n        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n        jackson2JsonRedisSerializer.setObjectMapper(om);\n        template.setValueSerializer(jackson2JsonRedisSerializer);\n        template.afterPropertiesSet();\n\n        return template;\n    }\n}\n```\n\n4. 好了，接下来我们就可以直接使用了\n```java\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringBootTest\npublic class RedisTests {\n    @Autowired\n    private StringRedisTemplate stringRedisTemplate;\n\n    @Autowired\n    private RedisTemplate redisTemplate;\n\n    @Test\n    public void test() throws Exception {\n        stringRedisTemplate.opsForValue().set(\"aaa\", \"111\");\n        Assert.assertEquals(\"111\", stringRedisTemplate.opsForValue().get(\"aaa\"));\n    }\n\n    @Test\n    public void testObj() throws Exception {\n        User user = new User(\"aa@gmail.com\", \"aa\", \"aa123456\");\n        ValueOperations<String, User> operations = redisTemplate.opsForValue();\n        operations.set(\"com.example\", user);\n        operations.set(\"com.example.timeout\", user, 1, TimeUnit.SECONDS);\n        Thread.sleep(1000);\n\n        boolean exists = redisTemplate.hasKey(\"com.example.timeout\");\n        if (exists) {\n            System.out.println(\"exists is true\");\n        } else {\n            System.out.println(\"exists is false\");\n        }\n    }\n}\n```\n以上都是手动使用的方式，如何在查找数据库的时候自动使用缓存呢，看下面：\n\n5. 自动根据方法生成缓存\n```java\n@RestController\npublic class UserController {\n    @Autowired\n    private UserRepository userRepository;\n\n    @GetMapping(\"/getUser\")\n    @Cacheable(value=\"user-key\")\n    public User getUser(){\n        User user = userRepository.findUserByUserName(\"bb1\");\n        System.out.println(\"若下面没出现“无缓存的时候调用”字样且能打印出数据表示测试成功\");\n\n        return user;\n    }\n}\n```\n其中value的值就是就是缓存到redis中的key。\n\n## 共享Session \nspring boot 整合 spring-session-data-redis\n分布式系统中，session共享有很多的解决方案，其中托管到缓存中应该是最常用的方案之一。\n\n### Spring Session官方说明\nSpring Session provides an API and implementations for managing a user's session information.\n\n### 如何使用\n1. 引入依赖\n```xml\n<!--当@EnableRedisHttpSession注解找不到时引入-->\n<!--<dependency>-->\n    <!--<groupId>org.springframework.session</groupId>-->\n    <!--<artifactId>spring-session</artifactId>-->\n    <!--<version>1.3.3.RELEASE</version>-->\n<!--</dependency>-->\n\n<dependency>\n    <groupId>org.springframework.session</groupId>\n    <artifactId>spring-session-data-redis</artifactId>\n</dependency>\n```\n\n2. Session配置\n```java\n@Configuration\n@EnableRedisHttpSession(maxInactiveIntervalInSeconds = 86400*30)\npublic class SessionConfig {\n\n}\n```\n> maxInactiveIntervalInSeconds: 设置Session失效时间。\n> 使用Redis Session之后，原Boot的server.session.timeout属性不再生效\n\n好了，这样就配置完成了，让我们来测试下\n\n3. 测试\n添加测试方法获取sessionId\n```java\n@GetMapping(\"/uid\")\npublic String uid(HttpSession session) {\n    UUID uid = (UUID) session.getAttribute(\"uid\");\n    if (uid == null) {\n        uid = UUID.randomUUID();\n    }\n    session.setAttribute(\"uid\", uid);\n    return session.getId();\n}\n```\n登录redis输入`keys '*session*'`进行查询\n```\n127.0.0.1:6379> keys '*session*'\n1) \"spring:session:sessions:expires:21099c0b-ae12-4ebc-ac8f-7d2f9baf5cdf\"\n2) \"spring:session:expirations:1541400420000\"\n3) \"spring:session:sessions:21099c0b-ae12-4ebc-ac8f-7d2f9baf5cdf\"\n```\n其中 1541400420000为失效时间，意思是这个时间后session失效，`21099c0b-ae12-4ebc-ac8f-7d2f9baf5cdf` 为sessionId,登录http://localhost:8080/uid 发现会一致，就说明session 已经在redis里面进行有效的管理了。\n\n### 如何在两台或者多台服务器中共享session\n其实就是按照上面的步骤在另一个项目中再次配置一次，启动后就自动进行了session共享。\n\n\n\n\n","slug":"spring-springboot-redis","published":1,"updated":"2018-10-06T15:10:23.417Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmyu0scd001ax8uohom1f2sb","content":"<p><img src=\"/images/spring-springboot-1.jpg\" alt=\"spring-springboot-redis\"></p><p>Spring Boot 对常用的数据库支持外，对nosql数据库也进行了封装自动化，<a id=\"more\"></a></p><h2 id=\"Redis介绍\"><a href=\"#Redis介绍\" class=\"headerlink\" title=\"Redis介绍\"></a>Redis介绍</h2><p>Redis是目前业界使用最广泛的内存数据存储。相比Memcached，Redis支持更丰富的数据结构，例如hashes,lists,sets等，同时支持数据的持久化。除此之外，Redis还提供一些类数据库的特性，比如事务，HA，主从库等。可以说Redis兼具了缓存系统和数据库的一些特性，因此有着丰富的应用场景。本文介绍Redis在Spring Boot中两个典型的应用场景。</p><h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><ol><li><p>引入spring-boot-starter-data-redis</p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加redis配置</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#Redis数据库索引（默认为0）</span><br><span class=\"line\">spring.redis.database=0</span><br><span class=\"line\">#Redis服务器地址</span><br><span class=\"line\">spring.redis.host=127.0.0.1</span><br><span class=\"line\">#Redis服务器连接端口</span><br><span class=\"line\">spring.redis.port=6379</span><br><span class=\"line\">#Redis服务器连接密码（默认为空）</span><br><span class=\"line\">spring.redis.password=</span><br><span class=\"line\">#Redis连接池最大连接数（使用负值表示没有限制）</span><br><span class=\"line\">spring.redis.pool.max-active=8</span><br><span class=\"line\">#Redis连接池最大阻塞等待时间（使用负值表示没有限制）</span><br><span class=\"line\">spring.redis.pool.max-wait=-1</span><br><span class=\"line\">#Redis连接池中的最大空闲连接</span><br><span class=\"line\">spring.redis.pool.max-idle=8</span><br><span class=\"line\">#Redis连接池中的最小空闲连接</span><br><span class=\"line\">spring.redis.pool.min-idle=0</span><br><span class=\"line\">#Redis连接超时时间（毫秒）</span><br><span class=\"line\">spring.redis.timeout=0</span><br></pre></td></tr></table></figure></li><li><p>添加cache的配置类</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableCaching</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">CachingConfigurerSupport</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> KeyGenerator <span class=\"title\">keyGenerator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> KeyGenerator() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">generate</span><span class=\"params\">(Object o, Method method, Object... objects)</span> </span>&#123;</span><br><span class=\"line\">                StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">                sb.append(o.getClass().getName());</span><br><span class=\"line\">                sb.append(method.getName());</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (Object obj : objects) &#123;</span><br><span class=\"line\">                    sb.append(obj.toString());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"rawtypes\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> CacheManager <span class=\"title\">cacheManager</span><span class=\"params\">(RedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class=\"line\">        RedisCacheManager rcm = <span class=\"keyword\">new</span> RedisCacheManager(redisTemplate);</span><br><span class=\"line\">        <span class=\"comment\">// 设置缓存过期时间</span></span><br><span class=\"line\">        <span class=\"comment\">// rcm.setDefaultExpiration(60); //秒</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> rcm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RedisTemplate&lt;String, String&gt; <span class=\"title\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class=\"line\">        StringRedisTemplate template = <span class=\"keyword\">new</span> StringRedisTemplate(factory);</span><br><span class=\"line\">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class=\"keyword\">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class=\"line\">        ObjectMapper om = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class=\"line\">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class=\"line\">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class=\"line\">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class=\"line\">        template.afterPropertiesSet();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> template;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>好了，接下来我们就可以直接使用了</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisTests</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisTemplate redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        stringRedisTemplate.opsForValue().set(<span class=\"string\">\"aaa\"</span>, <span class=\"string\">\"111\"</span>);</span><br><span class=\"line\">        Assert.assertEquals(<span class=\"string\">\"111\"</span>, stringRedisTemplate.opsForValue().get(<span class=\"string\">\"aaa\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testObj</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        User user = <span class=\"keyword\">new</span> User(<span class=\"string\">\"aa@gmail.com\"</span>, <span class=\"string\">\"aa\"</span>, <span class=\"string\">\"aa123456\"</span>);</span><br><span class=\"line\">        ValueOperations&lt;String, User&gt; operations = redisTemplate.opsForValue();</span><br><span class=\"line\">        operations.set(<span class=\"string\">\"com.example\"</span>, user);</span><br><span class=\"line\">        operations.set(<span class=\"string\">\"com.example.timeout\"</span>, user, <span class=\"number\">1</span>, TimeUnit.SECONDS);</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> exists = redisTemplate.hasKey(<span class=\"string\">\"com.example.timeout\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (exists) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"exists is true\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"exists is false\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>以上都是手动使用的方式，如何在查找数据库的时候自动使用缓存呢，看下面：</p><ol start=\"5\"><li>自动根据方法生成缓存<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserRepository userRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/getUser\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Cacheable</span>(value=<span class=\"string\">\"user-key\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUser</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        User user = userRepository.findUserByUserName(<span class=\"string\">\"bb1\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"若下面没出现“无缓存的时候调用”字样且能打印出数据表示测试成功\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>其中value的值就是就是缓存到redis中的key。</p><h2 id=\"共享Session\"><a href=\"#共享Session\" class=\"headerlink\" title=\"共享Session\"></a>共享Session</h2><p>spring boot 整合 spring-session-data-redis 分布式系统中，session共享有很多的解决方案，其中托管到缓存中应该是最常用的方案之一。</p><h3 id=\"Spring-Session官方说明\"><a href=\"#Spring-Session官方说明\" class=\"headerlink\" title=\"Spring Session官方说明\"></a>Spring Session官方说明</h3><p>Spring Session provides an API and implementations for managing a user’s session information.</p><h3 id=\"如何使用-1\"><a href=\"#如何使用-1\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h3><ol><li><p>引入依赖</p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--当@EnableRedisHttpSession注解找不到时引入--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--&lt;dependency&gt;--&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--&lt;groupId&gt;org.springframework.session&lt;/groupId&gt;--&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--&lt;artifactId&gt;spring-session&lt;/artifactId&gt;--&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--&lt;version&gt;1.3.3.RELEASE&lt;/version&gt;--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--&lt;/dependency&gt;--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.session<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-session-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Session配置</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableRedisHttpSession</span>(maxInactiveIntervalInSeconds = <span class=\"number\">86400</span>*<span class=\"number\">30</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SessionConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>maxInactiveIntervalInSeconds: 设置Session失效时间。 使用Redis Session之后，原Boot的server.session.timeout属性不再生效</p></blockquote><p>好了，这样就配置完成了，让我们来测试下</p><ol start=\"3\"><li>测试 添加测试方法获取sessionId<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/uid\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">uid</span><span class=\"params\">(HttpSession session)</span> </span>&#123;</span><br><span class=\"line\">    UUID uid = (UUID) session.getAttribute(<span class=\"string\">\"uid\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (uid == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        uid = UUID.randomUUID();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    session.setAttribute(<span class=\"string\">\"uid\"</span>, uid);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> session.getId();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>登录redis输入<code>keys &#39;*session*&#39;</code>进行查询</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; keys &apos;*session*&apos;</span><br><span class=\"line\">1) &quot;spring:session:sessions:expires:21099c0b-ae12-4ebc-ac8f-7d2f9baf5cdf&quot;</span><br><span class=\"line\">2) &quot;spring:session:expirations:1541400420000&quot;</span><br><span class=\"line\">3) &quot;spring:session:sessions:21099c0b-ae12-4ebc-ac8f-7d2f9baf5cdf&quot;</span><br></pre></td></tr></table></figure><p></p><p>其中 1541400420000为失效时间，意思是这个时间后session失效，<code>21099c0b-ae12-4ebc-ac8f-7d2f9baf5cdf</code> 为sessionId,登录<a href=\"http://localhost:8080/uid\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">http://localhost:8080/uid</a> 发现会一致，就说明session 已经在redis里面进行有效的管理了。</p><h3 id=\"如何在两台或者多台服务器中共享session\"><a href=\"#如何在两台或者多台服务器中共享session\" class=\"headerlink\" title=\"如何在两台或者多台服务器中共享session\"></a>如何在两台或者多台服务器中共享session</h3><p>其实就是按照上面的步骤在另一个项目中再次配置一次，启动后就自动进行了session共享。</p>","site":{"data":{}},"excerpt":"<p><img src=\"/images/spring-springboot-1.jpg\" alt=\"spring-springboot-redis\"></p><p>Spring Boot 对常用的数据库支持外，对nosql数据库也进行了封装自动化，","more":"</p><h2 id=\"Redis介绍\"><a href=\"#Redis介绍\" class=\"headerlink\" title=\"Redis介绍\"></a>Redis介绍</h2><p>Redis是目前业界使用最广泛的内存数据存储。相比Memcached，Redis支持更丰富的数据结构，例如hashes,lists,sets等，同时支持数据的持久化。除此之外，Redis还提供一些类数据库的特性，比如事务，HA，主从库等。可以说Redis兼具了缓存系统和数据库的一些特性，因此有着丰富的应用场景。本文介绍Redis在Spring Boot中两个典型的应用场景。</p><h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><ol><li><p>引入spring-boot-starter-data-redis</p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加redis配置</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#Redis数据库索引（默认为0）</span><br><span class=\"line\">spring.redis.database=0</span><br><span class=\"line\">#Redis服务器地址</span><br><span class=\"line\">spring.redis.host=127.0.0.1</span><br><span class=\"line\">#Redis服务器连接端口</span><br><span class=\"line\">spring.redis.port=6379</span><br><span class=\"line\">#Redis服务器连接密码（默认为空）</span><br><span class=\"line\">spring.redis.password=</span><br><span class=\"line\">#Redis连接池最大连接数（使用负值表示没有限制）</span><br><span class=\"line\">spring.redis.pool.max-active=8</span><br><span class=\"line\">#Redis连接池最大阻塞等待时间（使用负值表示没有限制）</span><br><span class=\"line\">spring.redis.pool.max-wait=-1</span><br><span class=\"line\">#Redis连接池中的最大空闲连接</span><br><span class=\"line\">spring.redis.pool.max-idle=8</span><br><span class=\"line\">#Redis连接池中的最小空闲连接</span><br><span class=\"line\">spring.redis.pool.min-idle=0</span><br><span class=\"line\">#Redis连接超时时间（毫秒）</span><br><span class=\"line\">spring.redis.timeout=0</span><br></pre></td></tr></table></figure></li><li><p>添加cache的配置类</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableCaching</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">CachingConfigurerSupport</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> KeyGenerator <span class=\"title\">keyGenerator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> KeyGenerator() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">generate</span><span class=\"params\">(Object o, Method method, Object... objects)</span> </span>&#123;</span><br><span class=\"line\">                StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">                sb.append(o.getClass().getName());</span><br><span class=\"line\">                sb.append(method.getName());</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (Object obj : objects) &#123;</span><br><span class=\"line\">                    sb.append(obj.toString());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"rawtypes\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> CacheManager <span class=\"title\">cacheManager</span><span class=\"params\">(RedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class=\"line\">        RedisCacheManager rcm = <span class=\"keyword\">new</span> RedisCacheManager(redisTemplate);</span><br><span class=\"line\">        <span class=\"comment\">// 设置缓存过期时间</span></span><br><span class=\"line\">        <span class=\"comment\">// rcm.setDefaultExpiration(60); //秒</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> rcm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RedisTemplate&lt;String, String&gt; <span class=\"title\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class=\"line\">        StringRedisTemplate template = <span class=\"keyword\">new</span> StringRedisTemplate(factory);</span><br><span class=\"line\">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class=\"keyword\">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class=\"line\">        ObjectMapper om = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class=\"line\">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class=\"line\">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class=\"line\">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class=\"line\">        template.afterPropertiesSet();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> template;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>好了，接下来我们就可以直接使用了</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisTests</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisTemplate redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        stringRedisTemplate.opsForValue().set(<span class=\"string\">\"aaa\"</span>, <span class=\"string\">\"111\"</span>);</span><br><span class=\"line\">        Assert.assertEquals(<span class=\"string\">\"111\"</span>, stringRedisTemplate.opsForValue().get(<span class=\"string\">\"aaa\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testObj</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        User user = <span class=\"keyword\">new</span> User(<span class=\"string\">\"aa@gmail.com\"</span>, <span class=\"string\">\"aa\"</span>, <span class=\"string\">\"aa123456\"</span>);</span><br><span class=\"line\">        ValueOperations&lt;String, User&gt; operations = redisTemplate.opsForValue();</span><br><span class=\"line\">        operations.set(<span class=\"string\">\"com.example\"</span>, user);</span><br><span class=\"line\">        operations.set(<span class=\"string\">\"com.example.timeout\"</span>, user, <span class=\"number\">1</span>, TimeUnit.SECONDS);</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> exists = redisTemplate.hasKey(<span class=\"string\">\"com.example.timeout\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (exists) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"exists is true\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"exists is false\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>以上都是手动使用的方式，如何在查找数据库的时候自动使用缓存呢，看下面：</p><ol start=\"5\"><li>自动根据方法生成缓存<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserRepository userRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/getUser\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Cacheable</span>(value=<span class=\"string\">\"user-key\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUser</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        User user = userRepository.findUserByUserName(<span class=\"string\">\"bb1\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"若下面没出现“无缓存的时候调用”字样且能打印出数据表示测试成功\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>其中value的值就是就是缓存到redis中的key。</p><h2 id=\"共享Session\"><a href=\"#共享Session\" class=\"headerlink\" title=\"共享Session\"></a>共享Session</h2><p>spring boot 整合 spring-session-data-redis 分布式系统中，session共享有很多的解决方案，其中托管到缓存中应该是最常用的方案之一。</p><h3 id=\"Spring-Session官方说明\"><a href=\"#Spring-Session官方说明\" class=\"headerlink\" title=\"Spring Session官方说明\"></a>Spring Session官方说明</h3><p>Spring Session provides an API and implementations for managing a user’s session information.</p><h3 id=\"如何使用-1\"><a href=\"#如何使用-1\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h3><ol><li><p>引入依赖</p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--当@EnableRedisHttpSession注解找不到时引入--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--&lt;dependency&gt;--&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--&lt;groupId&gt;org.springframework.session&lt;/groupId&gt;--&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--&lt;artifactId&gt;spring-session&lt;/artifactId&gt;--&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--&lt;version&gt;1.3.3.RELEASE&lt;/version&gt;--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--&lt;/dependency&gt;--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.session<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-session-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Session配置</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableRedisHttpSession</span>(maxInactiveIntervalInSeconds = <span class=\"number\">86400</span>*<span class=\"number\">30</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SessionConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>maxInactiveIntervalInSeconds: 设置Session失效时间。 使用Redis Session之后，原Boot的server.session.timeout属性不再生效</p></blockquote><p>好了，这样就配置完成了，让我们来测试下</p><ol start=\"3\"><li>测试 添加测试方法获取sessionId<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/uid\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">uid</span><span class=\"params\">(HttpSession session)</span> </span>&#123;</span><br><span class=\"line\">    UUID uid = (UUID) session.getAttribute(<span class=\"string\">\"uid\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (uid == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        uid = UUID.randomUUID();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    session.setAttribute(<span class=\"string\">\"uid\"</span>, uid);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> session.getId();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>登录redis输入<code>keys &#39;*session*&#39;</code>进行查询</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; keys &apos;*session*&apos;</span><br><span class=\"line\">1) &quot;spring:session:sessions:expires:21099c0b-ae12-4ebc-ac8f-7d2f9baf5cdf&quot;</span><br><span class=\"line\">2) &quot;spring:session:expirations:1541400420000&quot;</span><br><span class=\"line\">3) &quot;spring:session:sessions:21099c0b-ae12-4ebc-ac8f-7d2f9baf5cdf&quot;</span><br></pre></td></tr></table></figure><p></p><p>其中 1541400420000为失效时间，意思是这个时间后session失效，<code>21099c0b-ae12-4ebc-ac8f-7d2f9baf5cdf</code> 为sessionId,登录<a href=\"http://localhost:8080/uid\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">http://localhost:8080/uid</a> 发现会一致，就说明session 已经在redis里面进行有效的管理了。</p><h3 id=\"如何在两台或者多台服务器中共享session\"><a href=\"#如何在两台或者多台服务器中共享session\" class=\"headerlink\" title=\"如何在两台或者多台服务器中共享session\"></a>如何在两台或者多台服务器中共享session</h3><p>其实就是按照上面的步骤在另一个项目中再次配置一次，启动后就自动进行了session共享。</p>"},{"title":"Java基础总结","author":"SnailDev","date":"2018-08-21T12:26:00.000Z","featured_image":"/images/java_base.png","_content":"Spring、Spring Boot 和 Spring Cloud 的关系\nSpring 最初核心的两大核心功能 Spring IoC 和 Spring Aop 成就了 Spring，Spring 在这两大核心功能上不断地发展，才有了 Spring 事务、Spring MVC 等一系列伟大的产品，最终成就了 Spring 帝国，到了后期 Spring 几乎可以解决企业开发中的所有问题。\n\nSpring Boot 是在强大的 Spring 帝国生态基础上面发展而来，发明 Spring Boot 不是为了取代 Spring，是为了让人们更容易的使用 Spring。所以说没有 Spring 强大的功能和生态，就不会有后期 Spring Boot 的火热，Spring Boot 使用约定优于配置的理念，重新重构了 Spring 的使用，让 Spring 后续的发展更有生命力。\n\nSpring 并没有重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过 Spring Boot 风格进行再封装并屏蔽掉复杂的配置和实现原理，最终给开发者提供了一套简单易懂、易部署、易维护的分布式系统开发工具包。\n\nSpring Cloud 是一系列框架的有序集合，它利用 Spring Boot 的开发便利性巧妙地简化了分布式系统基础设施的开发。服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用 Spring Boot 的开发风格做到一键启动和部署。\n\nSpring Cloud 是为了解决微服务架构中服务治理而提供的具备一系列功能的开发框架，并且 Spring Cloud 是完全基于 Spring Boot 而开发，Spring Cloud 利用 Spring Boot 特性整合了开源行业中优秀的组件，整体对外提供了一套在微服务架构中服务治理的解决方案。\n\n综上我们可以这样来理解，正是由于 Spring IoC 和 Spring Aop 两个强大的功能才有了 Spring，Spring 生态不断的发展才有了 Spring Boot，使用 Spring Boot 让 Spring 更易用更有生命力，Spring Cloud 是基于 Spring Boot 开发的一套微服务架构下的服务治理方案。\n\n以下为它们之间的关系。\n\n>Spring Ioc/Aop > Spring > Spring Boot > Spring Cloud","source":"_drafts/spring-springcloud-helloworld.md","raw":"---\ntitle: Java基础总结\nauthor: SnailDev\ntags:\n  - Java基础\ncategories:\n  - Java基础\ndate: 2018-08-21 20:26:00\nfeatured_image: /images/java_base.png\n---\nSpring、Spring Boot 和 Spring Cloud 的关系\nSpring 最初核心的两大核心功能 Spring IoC 和 Spring Aop 成就了 Spring，Spring 在这两大核心功能上不断地发展，才有了 Spring 事务、Spring MVC 等一系列伟大的产品，最终成就了 Spring 帝国，到了后期 Spring 几乎可以解决企业开发中的所有问题。\n\nSpring Boot 是在强大的 Spring 帝国生态基础上面发展而来，发明 Spring Boot 不是为了取代 Spring，是为了让人们更容易的使用 Spring。所以说没有 Spring 强大的功能和生态，就不会有后期 Spring Boot 的火热，Spring Boot 使用约定优于配置的理念，重新重构了 Spring 的使用，让 Spring 后续的发展更有生命力。\n\nSpring 并没有重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过 Spring Boot 风格进行再封装并屏蔽掉复杂的配置和实现原理，最终给开发者提供了一套简单易懂、易部署、易维护的分布式系统开发工具包。\n\nSpring Cloud 是一系列框架的有序集合，它利用 Spring Boot 的开发便利性巧妙地简化了分布式系统基础设施的开发。服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用 Spring Boot 的开发风格做到一键启动和部署。\n\nSpring Cloud 是为了解决微服务架构中服务治理而提供的具备一系列功能的开发框架，并且 Spring Cloud 是完全基于 Spring Boot 而开发，Spring Cloud 利用 Spring Boot 特性整合了开源行业中优秀的组件，整体对外提供了一套在微服务架构中服务治理的解决方案。\n\n综上我们可以这样来理解，正是由于 Spring IoC 和 Spring Aop 两个强大的功能才有了 Spring，Spring 生态不断的发展才有了 Spring Boot，使用 Spring Boot 让 Spring 更易用更有生命力，Spring Cloud 是基于 Spring Boot 开发的一套微服务架构下的服务治理方案。\n\n以下为它们之间的关系。\n\n>Spring Ioc/Aop > Spring > Spring Boot > Spring Cloud","slug":"spring-springcloud-helloworld","published":0,"updated":"2018-10-03T02:25:37.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmyu0scj001cx8uo5i7tr0j3","content":"<p>Spring、Spring Boot 和 Spring Cloud 的关系 Spring 最初核心的两大核心功能 Spring IoC 和 Spring Aop 成就了 Spring，Spring 在这两大核心功能上不断地发展，才有了 Spring 事务、Spring MVC 等一系列伟大的产品，最终成就了 Spring 帝国，到了后期 Spring 几乎可以解决企业开发中的所有问题。</p><p>Spring Boot 是在强大的 Spring 帝国生态基础上面发展而来，发明 Spring Boot 不是为了取代 Spring，是为了让人们更容易的使用 Spring。所以说没有 Spring 强大的功能和生态，就不会有后期 Spring Boot 的火热，Spring Boot 使用约定优于配置的理念，重新重构了 Spring 的使用，让 Spring 后续的发展更有生命力。</p><p>Spring 并没有重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过 Spring Boot 风格进行再封装并屏蔽掉复杂的配置和实现原理，最终给开发者提供了一套简单易懂、易部署、易维护的分布式系统开发工具包。</p><p>Spring Cloud 是一系列框架的有序集合，它利用 Spring Boot 的开发便利性巧妙地简化了分布式系统基础设施的开发。服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用 Spring Boot 的开发风格做到一键启动和部署。</p><p>Spring Cloud 是为了解决微服务架构中服务治理而提供的具备一系列功能的开发框架，并且 Spring Cloud 是完全基于 Spring Boot 而开发，Spring Cloud 利用 Spring Boot 特性整合了开源行业中优秀的组件，整体对外提供了一套在微服务架构中服务治理的解决方案。</p><p>综上我们可以这样来理解，正是由于 Spring IoC 和 Spring Aop 两个强大的功能才有了 Spring，Spring 生态不断的发展才有了 Spring Boot，使用 Spring Boot 让 Spring 更易用更有生命力，Spring Cloud 是基于 Spring Boot 开发的一套微服务架构下的服务治理方案。</p><p>以下为它们之间的关系。</p><blockquote><p>Spring Ioc/Aop &gt; Spring &gt; Spring Boot &gt; Spring Cloud</p></blockquote>","site":{"data":{}},"excerpt":"","more":"<p>Spring、Spring Boot 和 Spring Cloud 的关系 Spring 最初核心的两大核心功能 Spring IoC 和 Spring Aop 成就了 Spring，Spring 在这两大核心功能上不断地发展，才有了 Spring 事务、Spring MVC 等一系列伟大的产品，最终成就了 Spring 帝国，到了后期 Spring 几乎可以解决企业开发中的所有问题。</p><p>Spring Boot 是在强大的 Spring 帝国生态基础上面发展而来，发明 Spring Boot 不是为了取代 Spring，是为了让人们更容易的使用 Spring。所以说没有 Spring 强大的功能和生态，就不会有后期 Spring Boot 的火热，Spring Boot 使用约定优于配置的理念，重新重构了 Spring 的使用，让 Spring 后续的发展更有生命力。</p><p>Spring 并没有重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过 Spring Boot 风格进行再封装并屏蔽掉复杂的配置和实现原理，最终给开发者提供了一套简单易懂、易部署、易维护的分布式系统开发工具包。</p><p>Spring Cloud 是一系列框架的有序集合，它利用 Spring Boot 的开发便利性巧妙地简化了分布式系统基础设施的开发。服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用 Spring Boot 的开发风格做到一键启动和部署。</p><p>Spring Cloud 是为了解决微服务架构中服务治理而提供的具备一系列功能的开发框架，并且 Spring Cloud 是完全基于 Spring Boot 而开发，Spring Cloud 利用 Spring Boot 特性整合了开源行业中优秀的组件，整体对外提供了一套在微服务架构中服务治理的解决方案。</p><p>综上我们可以这样来理解，正是由于 Spring IoC 和 Spring Aop 两个强大的功能才有了 Spring，Spring 生态不断的发展才有了 Spring Boot，使用 Spring Boot 让 Spring 更易用更有生命力，Spring Cloud 是基于 Spring Boot 开发的一套微服务架构下的服务治理方案。</p><p>以下为它们之间的关系。</p><blockquote><p>Spring Ioc/Aop &gt; Spring &gt; Spring Boot &gt; Spring Cloud</p></blockquote>"},{"title":"SpringBoot实战（六）Mybatis","author":"SnailDev","date":"2018-09-06T13:13:28.000Z","featured_image":"/images/spring-springboot-1.jpg","_content":"![spring-springboot-thymeleaf](/images/spring-springboot-1.jpg)\n\nORM框架的本质就是简化编程中操作数据库的编码，发展到现在基本上就剩两家了，一个是宣称可以不用写一句SQL的hibernate，一个是可以灵活调试动态sql的mybatis，两者各有特点，在企业级系统开发中可以根据需求灵活使用。发现一个有趣的现象：传统企业大都喜欢使用hibernate，互联网行业通常使用mybatis。\n<!--more-->\n\nHibernate特点就是所有的sql都用Java代码来生成，不用跳出程序去写（看）sql，有着编程的完整性，发展到最顶端就是spring data jpa这种模式了，基本上根据方法名就可以生成对应的sql了。\n\nMybatis初期使用比较麻烦，需要各种配置文件、实体类、dao层映射关联、还有一大堆其他配置。当然mybatis也发现了这种弊端，初期开发了[generator](https://github.com/mybatis/generator)可以根据表结果自动生成实体类、配置文件和dao层代码，可以减轻一部分开发量；后期也进行了大量的优化可以使用注解，自动管理dao层和配置文件等，发展到最顶端就是今天讲的这种模式，mybatis-spring-boot-starter就是springboot+mybatis可以完全注解不用配置文件，也可以简单配置轻松上手。\n\n## mybatis-spring-boot-starter\n官方说明：MyBatis Spring-Boot-Starter will help you use MyBatis with Spring Boot\n\n其实就是MyBatis看spring boot这么火热也开发出一套解决方案来凑凑热闹，但这一凑却是解决了很多问题，使用起来也却是顺畅了很多。mybatis-spring-boot-starter主要有两种解决方案，一种是使用注解解决一切问题，一种是简化后的老传统。\n\n当然，任何模式都需要在pom文件中首先引入mybatis-spring-boot-starter的依赖。\n```xml\n<dependency>\n  <groupId>org.mybatis.spring.boot</groupId>\n  <artifactId>mybatis-spring-boot-starter</artifactId>\n</dependency>\n```\n好了，现在分别介绍两种开发模式\n\n### 无配置文件注解版\n就是一切使用注解搞定。\n\n#### 1. 添加相关maven依赖\n```xml\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter</artifactId>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>mysql</groupId>\n\t\t\t<artifactId>mysql-connector-java</artifactId>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.mybatis.spring.boot</groupId>\n\t\t\t<artifactId>mybatis-spring-boot-starter</artifactId>\n\t\t</dependency>\n\t</dependencies>\n```\n\n#### 2. application.properties 添加相关配置\n```\nmybatis.type-aliases-package=com.example.springbootmybatis.entity\n\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\nspring.datasource.url=jdbc:mysql://localhost:3306/test1?useUnicode=true&characterEncoding=utf-8\nspring.datasource.username=root\nspring.datasource.password=123456\n```\nspring boot 会自动加载spring.datasource.*相关配置，数据源就会自动注入到sqlSessionFactory中，sqlSessionFactory会自动注入到Mapper中，对了你一切都不用管了，直接拿起来用就可以了。\n\n在启动类中添加对Mapper包扫描@MapperScan\n```java\n@SpringBootApplication\n@MapperScan()\npublic class SpringBootMybatisApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(SpringBootMybatisApplication.class, args);\n\t}\n}\n```\n或者直接在Mapper类上面添加注解`@Mapper`,建议使用上面这种，不然每个Mapper都加个注解也挺麻烦的。\n\n#### 3. 开发Mapper\n第三步是关键的一步，所有的sql生成都在这里\n```java\npublic interface UserMapper {\n    @Select(\"SELECT * FROM users\")\n    @Results({\n            @Result(property = \"userSex\", column = \"user_sex\", javaType = UserSexEnum.class),\n            @Result(property = \"nickName\", column = \"nick_name\")\n    })\n    List<UserEntity> getAll();\n\n    @Select(\"SELECT * FROM users WHERE id = #{id}\")\n    @Results({\n            @Result(property = \"userSex\", column = \"user_sex\", javaType = UserSexEnum.class),\n            @Result(property = \"nickName\", column = \"nick_name\")\n    })\n    UserEntity getOne(Long id);\n\n    @Insert(\"INSERT INTO users(userName,passWord,user_sex) VALUES(#{userName},#{passWord},#{userSex})\")\n    void insert(UserEntity user);\n\n    @Update(\"UPDATE users SET userName=#{userName},nick_name=#{nickName} WHERE id=#{id}\")\n    void update(UserEntity user);\n\n    @Delete(\"DELETE FROM user WHERE id = #{id}\")\n    void delete(Long id);\n}\n```\n为了更接近生产特地将user_sex,nick_name两个属性在数据库中加了下划线和实体类属性名不一致，另外user_sex使用了枚举\n> - @Select 是查询类的注解，所有的查询均使用这个；\n> - @Result 修饰返回的结果集，关联实体类属性和数据库字段一一对应，如果实体类属性和数据库属性名保持一致，就不需要这个属性来修饰；\n> - @Insert 插入数据库使用，直接传入实体类会自动解析属性到对应的值；\n> - @Update 负责修改，也可以直接传入对象\n> - @Delete 负责删除\n[了解更多属性参考这里](http://www.mybatis.org/mybatis-3/zh/java-api.html)\n\n> **注意，使用#符号和$符号的不同**\n```java\n// This example creates a prepared statement, something like select * from teacher where name = ?;\n@Select(\"Select * from teacher where name = #{name}\")\nTeacher selectTeachForGivenName(@Param(\"name\") String name);\n\n// This example creates n inlined statement, something like select * from teacher where name = 'someName';\n@Select(\"Select * from teacher where name = '${name}'\")\nTeacher selectTeachForGivenName(@Param(\"name\") String name);\n```\n\n#### 4. 使用\n上面三步就基本完成了相关的dao层开发，使用的时候当作普通的类注入就可以了\n```java\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class UserMapperTest {\n    @Autowired\n    private UserMapper userMapper;\n\n    @Test\n    public void testInsert() throws Exception {\n        userMapper.insert(new UserEntity(\"aa\", \"a123456\", UserSexEnum.MAN));\n        userMapper.insert(new UserEntity(\"bb\", \"b123456\", UserSexEnum.WOMAN));\n        userMapper.insert(new UserEntity(\"cc\", \"b123456\", UserSexEnum.WOMAN));\n\n        Assert.assertEquals(3, userMapper.getAll().size());\n    }\n\n    @Test\n    public void testQuery() throws Exception {\n        List<UserEntity> users = userMapper.getAll();\n        System.out.println(users.toString());\n    }\n\n    @Test\n    public void testUpdate() throws Exception {\n        UserEntity user = userMapper.getOne(new Long(30));\n        System.out.println(user.toString());\n        user.setNickName(\"snaildev\");\n        userMapper.update(user);\n        Assert.assertTrue(\"snaildev\".equals(userMapper.getOne(new Long(30)).getNickName()));\n    }\n}\n```\n\n### 极简xml版本\n极简xml版本保持映射文件的老传统，优点主要体现在不需要实现dao的是实现层，系统会自动根据方法名在映射文件中找到对应的sql。\n\n#### 1. 配置\npom文件和上面第一种方式一致，只是application.properties新增以下配置\n```\nmybatis.config-location=classpath:mybatis/mybatis-config.xml\nmybatis.mapper-locations=classpath:mybatis/mapper/*.xml\n```\n指定了mybatis基础配置文件和实体类映射文件的地址\n\nmybatis-config.xml配置\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <typeAliases>\n        <typeAlias alias=\"Integer\" type=\"java.lang.Integer\" />\n        <typeAlias alias=\"Long\" type=\"java.lang.Long\" />\n        <typeAlias alias=\"HashMap\" type=\"java.util.HashMap\" />\n        <typeAlias alias=\"LinkedHashMap\" type=\"java.util.LinkedHashMap\" />\n        <typeAlias alias=\"ArrayList\" type=\"java.util.ArrayList\" />\n        <typeAlias alias=\"LinkedList\" type=\"java.util.LinkedList\" />\n    </typeAliases>\n</configuration>\n```\n这里也可以添加一些mybatis基础的设置\n\n#### 2. 添加User的映射文件\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\n<mapper namespace=\"com.example.springbootmybatis.mapper.UserMapper\" >\n    <resultMap id=\"BaseResultMap\" type=\"com.example.springbootmybatis.entity.UserEntity\" >\n        <id column=\"id\" property=\"id\" jdbcType=\"BIGINT\" />\n        <result column=\"userName\" property=\"userName\" jdbcType=\"VARCHAR\" />\n        <result column=\"passWord\" property=\"passWord\" jdbcType=\"VARCHAR\" />\n        <result column=\"user_sex\" property=\"userSex\" javaType=\"com.example.springbootmybatis.enums.UserSexEnum\"/>\n        <result column=\"nick_name\" property=\"nickName\" jdbcType=\"VARCHAR\" />\n    </resultMap>\n\n    <sql id=\"Base_Column_List\" >\n        id, userName, passWord, user_sex, nick_name\n    </sql>\n\n    <select id=\"getAll\" resultMap=\"BaseResultMap\"  >\n        SELECT\n        <include refid=\"Base_Column_List\" />\n        FROM users\n    </select>\n\n    <select id=\"getOne\" parameterType=\"java.lang.Long\" resultMap=\"BaseResultMap\" >\n        SELECT\n        <include refid=\"Base_Column_List\" />\n        FROM users\n        WHERE id = #{id}\n    </select>\n\n    <insert id=\"insert\" parameterType=\"com.example.springbootmybatis.entity.UserEntity\" >\n       INSERT INTO\n       \t\tusers\n       \t\t(userName,passWord,user_sex)\n       \tVALUES\n       \t\t(#{userName}, #{passWord}, #{userSex})\n    </insert>\n\n    <update id=\"update\" parameterType=\"com.example.springbootmybatis.entity.UserEntity\" >\n        UPDATE\n        users\n        SET\n        <if test=\"userName != null\">userName = #{userName},</if>\n        <if test=\"passWord != null\">passWord = #{passWord},</if>\n        nick_name = #{nickName}\n        WHERE\n        id = #{id}\n    </update>\n\n    <delete id=\"delete\" parameterType=\"java.lang.Long\" >\n       DELETE FROM\n       \t\t users\n       WHERE\n       \t\t id =#{id}\n    </delete>\n\n</mapper>\n```\n其实就是把上个版本中Mapper的sql搬到了这里的xml中了\n\n#### 3. 编写Dao层的代码\n```java\npublic interface UserMapper {\n//    @Select(\"SELECT * FROM users\")\n//    @Results({\n//            @Result(property = \"userSex\", column = \"user_sex\", javaType = UserSexEnum.class),\n//            @Result(property = \"nickName\", column = \"nick_name\")\n//    })\n    List<UserEntity> getAll();\n\n//    @Select(\"SELECT * FROM users WHERE id = #{id}\")\n//    @Results({\n//            @Result(property = \"userSex\", column = \"user_sex\", javaType = UserSexEnum.class),\n//            @Result(property = \"nickName\", column = \"nick_name\")\n//    })\n    UserEntity getOne(Long id);\n\n//    @Insert(\"INSERT INTO users(userName,passWord,user_sex) VALUES(#{userName},#{passWord},#{userSex})\")\n    void insert(UserEntity user);\n\n//    @Update(\"UPDATE users SET userName=#{userName},nick_name=#{nickName} WHERE id=#{id}\")\n    void update(UserEntity user);\n\n//    @Delete(\"DELETE FROM user WHERE id = #{id}\")\n    void delete(Long id);\n}\n```\n对比上一种方式，这里只剩接口方法\n\n#### 4. 使用\n使用方式和第一种方式没什么区别，可以参考第一种代码实现。\n\n### 如何选择\n两种模式各有特点，注解版适合简单快速的模式，其实像现在流行的微服务模式，一个微服务就会对应一个自己的数据库，多表连接查询的需求会大大的降低，会越来越适合这种模式了。\n\n老传统模式即xml配置文件的方式，更适合大型项目，可以灵活的动态生成SQL，方便调整SQL，也有痛痛快快，洋洋洒洒的写SQL的感觉。\n\n","source":"_posts/spring-springboot-mybatis.md","raw":"---\ntitle: SpringBoot实战（六）Mybatis\nauthor: SnailDev\ntags:\n  - SpringBoot\n  - Mybatis\ncategories:\n  - SpringBoot\ndate: 2018-09-06 21:13:28\nfeatured_image: /images/spring-springboot-1.jpg\n---\n![spring-springboot-thymeleaf](/images/spring-springboot-1.jpg)\n\nORM框架的本质就是简化编程中操作数据库的编码，发展到现在基本上就剩两家了，一个是宣称可以不用写一句SQL的hibernate，一个是可以灵活调试动态sql的mybatis，两者各有特点，在企业级系统开发中可以根据需求灵活使用。发现一个有趣的现象：传统企业大都喜欢使用hibernate，互联网行业通常使用mybatis。\n<!--more-->\n\nHibernate特点就是所有的sql都用Java代码来生成，不用跳出程序去写（看）sql，有着编程的完整性，发展到最顶端就是spring data jpa这种模式了，基本上根据方法名就可以生成对应的sql了。\n\nMybatis初期使用比较麻烦，需要各种配置文件、实体类、dao层映射关联、还有一大堆其他配置。当然mybatis也发现了这种弊端，初期开发了[generator](https://github.com/mybatis/generator)可以根据表结果自动生成实体类、配置文件和dao层代码，可以减轻一部分开发量；后期也进行了大量的优化可以使用注解，自动管理dao层和配置文件等，发展到最顶端就是今天讲的这种模式，mybatis-spring-boot-starter就是springboot+mybatis可以完全注解不用配置文件，也可以简单配置轻松上手。\n\n## mybatis-spring-boot-starter\n官方说明：MyBatis Spring-Boot-Starter will help you use MyBatis with Spring Boot\n\n其实就是MyBatis看spring boot这么火热也开发出一套解决方案来凑凑热闹，但这一凑却是解决了很多问题，使用起来也却是顺畅了很多。mybatis-spring-boot-starter主要有两种解决方案，一种是使用注解解决一切问题，一种是简化后的老传统。\n\n当然，任何模式都需要在pom文件中首先引入mybatis-spring-boot-starter的依赖。\n```xml\n<dependency>\n  <groupId>org.mybatis.spring.boot</groupId>\n  <artifactId>mybatis-spring-boot-starter</artifactId>\n</dependency>\n```\n好了，现在分别介绍两种开发模式\n\n### 无配置文件注解版\n就是一切使用注解搞定。\n\n#### 1. 添加相关maven依赖\n```xml\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter</artifactId>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>mysql</groupId>\n\t\t\t<artifactId>mysql-connector-java</artifactId>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.mybatis.spring.boot</groupId>\n\t\t\t<artifactId>mybatis-spring-boot-starter</artifactId>\n\t\t</dependency>\n\t</dependencies>\n```\n\n#### 2. application.properties 添加相关配置\n```\nmybatis.type-aliases-package=com.example.springbootmybatis.entity\n\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\nspring.datasource.url=jdbc:mysql://localhost:3306/test1?useUnicode=true&characterEncoding=utf-8\nspring.datasource.username=root\nspring.datasource.password=123456\n```\nspring boot 会自动加载spring.datasource.*相关配置，数据源就会自动注入到sqlSessionFactory中，sqlSessionFactory会自动注入到Mapper中，对了你一切都不用管了，直接拿起来用就可以了。\n\n在启动类中添加对Mapper包扫描@MapperScan\n```java\n@SpringBootApplication\n@MapperScan()\npublic class SpringBootMybatisApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(SpringBootMybatisApplication.class, args);\n\t}\n}\n```\n或者直接在Mapper类上面添加注解`@Mapper`,建议使用上面这种，不然每个Mapper都加个注解也挺麻烦的。\n\n#### 3. 开发Mapper\n第三步是关键的一步，所有的sql生成都在这里\n```java\npublic interface UserMapper {\n    @Select(\"SELECT * FROM users\")\n    @Results({\n            @Result(property = \"userSex\", column = \"user_sex\", javaType = UserSexEnum.class),\n            @Result(property = \"nickName\", column = \"nick_name\")\n    })\n    List<UserEntity> getAll();\n\n    @Select(\"SELECT * FROM users WHERE id = #{id}\")\n    @Results({\n            @Result(property = \"userSex\", column = \"user_sex\", javaType = UserSexEnum.class),\n            @Result(property = \"nickName\", column = \"nick_name\")\n    })\n    UserEntity getOne(Long id);\n\n    @Insert(\"INSERT INTO users(userName,passWord,user_sex) VALUES(#{userName},#{passWord},#{userSex})\")\n    void insert(UserEntity user);\n\n    @Update(\"UPDATE users SET userName=#{userName},nick_name=#{nickName} WHERE id=#{id}\")\n    void update(UserEntity user);\n\n    @Delete(\"DELETE FROM user WHERE id = #{id}\")\n    void delete(Long id);\n}\n```\n为了更接近生产特地将user_sex,nick_name两个属性在数据库中加了下划线和实体类属性名不一致，另外user_sex使用了枚举\n> - @Select 是查询类的注解，所有的查询均使用这个；\n> - @Result 修饰返回的结果集，关联实体类属性和数据库字段一一对应，如果实体类属性和数据库属性名保持一致，就不需要这个属性来修饰；\n> - @Insert 插入数据库使用，直接传入实体类会自动解析属性到对应的值；\n> - @Update 负责修改，也可以直接传入对象\n> - @Delete 负责删除\n[了解更多属性参考这里](http://www.mybatis.org/mybatis-3/zh/java-api.html)\n\n> **注意，使用#符号和$符号的不同**\n```java\n// This example creates a prepared statement, something like select * from teacher where name = ?;\n@Select(\"Select * from teacher where name = #{name}\")\nTeacher selectTeachForGivenName(@Param(\"name\") String name);\n\n// This example creates n inlined statement, something like select * from teacher where name = 'someName';\n@Select(\"Select * from teacher where name = '${name}'\")\nTeacher selectTeachForGivenName(@Param(\"name\") String name);\n```\n\n#### 4. 使用\n上面三步就基本完成了相关的dao层开发，使用的时候当作普通的类注入就可以了\n```java\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class UserMapperTest {\n    @Autowired\n    private UserMapper userMapper;\n\n    @Test\n    public void testInsert() throws Exception {\n        userMapper.insert(new UserEntity(\"aa\", \"a123456\", UserSexEnum.MAN));\n        userMapper.insert(new UserEntity(\"bb\", \"b123456\", UserSexEnum.WOMAN));\n        userMapper.insert(new UserEntity(\"cc\", \"b123456\", UserSexEnum.WOMAN));\n\n        Assert.assertEquals(3, userMapper.getAll().size());\n    }\n\n    @Test\n    public void testQuery() throws Exception {\n        List<UserEntity> users = userMapper.getAll();\n        System.out.println(users.toString());\n    }\n\n    @Test\n    public void testUpdate() throws Exception {\n        UserEntity user = userMapper.getOne(new Long(30));\n        System.out.println(user.toString());\n        user.setNickName(\"snaildev\");\n        userMapper.update(user);\n        Assert.assertTrue(\"snaildev\".equals(userMapper.getOne(new Long(30)).getNickName()));\n    }\n}\n```\n\n### 极简xml版本\n极简xml版本保持映射文件的老传统，优点主要体现在不需要实现dao的是实现层，系统会自动根据方法名在映射文件中找到对应的sql。\n\n#### 1. 配置\npom文件和上面第一种方式一致，只是application.properties新增以下配置\n```\nmybatis.config-location=classpath:mybatis/mybatis-config.xml\nmybatis.mapper-locations=classpath:mybatis/mapper/*.xml\n```\n指定了mybatis基础配置文件和实体类映射文件的地址\n\nmybatis-config.xml配置\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <typeAliases>\n        <typeAlias alias=\"Integer\" type=\"java.lang.Integer\" />\n        <typeAlias alias=\"Long\" type=\"java.lang.Long\" />\n        <typeAlias alias=\"HashMap\" type=\"java.util.HashMap\" />\n        <typeAlias alias=\"LinkedHashMap\" type=\"java.util.LinkedHashMap\" />\n        <typeAlias alias=\"ArrayList\" type=\"java.util.ArrayList\" />\n        <typeAlias alias=\"LinkedList\" type=\"java.util.LinkedList\" />\n    </typeAliases>\n</configuration>\n```\n这里也可以添加一些mybatis基础的设置\n\n#### 2. 添加User的映射文件\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\n<mapper namespace=\"com.example.springbootmybatis.mapper.UserMapper\" >\n    <resultMap id=\"BaseResultMap\" type=\"com.example.springbootmybatis.entity.UserEntity\" >\n        <id column=\"id\" property=\"id\" jdbcType=\"BIGINT\" />\n        <result column=\"userName\" property=\"userName\" jdbcType=\"VARCHAR\" />\n        <result column=\"passWord\" property=\"passWord\" jdbcType=\"VARCHAR\" />\n        <result column=\"user_sex\" property=\"userSex\" javaType=\"com.example.springbootmybatis.enums.UserSexEnum\"/>\n        <result column=\"nick_name\" property=\"nickName\" jdbcType=\"VARCHAR\" />\n    </resultMap>\n\n    <sql id=\"Base_Column_List\" >\n        id, userName, passWord, user_sex, nick_name\n    </sql>\n\n    <select id=\"getAll\" resultMap=\"BaseResultMap\"  >\n        SELECT\n        <include refid=\"Base_Column_List\" />\n        FROM users\n    </select>\n\n    <select id=\"getOne\" parameterType=\"java.lang.Long\" resultMap=\"BaseResultMap\" >\n        SELECT\n        <include refid=\"Base_Column_List\" />\n        FROM users\n        WHERE id = #{id}\n    </select>\n\n    <insert id=\"insert\" parameterType=\"com.example.springbootmybatis.entity.UserEntity\" >\n       INSERT INTO\n       \t\tusers\n       \t\t(userName,passWord,user_sex)\n       \tVALUES\n       \t\t(#{userName}, #{passWord}, #{userSex})\n    </insert>\n\n    <update id=\"update\" parameterType=\"com.example.springbootmybatis.entity.UserEntity\" >\n        UPDATE\n        users\n        SET\n        <if test=\"userName != null\">userName = #{userName},</if>\n        <if test=\"passWord != null\">passWord = #{passWord},</if>\n        nick_name = #{nickName}\n        WHERE\n        id = #{id}\n    </update>\n\n    <delete id=\"delete\" parameterType=\"java.lang.Long\" >\n       DELETE FROM\n       \t\t users\n       WHERE\n       \t\t id =#{id}\n    </delete>\n\n</mapper>\n```\n其实就是把上个版本中Mapper的sql搬到了这里的xml中了\n\n#### 3. 编写Dao层的代码\n```java\npublic interface UserMapper {\n//    @Select(\"SELECT * FROM users\")\n//    @Results({\n//            @Result(property = \"userSex\", column = \"user_sex\", javaType = UserSexEnum.class),\n//            @Result(property = \"nickName\", column = \"nick_name\")\n//    })\n    List<UserEntity> getAll();\n\n//    @Select(\"SELECT * FROM users WHERE id = #{id}\")\n//    @Results({\n//            @Result(property = \"userSex\", column = \"user_sex\", javaType = UserSexEnum.class),\n//            @Result(property = \"nickName\", column = \"nick_name\")\n//    })\n    UserEntity getOne(Long id);\n\n//    @Insert(\"INSERT INTO users(userName,passWord,user_sex) VALUES(#{userName},#{passWord},#{userSex})\")\n    void insert(UserEntity user);\n\n//    @Update(\"UPDATE users SET userName=#{userName},nick_name=#{nickName} WHERE id=#{id}\")\n    void update(UserEntity user);\n\n//    @Delete(\"DELETE FROM user WHERE id = #{id}\")\n    void delete(Long id);\n}\n```\n对比上一种方式，这里只剩接口方法\n\n#### 4. 使用\n使用方式和第一种方式没什么区别，可以参考第一种代码实现。\n\n### 如何选择\n两种模式各有特点，注解版适合简单快速的模式，其实像现在流行的微服务模式，一个微服务就会对应一个自己的数据库，多表连接查询的需求会大大的降低，会越来越适合这种模式了。\n\n老传统模式即xml配置文件的方式，更适合大型项目，可以灵活的动态生成SQL，方便调整SQL，也有痛痛快快，洋洋洒洒的写SQL的感觉。\n\n","slug":"spring-springboot-mybatis","published":1,"updated":"2018-10-14T14:18:31.145Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjn8yipie0000mguok3h530rq","content":"<p><img src=\"/images/spring-springboot-1.jpg\" alt=\"spring-springboot-thymeleaf\"></p><p>ORM框架的本质就是简化编程中操作数据库的编码，发展到现在基本上就剩两家了，一个是宣称可以不用写一句SQL的hibernate，一个是可以灵活调试动态sql的mybatis，两者各有特点，在企业级系统开发中可以根据需求灵活使用。发现一个有趣的现象：传统企业大都喜欢使用hibernate，互联网行业通常使用mybatis。<a id=\"more\"></a></p><p>Hibernate特点就是所有的sql都用Java代码来生成，不用跳出程序去写（看）sql，有着编程的完整性，发展到最顶端就是spring data jpa这种模式了，基本上根据方法名就可以生成对应的sql了。</p><p>Mybatis初期使用比较麻烦，需要各种配置文件、实体类、dao层映射关联、还有一大堆其他配置。当然mybatis也发现了这种弊端，初期开发了<a href=\"https://github.com/mybatis/generator\" target=\"_blank\" rel=\"noopener\">generator</a>可以根据表结果自动生成实体类、配置文件和dao层代码，可以减轻一部分开发量；后期也进行了大量的优化可以使用注解，自动管理dao层和配置文件等，发展到最顶端就是今天讲的这种模式，mybatis-spring-boot-starter就是springboot+mybatis可以完全注解不用配置文件，也可以简单配置轻松上手。</p><h2 id=\"mybatis-spring-boot-starter\"><a href=\"#mybatis-spring-boot-starter\" class=\"headerlink\" title=\"mybatis-spring-boot-starter\"></a>mybatis-spring-boot-starter</h2><p>官方说明：MyBatis Spring-Boot-Starter will help you use MyBatis with Spring Boot</p><p>其实就是MyBatis看spring boot这么火热也开发出一套解决方案来凑凑热闹，但这一凑却是解决了很多问题，使用起来也却是顺畅了很多。mybatis-spring-boot-starter主要有两种解决方案，一种是使用注解解决一切问题，一种是简化后的老传统。</p><p>当然，任何模式都需要在pom文件中首先引入mybatis-spring-boot-starter的依赖。</p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>好了，现在分别介绍两种开发模式</p><h3 id=\"无配置文件注解版\"><a href=\"#无配置文件注解版\" class=\"headerlink\" title=\"无配置文件注解版\"></a>无配置文件注解版</h3><p>就是一切使用注解搞定。</p><h4 id=\"1-添加相关maven依赖\"><a href=\"#1-添加相关maven依赖\" class=\"headerlink\" title=\"1. 添加相关maven依赖\"></a>1. 添加相关maven依赖</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id=\"2-application-properties-添加相关配置\"><a href=\"#2-application-properties-添加相关配置\" class=\"headerlink\" title=\"2. application.properties 添加相关配置\"></a>2. application.properties 添加相关配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mybatis.type-aliases-package=com.example.springbootmybatis.entity</span><br><span class=\"line\"></span><br><span class=\"line\">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br><span class=\"line\">spring.datasource.url=jdbc:mysql://localhost:3306/test1?useUnicode=true&amp;characterEncoding=utf-8</span><br><span class=\"line\">spring.datasource.username=root</span><br><span class=\"line\">spring.datasource.password=123456</span><br></pre></td></tr></table></figure><p>spring boot 会自动加载spring.datasource.*相关配置，数据源就会自动注入到sqlSessionFactory中，sqlSessionFactory会自动注入到Mapper中，对了你一切都不用管了，直接拿起来用就可以了。</p><p>在启动类中添加对Mapper包扫描@MapperScan</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan</span>()</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringBootMybatisApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    SpringApplication.run(SpringBootMybatisApplication.class, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>或者直接在Mapper类上面添加注解<code>@Mapper</code>,建议使用上面这种，不然每个Mapper都加个注解也挺麻烦的。</p><h4 id=\"3-开发Mapper\"><a href=\"#3-开发Mapper\" class=\"headerlink\" title=\"3. 开发Mapper\"></a>3. 开发Mapper</h4><p>第三步是关键的一步，所有的sql生成都在这里</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserMapper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Select</span>(<span class=\"string\">\"SELECT * FROM users\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Results</span>(&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Result</span>(property = <span class=\"string\">\"userSex\"</span>, column = <span class=\"string\">\"user_sex\"</span>, javaType = UserSexEnum.class),</span><br><span class=\"line\">            <span class=\"meta\">@Result</span>(property = <span class=\"string\">\"nickName\"</span>, column = <span class=\"string\">\"nick_name\"</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"function\">List&lt;UserEntity&gt; <span class=\"title\">getAll</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Select</span>(<span class=\"string\">\"SELECT * FROM users WHERE id = #&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Results</span>(&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Result</span>(property = <span class=\"string\">\"userSex\"</span>, column = <span class=\"string\">\"user_sex\"</span>, javaType = UserSexEnum.class),</span><br><span class=\"line\">            <span class=\"meta\">@Result</span>(property = <span class=\"string\">\"nickName\"</span>, column = <span class=\"string\">\"nick_name\"</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"function\">UserEntity <span class=\"title\">getOne</span><span class=\"params\">(Long id)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Insert</span>(<span class=\"string\">\"INSERT INTO users(userName,passWord,user_sex) VALUES(#&#123;userName&#125;,#&#123;passWord&#125;,#&#123;userSex&#125;)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(UserEntity user)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Update</span>(<span class=\"string\">\"UPDATE users SET userName=#&#123;userName&#125;,nick_name=#&#123;nickName&#125; WHERE id=#&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(UserEntity user)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Delete</span>(<span class=\"string\">\"DELETE FROM user WHERE id = #&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Long id)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>为了更接近生产特地将user_sex,nick_name两个属性在数据库中加了下划线和实体类属性名不一致，另外user_sex使用了枚举</p><blockquote><ul><li>@Select 是查询类的注解，所有的查询均使用这个；</li><li>@Result 修饰返回的结果集，关联实体类属性和数据库字段一一对应，如果实体类属性和数据库属性名保持一致，就不需要这个属性来修饰；</li><li>@Insert 插入数据库使用，直接传入实体类会自动解析属性到对应的值；</li><li>@Update 负责修改，也可以直接传入对象</li><li>@Delete 负责删除 <a href=\"http://www.mybatis.org/mybatis-3/zh/java-api.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">了解更多属性参考这里</a></li></ul></blockquote><blockquote><p><strong>注意，使用#符号和$符号的不同</strong></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This example creates a prepared statement, something like select * from teacher where name = ?;</span></span><br><span class=\"line\"><span class=\"meta\">@Select</span>(<span class=\"string\">\"Select * from teacher where name = #&#123;name&#125;\"</span>)</span><br><span class=\"line\"><span class=\"function\">Teacher <span class=\"title\">selectTeachForGivenName</span><span class=\"params\">(@Param(<span class=\"string\">\"name\"</span>)</span> String name)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// This example creates n inlined statement, something like select * from teacher where name = 'someName';</span></span><br><span class=\"line\"><span class=\"meta\">@Select</span>(<span class=\"string\">\"Select * from teacher where name = '$&#123;name&#125;'\"</span>)</span><br><span class=\"line\"><span class=\"function\">Teacher <span class=\"title\">selectTeachForGivenName</span><span class=\"params\">(@Param(<span class=\"string\">\"name\"</span>)</span> String name)</span>;</span><br></pre></td></tr></table></figure><p></p></blockquote><h4 id=\"4-使用\"><a href=\"#4-使用\" class=\"headerlink\" title=\"4. 使用\"></a>4. 使用</h4><p>上面三步就基本完成了相关的dao层开发，使用的时候当作普通的类注入就可以了</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith</span>(SpringRunner.class)</span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserMapperTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserMapper userMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testInsert</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        userMapper.insert(<span class=\"keyword\">new</span> UserEntity(<span class=\"string\">\"aa\"</span>, <span class=\"string\">\"a123456\"</span>, UserSexEnum.MAN));</span><br><span class=\"line\">        userMapper.insert(<span class=\"keyword\">new</span> UserEntity(<span class=\"string\">\"bb\"</span>, <span class=\"string\">\"b123456\"</span>, UserSexEnum.WOMAN));</span><br><span class=\"line\">        userMapper.insert(<span class=\"keyword\">new</span> UserEntity(<span class=\"string\">\"cc\"</span>, <span class=\"string\">\"b123456\"</span>, UserSexEnum.WOMAN));</span><br><span class=\"line\"></span><br><span class=\"line\">        Assert.assertEquals(<span class=\"number\">3</span>, userMapper.getAll().size());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testQuery</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        List&lt;UserEntity&gt; users = userMapper.getAll();</span><br><span class=\"line\">        System.out.println(users.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUpdate</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        UserEntity user = userMapper.getOne(<span class=\"keyword\">new</span> Long(<span class=\"number\">30</span>));</span><br><span class=\"line\">        System.out.println(user.toString());</span><br><span class=\"line\">        user.setNickName(<span class=\"string\">\"snaildev\"</span>);</span><br><span class=\"line\">        userMapper.update(user);</span><br><span class=\"line\">        Assert.assertTrue(<span class=\"string\">\"snaildev\"</span>.equals(userMapper.getOne(<span class=\"keyword\">new</span> Long(<span class=\"number\">30</span>)).getNickName()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id=\"极简xml版本\"><a href=\"#极简xml版本\" class=\"headerlink\" title=\"极简xml版本\"></a>极简xml版本</h3><p>极简xml版本保持映射文件的老传统，优点主要体现在不需要实现dao的是实现层，系统会自动根据方法名在映射文件中找到对应的sql。</p><h4 id=\"1-配置\"><a href=\"#1-配置\" class=\"headerlink\" title=\"1. 配置\"></a>1. 配置</h4><p>pom文件和上面第一种方式一致，只是application.properties新增以下配置</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mybatis.config-location=classpath:mybatis/mybatis-config.xml</span><br><span class=\"line\">mybatis.mapper-locations=classpath:mybatis/mapper/*.xml</span><br></pre></td></tr></table></figure><p></p><p>指定了mybatis基础配置文件和实体类映射文件的地址</p><p>mybatis-config.xml配置</p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">typeAliases</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">typeAlias</span> <span class=\"attr\">alias</span>=<span class=\"string\">\"Integer\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"java.lang.Integer\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">typeAlias</span> <span class=\"attr\">alias</span>=<span class=\"string\">\"Long\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"java.lang.Long\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">typeAlias</span> <span class=\"attr\">alias</span>=<span class=\"string\">\"HashMap\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"java.util.HashMap\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">typeAlias</span> <span class=\"attr\">alias</span>=<span class=\"string\">\"LinkedHashMap\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"java.util.LinkedHashMap\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">typeAlias</span> <span class=\"attr\">alias</span>=<span class=\"string\">\"ArrayList\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"java.util.ArrayList\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">typeAlias</span> <span class=\"attr\">alias</span>=<span class=\"string\">\"LinkedList\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"java.util.LinkedList\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">typeAliases</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>这里也可以添加一些mybatis基础的设置</p><h4 id=\"2-添加User的映射文件\"><a href=\"#2-添加User的映射文件\" class=\"headerlink\" title=\"2. 添加User的映射文件\"></a>2. 添加User的映射文件</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"com.example.springbootmybatis.mapper.UserMapper\"</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">\"BaseResultMap\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.springbootmybatis.entity.UserEntity\"</span> &gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">\"BIGINT\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"userName\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"userName\"</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">\"VARCHAR\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"passWord\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"passWord\"</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">\"VARCHAR\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"user_sex\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"userSex\"</span> <span class=\"attr\">javaType</span>=<span class=\"string\">\"com.example.springbootmybatis.enums.UserSexEnum\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"nick_name\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"nickName\"</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">\"VARCHAR\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sql</span> <span class=\"attr\">id</span>=<span class=\"string\">\"Base_Column_List\"</span> &gt;</span></span><br><span class=\"line\">        id, userName, passWord, user_sex, nick_name</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">sql</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getAll\"</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">\"BaseResultMap\"</span>  &gt;</span></span><br><span class=\"line\">        SELECT</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">refid</span>=<span class=\"string\">\"Base_Column_List\"</span> /&gt;</span></span><br><span class=\"line\">        FROM users</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getOne\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"java.lang.Long\"</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">\"BaseResultMap\"</span> &gt;</span></span><br><span class=\"line\">        SELECT</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">refid</span>=<span class=\"string\">\"Base_Column_List\"</span> /&gt;</span></span><br><span class=\"line\">        FROM users</span><br><span class=\"line\">        WHERE id = #&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">\"insert\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"com.example.springbootmybatis.entity.UserEntity\"</span> &gt;</span></span><br><span class=\"line\">       INSERT INTO</span><br><span class=\"line\">       \t\tusers</span><br><span class=\"line\">       \t\t(userName,passWord,user_sex)</span><br><span class=\"line\">       \tVALUES</span><br><span class=\"line\">       \t\t(#&#123;userName&#125;, #&#123;passWord&#125;, #&#123;userSex&#125;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">update</span> <span class=\"attr\">id</span>=<span class=\"string\">\"update\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"com.example.springbootmybatis.entity.UserEntity\"</span> &gt;</span></span><br><span class=\"line\">        UPDATE</span><br><span class=\"line\">        users</span><br><span class=\"line\">        SET</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"userName != null\"</span>&gt;</span>userName = #&#123;userName&#125;,<span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"passWord != null\"</span>&gt;</span>passWord = #&#123;passWord&#125;,<span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        nick_name = #&#123;nickName&#125;</span><br><span class=\"line\">        WHERE</span><br><span class=\"line\">        id = #&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">update</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">delete</span> <span class=\"attr\">id</span>=<span class=\"string\">\"delete\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"java.lang.Long\"</span> &gt;</span></span><br><span class=\"line\">       DELETE FROM</span><br><span class=\"line\">       \t\t users</span><br><span class=\"line\">       WHERE</span><br><span class=\"line\">       \t\t id =#&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">delete</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其实就是把上个版本中Mapper的sql搬到了这里的xml中了</p><h4 id=\"3-编写Dao层的代码\"><a href=\"#3-编写Dao层的代码\" class=\"headerlink\" title=\"3. 编写Dao层的代码\"></a>3. 编写Dao层的代码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserMapper</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//    @Select(\"SELECT * FROM users\")</span></span><br><span class=\"line\"><span class=\"comment\">//    @Results(&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            @Result(property = \"userSex\", column = \"user_sex\", javaType = UserSexEnum.class),</span></span><br><span class=\"line\"><span class=\"comment\">//            @Result(property = \"nickName\", column = \"nick_name\")</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;)</span></span><br><span class=\"line\">    <span class=\"function\">List&lt;UserEntity&gt; <span class=\"title\">getAll</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    @Select(\"SELECT * FROM users WHERE id = #&#123;id&#125;\")</span></span><br><span class=\"line\"><span class=\"comment\">//    @Results(&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            @Result(property = \"userSex\", column = \"user_sex\", javaType = UserSexEnum.class),</span></span><br><span class=\"line\"><span class=\"comment\">//            @Result(property = \"nickName\", column = \"nick_name\")</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;)</span></span><br><span class=\"line\">    <span class=\"function\">UserEntity <span class=\"title\">getOne</span><span class=\"params\">(Long id)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    @Insert(\"INSERT INTO users(userName,passWord,user_sex) VALUES(#&#123;userName&#125;,#&#123;passWord&#125;,#&#123;userSex&#125;)\")</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(UserEntity user)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    @Update(\"UPDATE users SET userName=#&#123;userName&#125;,nick_name=#&#123;nickName&#125; WHERE id=#&#123;id&#125;\")</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(UserEntity user)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    @Delete(\"DELETE FROM user WHERE id = #&#123;id&#125;\")</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Long id)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>对比上一种方式，这里只剩接口方法</p><h4 id=\"4-使用-1\"><a href=\"#4-使用-1\" class=\"headerlink\" title=\"4. 使用\"></a>4. 使用</h4><p>使用方式和第一种方式没什么区别，可以参考第一种代码实现。</p><h3 id=\"如何选择\"><a href=\"#如何选择\" class=\"headerlink\" title=\"如何选择\"></a>如何选择</h3><p>两种模式各有特点，注解版适合简单快速的模式，其实像现在流行的微服务模式，一个微服务就会对应一个自己的数据库，多表连接查询的需求会大大的降低，会越来越适合这种模式了。</p><p>老传统模式即xml配置文件的方式，更适合大型项目，可以灵活的动态生成SQL，方便调整SQL，也有痛痛快快，洋洋洒洒的写SQL的感觉。</p>","site":{"data":{}},"excerpt":"<p><img src=\"/images/spring-springboot-1.jpg\" alt=\"spring-springboot-thymeleaf\"></p><p>ORM框架的本质就是简化编程中操作数据库的编码，发展到现在基本上就剩两家了，一个是宣称可以不用写一句SQL的hibernate，一个是可以灵活调试动态sql的mybatis，两者各有特点，在企业级系统开发中可以根据需求灵活使用。发现一个有趣的现象：传统企业大都喜欢使用hibernate，互联网行业通常使用mybatis。","more":"</p><p>Hibernate特点就是所有的sql都用Java代码来生成，不用跳出程序去写（看）sql，有着编程的完整性，发展到最顶端就是spring data jpa这种模式了，基本上根据方法名就可以生成对应的sql了。</p><p>Mybatis初期使用比较麻烦，需要各种配置文件、实体类、dao层映射关联、还有一大堆其他配置。当然mybatis也发现了这种弊端，初期开发了<a href=\"https://github.com/mybatis/generator\" target=\"_blank\" rel=\"noopener\">generator</a>可以根据表结果自动生成实体类、配置文件和dao层代码，可以减轻一部分开发量；后期也进行了大量的优化可以使用注解，自动管理dao层和配置文件等，发展到最顶端就是今天讲的这种模式，mybatis-spring-boot-starter就是springboot+mybatis可以完全注解不用配置文件，也可以简单配置轻松上手。</p><h2 id=\"mybatis-spring-boot-starter\"><a href=\"#mybatis-spring-boot-starter\" class=\"headerlink\" title=\"mybatis-spring-boot-starter\"></a>mybatis-spring-boot-starter</h2><p>官方说明：MyBatis Spring-Boot-Starter will help you use MyBatis with Spring Boot</p><p>其实就是MyBatis看spring boot这么火热也开发出一套解决方案来凑凑热闹，但这一凑却是解决了很多问题，使用起来也却是顺畅了很多。mybatis-spring-boot-starter主要有两种解决方案，一种是使用注解解决一切问题，一种是简化后的老传统。</p><p>当然，任何模式都需要在pom文件中首先引入mybatis-spring-boot-starter的依赖。</p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>好了，现在分别介绍两种开发模式</p><h3 id=\"无配置文件注解版\"><a href=\"#无配置文件注解版\" class=\"headerlink\" title=\"无配置文件注解版\"></a>无配置文件注解版</h3><p>就是一切使用注解搞定。</p><h4 id=\"1-添加相关maven依赖\"><a href=\"#1-添加相关maven依赖\" class=\"headerlink\" title=\"1. 添加相关maven依赖\"></a>1. 添加相关maven依赖</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id=\"2-application-properties-添加相关配置\"><a href=\"#2-application-properties-添加相关配置\" class=\"headerlink\" title=\"2. application.properties 添加相关配置\"></a>2. application.properties 添加相关配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mybatis.type-aliases-package=com.example.springbootmybatis.entity</span><br><span class=\"line\"></span><br><span class=\"line\">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br><span class=\"line\">spring.datasource.url=jdbc:mysql://localhost:3306/test1?useUnicode=true&amp;characterEncoding=utf-8</span><br><span class=\"line\">spring.datasource.username=root</span><br><span class=\"line\">spring.datasource.password=123456</span><br></pre></td></tr></table></figure><p>spring boot 会自动加载spring.datasource.*相关配置，数据源就会自动注入到sqlSessionFactory中，sqlSessionFactory会自动注入到Mapper中，对了你一切都不用管了，直接拿起来用就可以了。</p><p>在启动类中添加对Mapper包扫描@MapperScan</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan</span>()</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringBootMybatisApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    SpringApplication.run(SpringBootMybatisApplication.class, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>或者直接在Mapper类上面添加注解<code>@Mapper</code>,建议使用上面这种，不然每个Mapper都加个注解也挺麻烦的。</p><h4 id=\"3-开发Mapper\"><a href=\"#3-开发Mapper\" class=\"headerlink\" title=\"3. 开发Mapper\"></a>3. 开发Mapper</h4><p>第三步是关键的一步，所有的sql生成都在这里</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserMapper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Select</span>(<span class=\"string\">\"SELECT * FROM users\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Results</span>(&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Result</span>(property = <span class=\"string\">\"userSex\"</span>, column = <span class=\"string\">\"user_sex\"</span>, javaType = UserSexEnum.class),</span><br><span class=\"line\">            <span class=\"meta\">@Result</span>(property = <span class=\"string\">\"nickName\"</span>, column = <span class=\"string\">\"nick_name\"</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"function\">List&lt;UserEntity&gt; <span class=\"title\">getAll</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Select</span>(<span class=\"string\">\"SELECT * FROM users WHERE id = #&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Results</span>(&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Result</span>(property = <span class=\"string\">\"userSex\"</span>, column = <span class=\"string\">\"user_sex\"</span>, javaType = UserSexEnum.class),</span><br><span class=\"line\">            <span class=\"meta\">@Result</span>(property = <span class=\"string\">\"nickName\"</span>, column = <span class=\"string\">\"nick_name\"</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"function\">UserEntity <span class=\"title\">getOne</span><span class=\"params\">(Long id)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Insert</span>(<span class=\"string\">\"INSERT INTO users(userName,passWord,user_sex) VALUES(#&#123;userName&#125;,#&#123;passWord&#125;,#&#123;userSex&#125;)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(UserEntity user)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Update</span>(<span class=\"string\">\"UPDATE users SET userName=#&#123;userName&#125;,nick_name=#&#123;nickName&#125; WHERE id=#&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(UserEntity user)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Delete</span>(<span class=\"string\">\"DELETE FROM user WHERE id = #&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Long id)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>为了更接近生产特地将user_sex,nick_name两个属性在数据库中加了下划线和实体类属性名不一致，另外user_sex使用了枚举</p><blockquote><ul><li>@Select 是查询类的注解，所有的查询均使用这个；</li><li>@Result 修饰返回的结果集，关联实体类属性和数据库字段一一对应，如果实体类属性和数据库属性名保持一致，就不需要这个属性来修饰；</li><li>@Insert 插入数据库使用，直接传入实体类会自动解析属性到对应的值；</li><li>@Update 负责修改，也可以直接传入对象</li><li>@Delete 负责删除 <a href=\"http://www.mybatis.org/mybatis-3/zh/java-api.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">了解更多属性参考这里</a></li></ul></blockquote><blockquote><p><strong>注意，使用#符号和$符号的不同</strong></p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This example creates a prepared statement, something like select * from teacher where name = ?;</span></span><br><span class=\"line\"><span class=\"meta\">@Select</span>(<span class=\"string\">\"Select * from teacher where name = #&#123;name&#125;\"</span>)</span><br><span class=\"line\"><span class=\"function\">Teacher <span class=\"title\">selectTeachForGivenName</span><span class=\"params\">(@Param(<span class=\"string\">\"name\"</span>)</span> String name)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// This example creates n inlined statement, something like select * from teacher where name = 'someName';</span></span><br><span class=\"line\"><span class=\"meta\">@Select</span>(<span class=\"string\">\"Select * from teacher where name = '$&#123;name&#125;'\"</span>)</span><br><span class=\"line\"><span class=\"function\">Teacher <span class=\"title\">selectTeachForGivenName</span><span class=\"params\">(@Param(<span class=\"string\">\"name\"</span>)</span> String name)</span>;</span><br></pre></td></tr></table></figure><p></p></blockquote><h4 id=\"4-使用\"><a href=\"#4-使用\" class=\"headerlink\" title=\"4. 使用\"></a>4. 使用</h4><p>上面三步就基本完成了相关的dao层开发，使用的时候当作普通的类注入就可以了</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith</span>(SpringRunner.class)</span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserMapperTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserMapper userMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testInsert</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        userMapper.insert(<span class=\"keyword\">new</span> UserEntity(<span class=\"string\">\"aa\"</span>, <span class=\"string\">\"a123456\"</span>, UserSexEnum.MAN));</span><br><span class=\"line\">        userMapper.insert(<span class=\"keyword\">new</span> UserEntity(<span class=\"string\">\"bb\"</span>, <span class=\"string\">\"b123456\"</span>, UserSexEnum.WOMAN));</span><br><span class=\"line\">        userMapper.insert(<span class=\"keyword\">new</span> UserEntity(<span class=\"string\">\"cc\"</span>, <span class=\"string\">\"b123456\"</span>, UserSexEnum.WOMAN));</span><br><span class=\"line\"></span><br><span class=\"line\">        Assert.assertEquals(<span class=\"number\">3</span>, userMapper.getAll().size());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testQuery</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        List&lt;UserEntity&gt; users = userMapper.getAll();</span><br><span class=\"line\">        System.out.println(users.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUpdate</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        UserEntity user = userMapper.getOne(<span class=\"keyword\">new</span> Long(<span class=\"number\">30</span>));</span><br><span class=\"line\">        System.out.println(user.toString());</span><br><span class=\"line\">        user.setNickName(<span class=\"string\">\"snaildev\"</span>);</span><br><span class=\"line\">        userMapper.update(user);</span><br><span class=\"line\">        Assert.assertTrue(<span class=\"string\">\"snaildev\"</span>.equals(userMapper.getOne(<span class=\"keyword\">new</span> Long(<span class=\"number\">30</span>)).getNickName()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id=\"极简xml版本\"><a href=\"#极简xml版本\" class=\"headerlink\" title=\"极简xml版本\"></a>极简xml版本</h3><p>极简xml版本保持映射文件的老传统，优点主要体现在不需要实现dao的是实现层，系统会自动根据方法名在映射文件中找到对应的sql。</p><h4 id=\"1-配置\"><a href=\"#1-配置\" class=\"headerlink\" title=\"1. 配置\"></a>1. 配置</h4><p>pom文件和上面第一种方式一致，只是application.properties新增以下配置</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mybatis.config-location=classpath:mybatis/mybatis-config.xml</span><br><span class=\"line\">mybatis.mapper-locations=classpath:mybatis/mapper/*.xml</span><br></pre></td></tr></table></figure><p></p><p>指定了mybatis基础配置文件和实体类映射文件的地址</p><p>mybatis-config.xml配置</p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">typeAliases</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">typeAlias</span> <span class=\"attr\">alias</span>=<span class=\"string\">\"Integer\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"java.lang.Integer\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">typeAlias</span> <span class=\"attr\">alias</span>=<span class=\"string\">\"Long\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"java.lang.Long\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">typeAlias</span> <span class=\"attr\">alias</span>=<span class=\"string\">\"HashMap\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"java.util.HashMap\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">typeAlias</span> <span class=\"attr\">alias</span>=<span class=\"string\">\"LinkedHashMap\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"java.util.LinkedHashMap\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">typeAlias</span> <span class=\"attr\">alias</span>=<span class=\"string\">\"ArrayList\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"java.util.ArrayList\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">typeAlias</span> <span class=\"attr\">alias</span>=<span class=\"string\">\"LinkedList\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"java.util.LinkedList\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">typeAliases</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>这里也可以添加一些mybatis基础的设置</p><h4 id=\"2-添加User的映射文件\"><a href=\"#2-添加User的映射文件\" class=\"headerlink\" title=\"2. 添加User的映射文件\"></a>2. 添加User的映射文件</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"com.example.springbootmybatis.mapper.UserMapper\"</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">\"BaseResultMap\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.springbootmybatis.entity.UserEntity\"</span> &gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">\"BIGINT\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"userName\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"userName\"</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">\"VARCHAR\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"passWord\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"passWord\"</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">\"VARCHAR\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"user_sex\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"userSex\"</span> <span class=\"attr\">javaType</span>=<span class=\"string\">\"com.example.springbootmybatis.enums.UserSexEnum\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"nick_name\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"nickName\"</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">\"VARCHAR\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sql</span> <span class=\"attr\">id</span>=<span class=\"string\">\"Base_Column_List\"</span> &gt;</span></span><br><span class=\"line\">        id, userName, passWord, user_sex, nick_name</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">sql</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getAll\"</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">\"BaseResultMap\"</span>  &gt;</span></span><br><span class=\"line\">        SELECT</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">refid</span>=<span class=\"string\">\"Base_Column_List\"</span> /&gt;</span></span><br><span class=\"line\">        FROM users</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getOne\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"java.lang.Long\"</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">\"BaseResultMap\"</span> &gt;</span></span><br><span class=\"line\">        SELECT</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">refid</span>=<span class=\"string\">\"Base_Column_List\"</span> /&gt;</span></span><br><span class=\"line\">        FROM users</span><br><span class=\"line\">        WHERE id = #&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">\"insert\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"com.example.springbootmybatis.entity.UserEntity\"</span> &gt;</span></span><br><span class=\"line\">       INSERT INTO</span><br><span class=\"line\">       \t\tusers</span><br><span class=\"line\">       \t\t(userName,passWord,user_sex)</span><br><span class=\"line\">       \tVALUES</span><br><span class=\"line\">       \t\t(#&#123;userName&#125;, #&#123;passWord&#125;, #&#123;userSex&#125;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">update</span> <span class=\"attr\">id</span>=<span class=\"string\">\"update\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"com.example.springbootmybatis.entity.UserEntity\"</span> &gt;</span></span><br><span class=\"line\">        UPDATE</span><br><span class=\"line\">        users</span><br><span class=\"line\">        SET</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"userName != null\"</span>&gt;</span>userName = #&#123;userName&#125;,<span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"passWord != null\"</span>&gt;</span>passWord = #&#123;passWord&#125;,<span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        nick_name = #&#123;nickName&#125;</span><br><span class=\"line\">        WHERE</span><br><span class=\"line\">        id = #&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">update</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">delete</span> <span class=\"attr\">id</span>=<span class=\"string\">\"delete\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"java.lang.Long\"</span> &gt;</span></span><br><span class=\"line\">       DELETE FROM</span><br><span class=\"line\">       \t\t users</span><br><span class=\"line\">       WHERE</span><br><span class=\"line\">       \t\t id =#&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">delete</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其实就是把上个版本中Mapper的sql搬到了这里的xml中了</p><h4 id=\"3-编写Dao层的代码\"><a href=\"#3-编写Dao层的代码\" class=\"headerlink\" title=\"3. 编写Dao层的代码\"></a>3. 编写Dao层的代码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserMapper</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//    @Select(\"SELECT * FROM users\")</span></span><br><span class=\"line\"><span class=\"comment\">//    @Results(&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            @Result(property = \"userSex\", column = \"user_sex\", javaType = UserSexEnum.class),</span></span><br><span class=\"line\"><span class=\"comment\">//            @Result(property = \"nickName\", column = \"nick_name\")</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;)</span></span><br><span class=\"line\">    <span class=\"function\">List&lt;UserEntity&gt; <span class=\"title\">getAll</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    @Select(\"SELECT * FROM users WHERE id = #&#123;id&#125;\")</span></span><br><span class=\"line\"><span class=\"comment\">//    @Results(&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            @Result(property = \"userSex\", column = \"user_sex\", javaType = UserSexEnum.class),</span></span><br><span class=\"line\"><span class=\"comment\">//            @Result(property = \"nickName\", column = \"nick_name\")</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;)</span></span><br><span class=\"line\">    <span class=\"function\">UserEntity <span class=\"title\">getOne</span><span class=\"params\">(Long id)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    @Insert(\"INSERT INTO users(userName,passWord,user_sex) VALUES(#&#123;userName&#125;,#&#123;passWord&#125;,#&#123;userSex&#125;)\")</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(UserEntity user)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    @Update(\"UPDATE users SET userName=#&#123;userName&#125;,nick_name=#&#123;nickName&#125; WHERE id=#&#123;id&#125;\")</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(UserEntity user)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    @Delete(\"DELETE FROM user WHERE id = #&#123;id&#125;\")</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Long id)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>对比上一种方式，这里只剩接口方法</p><h4 id=\"4-使用-1\"><a href=\"#4-使用-1\" class=\"headerlink\" title=\"4. 使用\"></a>4. 使用</h4><p>使用方式和第一种方式没什么区别，可以参考第一种代码实现。</p><h3 id=\"如何选择\"><a href=\"#如何选择\" class=\"headerlink\" title=\"如何选择\"></a>如何选择</h3><p>两种模式各有特点，注解版适合简单快速的模式，其实像现在流行的微服务模式，一个微服务就会对应一个自己的数据库，多表连接查询的需求会大大的降低，会越来越适合这种模式了。</p><p>老传统模式即xml配置文件的方式，更适合大型项目，可以灵活的动态生成SQL，方便调整SQL，也有痛痛快快，洋洋洒洒的写SQL的感觉。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjmyu0s8p0000x8uoitgko449","category_id":"cjmyu0s9l0004x8uop04m2bhu","_id":"cjmyu0sas000hx8uodgx63p2y"},{"post_id":"cjmyu0sab000ax8uoxge0rqpc","category_id":"cjmyu0s9l0004x8uop04m2bhu","_id":"cjmyu0saz000kx8uo438pf4r9"},{"post_id":"cjmyu0sai000ex8uob10gelld","category_id":"cjmyu0s9l0004x8uop04m2bhu","_id":"cjmyu0sb8000px8uod9yucq83"},{"post_id":"cjmyu0sa20008x8uogimcdp0d","category_id":"cjmyu0sag000bx8uodnlspvhx","_id":"cjmyu0sbe000rx8uo9ppmbs2p"},{"post_id":"cjmyu0sao000gx8uo398zqwt8","category_id":"cjmyu0sb1000lx8uocet2zhbc","_id":"cjmyu0sbz0010x8uoplp2h8xs"},{"post_id":"cjmyu0sbi000tx8uossdcher8","category_id":"cjmyu0sag000bx8uodnlspvhx","_id":"cjmyu0sc50014x8uogerl5ewr"},{"post_id":"cjmyu0saw000jx8uolkw7x5mf","category_id":"cjmyu0sbl000ux8uon72599ga","_id":"cjmyu0sca0017x8uo4lxf4ez1"},{"post_id":"cjmyu0sb5000ox8uofb9qb03p","category_id":"cjmyu0sc00011x8uoi1i5fetl","_id":"cjmyu0scn001dx8uoe2yea7fi"},{"post_id":"cjmyu0sc60016x8uoj8xbbi3v","category_id":"cjmyu0s9l0004x8uop04m2bhu","_id":"cjmyu0sct001gx8uousl8465v"},{"post_id":"cjmyu0scd001ax8uohom1f2sb","category_id":"cjmyu0scb0018x8uo0ld4qyxw","_id":"cjmyu0scv001ix8uowwnsf4mc"},{"post_id":"cjmyu0sbb000qx8uo1femuffq","category_id":"cjmyu0scb0018x8uo0ld4qyxw","_id":"cjmyu0scy001mx8uoa9p52ztv"},{"post_id":"cjmyu0scj001cx8uo5i7tr0j3","category_id":"cjmyu0s9l0004x8uop04m2bhu","_id":"cjmyu0scz001ox8uomt2i9r83"},{"post_id":"cjmyu0sbs000xx8uolpmds5nj","category_id":"cjmyu0scb0018x8uo0ld4qyxw","_id":"cjmyu0sd1001rx8uo8797t888"},{"post_id":"cjmyu0sbx000zx8uoh7qbxned","category_id":"cjmyu0scb0018x8uo0ld4qyxw","_id":"cjmyu0sd2001tx8uozogvu6a4"},{"post_id":"cjmyu0sc20013x8uorva6sc8b","category_id":"cjmyu0scb0018x8uo0ld4qyxw","_id":"cjmyu0sd5001wx8uovm7m7sw7"},{"post_id":"cjn8yipie0000mguok3h530rq","category_id":"cjmyu0scb0018x8uo0ld4qyxw","_id":"cjn8yipjo0002mguo2clhs93a"}],"PostTag":[{"post_id":"cjmyu0s8p0000x8uoitgko449","tag_id":"cjmyu0s9n0005x8uoas1iwhxm","_id":"cjmyu0sah000dx8uolwzlbtzd"},{"post_id":"cjmyu0sab000ax8uoxge0rqpc","tag_id":"cjmyu0s9n0005x8uoas1iwhxm","_id":"cjmyu0san000fx8uouu2ozt1t"},{"post_id":"cjmyu0sai000ex8uob10gelld","tag_id":"cjmyu0s9n0005x8uoas1iwhxm","_id":"cjmyu0sau000ix8uohajq27c0"},{"post_id":"cjmyu0sa20008x8uogimcdp0d","tag_id":"cjmyu0sag000cx8uolu7x8su2","_id":"cjmyu0sb4000nx8uoo6t232ib"},{"post_id":"cjmyu0sb5000ox8uofb9qb03p","tag_id":"cjmyu0sag000cx8uolu7x8su2","_id":"cjmyu0sbg000sx8uoxwwobhg6"},{"post_id":"cjmyu0sao000gx8uo398zqwt8","tag_id":"cjmyu0sb3000mx8uoyek4yt2r","_id":"cjmyu0sbr000wx8uoj1wvmtbd"},{"post_id":"cjmyu0sbi000tx8uossdcher8","tag_id":"cjmyu0sag000cx8uolu7x8su2","_id":"cjmyu0sbw000yx8uobto9p37b"},{"post_id":"cjmyu0saw000jx8uolkw7x5mf","tag_id":"cjmyu0sbo000vx8uok7lfffft","_id":"cjmyu0sc50015x8uo5c1trcmf"},{"post_id":"cjmyu0sc60016x8uoj8xbbi3v","tag_id":"cjmyu0s9n0005x8uoas1iwhxm","_id":"cjmyu0sci001bx8uol1v77zab"},{"post_id":"cjmyu0sbb000qx8uo1femuffq","tag_id":"cjmyu0sc10012x8uojnozo0bi","_id":"cjmyu0scu001hx8uozfjy5fng"},{"post_id":"cjmyu0sbb000qx8uo1femuffq","tag_id":"cjmyu0scc0019x8uohbpzehio","_id":"cjmyu0scv001jx8uoy22ckap9"},{"post_id":"cjmyu0scj001cx8uo5i7tr0j3","tag_id":"cjmyu0s9n0005x8uoas1iwhxm","_id":"cjmyu0scy001nx8uoe5qnchz8"},{"post_id":"cjmyu0sbs000xx8uolpmds5nj","tag_id":"cjmyu0sc10012x8uojnozo0bi","_id":"cjmyu0sd2001sx8uonfbakml2"},{"post_id":"cjmyu0sbs000xx8uolpmds5nj","tag_id":"cjmyu0scx001lx8uoz94411bz","_id":"cjmyu0sd3001ux8uo1hcnn329"},{"post_id":"cjmyu0sbx000zx8uoh7qbxned","tag_id":"cjmyu0sc10012x8uojnozo0bi","_id":"cjmyu0sd8001yx8uov41ovfd9"},{"post_id":"cjmyu0sbx000zx8uoh7qbxned","tag_id":"cjmyu0sd4001vx8uos5exbwq2","_id":"cjmyu0sd9001zx8uown2eukm7"},{"post_id":"cjmyu0sc20013x8uorva6sc8b","tag_id":"cjmyu0sc10012x8uojnozo0bi","_id":"cjmyu0sdc0021x8uoa2dh8rtx"},{"post_id":"cjmyu0sc20013x8uorva6sc8b","tag_id":"cjmyu0sd6001xx8uoy8rttl1m","_id":"cjmyu0sdd0022x8uo62y8conf"},{"post_id":"cjmyu0scd001ax8uohom1f2sb","tag_id":"cjmyu0sc10012x8uojnozo0bi","_id":"cjmyu0sde0023x8uoz0vcmxmq"},{"post_id":"cjmyu0scd001ax8uohom1f2sb","tag_id":"cjmyu0sda0020x8uo3g9qddd4","_id":"cjmyu0sde0024x8uoapx8kust"},{"post_id":"cjn8yipie0000mguok3h530rq","tag_id":"cjmyu0sc10012x8uojnozo0bi","_id":"cjn8yipjr0003mguorgnihr7i"},{"post_id":"cjn8yipie0000mguok3h530rq","tag_id":"cjn8yipj40001mguok118oz4c","_id":"cjn8yipjs0004mguov2ml8ecb"}],"Tag":[{"name":"Java基础","_id":"cjmyu0s9n0005x8uoas1iwhxm"},{"name":"随手写写","_id":"cjmyu0sag000cx8uolu7x8su2"},{"name":"JavaScript","_id":"cjmyu0sb3000mx8uoyek4yt2r"},{"name":"服务治理","_id":"cjmyu0sbo000vx8uok7lfffft"},{"name":"SpringBoot","_id":"cjmyu0sc10012x8uojnozo0bi"},{"name":"Jpa","_id":"cjmyu0scc0019x8uohbpzehio"},{"name":"Thymeleaf","_id":"cjmyu0scx001lx8uoz94411bz"},{"name":"HelloWorld","_id":"cjmyu0sd4001vx8uos5exbwq2"},{"name":"Web综合开发","_id":"cjmyu0sd6001xx8uoy8rttl1m"},{"name":"Redis","_id":"cjmyu0sda0020x8uo3g9qddd4"},{"name":"Mybatis","_id":"cjn8yipj40001mguok118oz4c"}]}}